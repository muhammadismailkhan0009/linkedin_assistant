{"mappings":"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","sources":["<anon>","src/background/content.js","src/actions/scraper/runScraper.ts","src/services/DataExchangeService.ts","src/actions/scraper/scrapePost.ts","src/actions/scraper/storeGeneratedComment.ts","src/actions/popup/displayBadgeStatus.ts"],"sourcesContent":["(() => {\nclass $1309c5b6a9dcc764$export$248a06f14bb3c802 {\n    async getAuthToken() {\n        return new Promise((resolve)=>{\n            chrome.storage.local.get([\n                \"token\"\n            ], (result)=>{\n                resolve(result.token ?? null);\n            });\n        });\n    }\n    async getInstallId() {\n        return new Promise((resolve)=>{\n            chrome.storage.local.get([\n                \"installId\"\n            ], (result)=>{\n                resolve(result.installId ?? null);\n            });\n        });\n    }\n    async generatePost(userInput) {\n        try {\n            const idea = {\n                idea: userInput\n            };\n            let authInfo = await this.getAuthTokenAndInstallerId();\n            const response = await fetch(\"https://api.wanderlytics.me/linkedin/api/v1/create-post\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: idea,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(`Backend error: ${response.status}`);\n            const data = await response.json();\n            console.log(\"\\u2705 post received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"\\u274C Failed to send post to backend:\", error);\n            return null;\n        }\n    }\n    async getAuthTokenAndInstallerId() {\n        const token = await this.getAuthToken();\n        const installId = await this.getInstallId();\n        if (!token || !installId) throw new Error(\"Missing auth token or install ID\");\n        return {\n            token: token,\n            installId: installId\n        };\n    }\n    async sendPostToBackend(scrappedPost, url) {\n        try {\n            let authInfo = await this.getAuthTokenAndInstallerId();\n            const response = await fetch(\"https://api.wanderlytics.me/linkedin/api/v1/create-comment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: {\n                        scrappedPost: scrappedPost,\n                        url: url\n                    },\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(`Backend error: ${response.status}`);\n            const data = await response.json();\n            console.log(\"\\u2705 Comment received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"\\u274C Failed to send post to backend:\", error);\n            return null;\n        }\n    }\n}\n\n\nlet $7bf3d13dc4b6a443$var$generatedComment = \"\";\nasync function $7bf3d13dc4b6a443$export$a27c74d8ed2feb95() {\n    console.log(\"\\u23F3 [Scraper] Waiting for DOM to load...\");\n    if (document.readyState === \"loading\") {\n        await new Promise((resolve)=>document.addEventListener(\"DOMContentLoaded\", resolve));\n        console.log(\"\\u2705 [Scraper] DOM fully loaded.\");\n    } else console.log(\"\\u2705 [Scraper] DOM was already ready.\");\n    const postSelector = '.update-components-update-v2__commentary span[dir=\"ltr\"]';\n    const postText = await $7bf3d13dc4b6a443$var$waitForPostText(postSelector);\n    if (postText) return postText;\n    else {\n        console.error(\"\\u274C [Scraper] Failed to find or extract post text.\");\n        throw new Error(\"post could not be extracted\");\n    }\n}\nfunction $7bf3d13dc4b6a443$var$waitForPostText(selector, timeout = 10000) {\n    return new Promise((resolve)=>{\n        const startTime = Date.now();\n        const interval = setInterval(()=>{\n            const elapsed = Date.now() - startTime;\n            const element = document.querySelector(selector);\n            if (element) {\n                console.log(\"\\u2705 [Scraper] Found post text element.\");\n                clearInterval(interval);\n                resolve(element.innerText.trim());\n            }\n            if (elapsed >= timeout) {\n                console.warn(\"\\u26A0\\uFE0F [Scraper] Timeout: Post text not found.\");\n                clearInterval(interval);\n                resolve(null);\n            }\n        }, 500);\n    });\n}\n\n\nasync function $a6266c4d9b263f87$export$252c877b0ff122e7(comment, url) {\n    if (!url) return;\n    const key = `comment-${url}`;\n    await chrome.storage.local.set({\n        [key]: comment\n    });\n    console.log(\"comment stored:\" + comment);\n}\n\n\nfunction $a3bcdddc9a5a8b50$export$eb85a53ab42fce58() {\n    chrome.runtime.sendMessage({\n        type: \"SET_BADGE\",\n        status: \"loading\"\n    });\n}\nfunction $a3bcdddc9a5a8b50$export$1e2aa2b1e44ee7cf() {\n    chrome.runtime.sendMessage({\n        type: \"SET_BADGE\",\n        status: \"ready\"\n    });\n}\n\n\nasync function $8f344cde988e99c8$export$203201cb94deadb2() {\n    (0, $a3bcdddc9a5a8b50$export$eb85a53ab42fce58)();\n    const url = window.location.href; // provides url access in in-active tabs as well\n    let scrapedPost = await (0, $7bf3d13dc4b6a443$export$a27c74d8ed2feb95)();\n    let generatedComment = await new (0, $1309c5b6a9dcc764$export$248a06f14bb3c802)().sendPostToBackend(scrapedPost, \"\");\n    (0, $a6266c4d9b263f87$export$252c877b0ff122e7)(generatedComment.payload, url);\n    (0, $a3bcdddc9a5a8b50$export$1e2aa2b1e44ee7cf)();\n}\n\n\nconsole.log(\"\\u2705 [LinkedIn Scraper] Content script injected.\");\n(0, $8f344cde988e99c8$export$203201cb94deadb2)();\n\n})();\n//# sourceMappingURL=content.js.map\n","import { runScraper } from \"@actions/scraper/runScraper\";\n\nconsole.log(\"✅ [LinkedIn Scraper] Content script injected.\");\n\nrunScraper();","import { DataExchangeService } from \"services/DataExchangeService\";\nimport { scrapePost } from \"./scrapePost\";\nimport { storeGeneratedComment } from \"./storeGeneratedComment\";\nimport { showCommentIsReady, showInProcess } from \"@actions/popup/displayBadgeStatus\";\n\nexport async function runScraper() {\n    showInProcess();\n\n    const url = window.location.href;// provides url access in in-active tabs as well\n    let scrapedPost = await scrapePost();\n    let generatedComment = await new DataExchangeService().sendPostToBackend(scrapedPost, \"\");\n    storeGeneratedComment(generatedComment.payload, url);\n\n    showCommentIsReady();\n\n}","import { AuthInfo } from \"./types/AuthInfo\";\nimport { UserIdea } from \"./types/UserIdea\";\n\nexport class DataExchangeService {\n    async getAuthToken(): Promise<string | null> {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\"token\"], (result) => {\n                resolve(result.token ?? null);\n            });\n        });\n    }\n\n    async getInstallId(): Promise<string | null> {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\"installId\"], (result) => {\n                resolve(result.installId ?? null);\n            });\n        });\n    }\n\n    async generatePost(userInput: string) {\n\n        try {\n\n            const idea: UserIdea = {\n                idea: userInput\n            }\n            let authInfo = await this.getAuthTokenAndInstallerId();\n\n            const response = await fetch(\"https://api.wanderlytics.me/linkedin/api/v1/create-post\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: idea,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Backend error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log(\"✅ post received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"❌ Failed to send post to backend:\", error);\n            return null;\n        }\n\n\n    }\n\n\n\n    private async getAuthTokenAndInstallerId(): Promise<AuthInfo> {\n\n        const token = await this.getAuthToken();\n        const installId = await this.getInstallId();\n\n        if (!token || !installId) {\n            throw new Error(\"Missing auth token or install ID\");\n        }\n\n        return {\n            token,\n            installId\n        };\n\n    }\n\n\n\n    async sendPostToBackend(scrappedPost: string, url: string) {\n        try {\n\n            let authInfo = await this.getAuthTokenAndInstallerId();\n\n            const response = await fetch(\"https://api.wanderlytics.me/linkedin/api/v1/create-comment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: {\n                        scrappedPost,\n                        url\n                    },\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Backend error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log(\"✅ Comment received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"❌ Failed to send post to backend:\", error);\n            return null;\n        }\n    }\n}\n","import { DataExchangeService } from \"services/DataExchangeService\";\n\nlet generatedComment = \"\";\nexport async function scrapePost() {\n    console.log(\"⏳ [Scraper] Waiting for DOM to load...\");\n\n    if (document.readyState === \"loading\") {\n        await new Promise((resolve) => document.addEventListener(\"DOMContentLoaded\", resolve));\n        console.log(\"✅ [Scraper] DOM fully loaded.\");\n    } else {\n        console.log(\"✅ [Scraper] DOM was already ready.\");\n    }\n\n    const postSelector = '.update-components-update-v2__commentary span[dir=\"ltr\"]';\n\n    const postText = await waitForPostText(postSelector);\n\n    if (postText) {\n        return postText;\n\n    } else {\n        console.error(\"❌ [Scraper] Failed to find or extract post text.\");\n        throw new Error(\"post could not be extracted\");\n    }\n}\n\nfunction waitForPostText(selector: string, timeout = 10000): Promise<string | null> {\n    return new Promise((resolve) => {\n        const startTime = Date.now();\n\n        const interval = setInterval(() => {\n            const elapsed = Date.now() - startTime;\n            const element = document.querySelector(selector) as HTMLElement;\n\n            if (element) {\n                console.log(\"✅ [Scraper] Found post text element.\");\n                clearInterval(interval);\n                resolve(element.innerText.trim());\n            }\n\n            if (elapsed >= timeout) {\n                console.warn(\"⚠️ [Scraper] Timeout: Post text not found.\");\n                clearInterval(interval);\n                resolve(null);\n            }\n        }, 500);\n    });\n}","import { getCurrentTabUrlOnStoring } from \"services/TabUtils\";\n\nexport async function storeGeneratedComment(comment: string, url: string | null) {\n    if (!url) return;\n\n    const key = `comment-${url}`;\n    await chrome.storage.local.set({ [key]: comment });\n    console.log(\"comment stored:\" + comment);\n}\n","export function showInProcess() {\n    chrome.runtime.sendMessage({ type: \"SET_BADGE\", status: \"loading\" });\n}\n\nexport function showCommentIsReady() {\n    chrome.runtime.sendMessage({ type: \"SET_BADGE\", status: \"ready\" });\n}"],"names":["$1309c5b6a9dcc764$export$248a06f14bb3c802","getAuthToken","Promise","resolve","chrome","storage","local","get","result","token","getInstallId","installId","generatePost","userInput","authInfo","getAuthTokenAndInstallerId","response","fetch","method","headers","body","JSON","stringify","payload","idea","additionalMetadata","ok","Error","status","data","json","console","log","error","sendPostToBackend","scrappedPost","url","$7bf3d13dc4b6a443$export$a27c74d8ed2feb95","document","readyState","addEventListener","postText","$7bf3d13dc4b6a443$var$waitForPostText","selector","timeout","startTime","Date","now","interval","setInterval","elapsed","element","querySelector","clearInterval","innerText","trim","warn","$a6266c4d9b263f87$export$252c877b0ff122e7","comment","key","set","$8f344cde988e99c8$export$203201cb94deadb2","runtime","sendMessage","type","window","location","href","scrapedPost","generatedComment"],"version":3,"file":"content.js.map"}