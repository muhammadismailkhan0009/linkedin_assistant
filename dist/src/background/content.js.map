{"mappings":"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","sources":["<anon>","src/background/content.js","src/actions/content/runScraper.ts","src/services/DataExchangeService.ts","src/actions/content/scrapePost.ts","src/actions/content/storeGeneratedComment.ts","src/actions/popup/displayBadgeStatus.ts","src/actions/content/generateUserJourneyId.ts","src/actions/types/JourneyType.ts","src/background/generateTokenOnInstall.ts","src/tracing/UserJourneyUtils.ts","src/tracing/types/UserJourney.ts","src/tracing/UserJourneyStepUtils.ts","src/tracing/types/UserJourneyStep.ts","src/actions/content/checkifCommentisPostedOrNot.ts"],"sourcesContent":["(() => {\nconst $1309c5b6a9dcc764$var$baseUrl = \"https://api.wanderlytics.me\";\nclass $1309c5b6a9dcc764$export$248a06f14bb3c802 {\n    async getAuthToken() {\n        return new Promise((resolve)=>{\n            chrome.storage.local.get([\n                \"token\"\n            ], (result)=>{\n                resolve(result.token ?? null);\n            });\n        });\n    }\n    async getInstallId() {\n        return new Promise((resolve)=>{\n            chrome.storage.local.get([\n                \"installId\"\n            ], (result)=>{\n                resolve(result.installId ?? null);\n            });\n        });\n    }\n    async generatePost(userInput) {\n        try {\n            const idea = {\n                idea: userInput\n            };\n            let authInfo = await this.getAuthTokenAndInstallerId();\n            const response = await fetch($1309c5b6a9dcc764$var$baseUrl + \"/linkedin/api/v1/create-post\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: idea,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(`Backend error: ${response.status}`);\n            const data = await response.json();\n            console.log(\"\\u2705 post received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"\\u274C Failed to send post to backend:\", error);\n            return null;\n        }\n    }\n    async getAuthTokenAndInstallerId() {\n        const token = await this.getAuthToken();\n        const installId = await this.getInstallId();\n        if (!token || !installId) throw new Error(\"Missing auth token or install ID\");\n        return {\n            token: token,\n            installId: installId\n        };\n    }\n    async sendPostToBackend(scrappedPost, url) {\n        try {\n            let authInfo = await this.getAuthTokenAndInstallerId();\n            const response = await fetch($1309c5b6a9dcc764$var$baseUrl + \"/linkedin/api/v1/create-comment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: {\n                        scrappedPost: scrappedPost,\n                        url: url\n                    },\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(`Backend error: ${response.status}`);\n            const data = await response.json();\n            console.log(\"\\u2705 Comment received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"\\u274C Failed to send post to backend:\", error);\n            return null;\n        }\n    }\n    async sendJourneyInfo(journeyInfo) {\n        try {\n            let authInfo = await this.getAuthTokenAndInstallerId();\n            const response = await fetch($1309c5b6a9dcc764$var$baseUrl + \"/linkedin/api/v1/journey\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: journeyInfo,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(`Backend error: ${response.status}`);\n            const data = await response.json();\n            console.log(\"\\u2705 journey info sent to backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"\\u274C Failed to send journey info to backend:\", error);\n            return null;\n        }\n    }\n    async sendJourneyStepInfo(journeyStep) {\n        try {\n            let authInfo = await this.getAuthTokenAndInstallerId();\n            const response = await fetch($1309c5b6a9dcc764$var$baseUrl + \"/linkedin/api/v1/journey/step\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: journeyStep,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n            if (!response.ok) throw new Error(`Backend error: ${response.status}`);\n            const data = await response.json();\n            console.log(\"\\u2705 step info sent to backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"\\u274C Failed to send step info to backend:\", error);\n            return null;\n        }\n    }\n}\n\n\nlet $f88d70bda7452d95$var$generatedComment = \"\";\nasync function $f88d70bda7452d95$export$a27c74d8ed2feb95() {\n    console.log(\"\\u23F3 [Scraper] Waiting for DOM to load...\");\n    if (document.readyState === \"loading\") {\n        await new Promise((resolve)=>document.addEventListener(\"DOMContentLoaded\", resolve));\n        console.log(\"\\u2705 [Scraper] DOM fully loaded.\");\n    } else console.log(\"\\u2705 [Scraper] DOM was already ready.\");\n    const postSelector = '.update-components-update-v2__commentary span[dir=\"ltr\"]';\n    const postText = await $f88d70bda7452d95$var$waitForPostText(postSelector);\n    if (postText) return postText;\n    else {\n        console.error(\"\\u274C [Scraper] Failed to find or extract post text.\");\n        throw new Error(\"post could not be extracted\");\n    }\n}\nfunction $f88d70bda7452d95$var$waitForPostText(selector, timeout = 10000) {\n    return new Promise((resolve)=>{\n        const startTime = Date.now();\n        const interval = setInterval(()=>{\n            const elapsed = Date.now() - startTime;\n            const element = document.querySelector(selector);\n            if (element) {\n                console.log(\"\\u2705 [Scraper] Found post text element.\");\n                clearInterval(interval);\n                resolve(element.innerText.trim());\n            }\n            if (elapsed >= timeout) {\n                console.warn(\"\\u26A0\\uFE0F [Scraper] Timeout: Post text not found.\");\n                clearInterval(interval);\n                resolve(null);\n            }\n        }, 500);\n    });\n}\n\n\nasync function $833ff387e0427044$export$252c877b0ff122e7(comment, url) {\n    if (!url) return;\n    const key = `comment-${url}`;\n    await chrome.storage.local.set({\n        [key]: comment\n    });\n    console.log(\"comment stored:\" + comment);\n}\n\n\nfunction $a3bcdddc9a5a8b50$export$eb85a53ab42fce58() {\n    chrome.runtime.sendMessage({\n        type: \"SET_BADGE\",\n        status: \"loading\"\n    });\n}\nfunction $a3bcdddc9a5a8b50$export$1e2aa2b1e44ee7cf() {\n    chrome.runtime.sendMessage({\n        type: \"SET_BADGE\",\n        status: \"ready\"\n    });\n}\n\n\nvar $34a8f7dff65743b0$export$f513f999610798cc = /*#__PURE__*/ function(JourneyType) {\n    JourneyType[\"COMMENT_CREATION\"] = \"COMMENT_CREATION\";\n    JourneyType[\"POST_CREATION\"] = \"POST_CREATION\";\n    return JourneyType;\n}({});\n\n\nasync function $d8b7f469424ea847$export$6473347ac50c95ee(secret, installId) {\n    const enc = new TextEncoder();\n    const key = await crypto.subtle.importKey(\"raw\", enc.encode(secret), {\n        name: \"HMAC\",\n        hash: \"SHA-256\"\n    }, false, [\n        \"sign\"\n    ]);\n    const signature = await crypto.subtle.sign(\"HMAC\", key, enc.encode(installId));\n    return [\n        ...new Uint8Array(signature)\n    ].map((b)=>b.toString(16).padStart(2, '0')).join('');\n}\n\n\nasync function $94cf3209767bf533$export$67b1df00533acc4b(journeyType) {\n    const secret = \"your-very-secret-key\"; // hardcoded for now\n    const id = crypto.randomUUID(); // unique per install\n    const token = await (0, $d8b7f469424ea847$export$6473347ac50c95ee)(secret, id);\n    if (journeyType === (0, $34a8f7dff65743b0$export$f513f999610798cc).COMMENT_CREATION) {\n        const commentCreationJourney = token;\n        chrome.storage.local.set({\n            commentCreationJourney: commentCreationJourney\n        }, ()=>{\n            console.log(\"Comment creation token generated and saved:\", token);\n        });\n    } else if (journeyType === (0, $34a8f7dff65743b0$export$f513f999610798cc).POST_CREATION) {\n        const postCreationJourney = token;\n        chrome.storage.local.set({\n            postCreationJourney: postCreationJourney\n        }, ()=>{\n            console.log(\"post creatin token generated and saved:\", token);\n        });\n    }\n}\nasync function $94cf3209767bf533$export$38e20fb7da14d193(journeyType) {\n    if (journeyType === (0, $34a8f7dff65743b0$export$f513f999610798cc).COMMENT_CREATION) return new Promise((resolve)=>{\n        chrome.storage.local.get([\n            \"commentCreationJourney\"\n        ], (result)=>{\n            resolve(result.commentCreationJourney ?? null);\n        });\n    });\n    else if (journeyType === (0, $34a8f7dff65743b0$export$f513f999610798cc).POST_CREATION) return new Promise((resolve)=>{\n        chrome.storage.local.get([\n            \"postCreationJourney\"\n        ], (result)=>{\n            resolve(result.postCreationJourney ?? null);\n        });\n    });\n    else return \"\";\n}\n\n\n\nvar $ad04c4a616b5629f$export$809ca94aeb6e220a = /*#__PURE__*/ function(JourneyStatus) {\n    JourneyStatus[\"START\"] = \"START\";\n    JourneyStatus[\"END\"] = \"END\";\n    return JourneyStatus;\n}({});\n\n\n\nconst $c4548e2f9fde60fb$var$dataExchangeService = new (0, $1309c5b6a9dcc764$export$248a06f14bb3c802)();\nconst $c4548e2f9fde60fb$export$aeaba621ddb9befb = {\n    startJourney (journeyId) {\n    // FIXME: write logic in this function\n    },\n    endJourney (journeyId) {\n    // FIXME: write logic\n    }\n};\nconst $c4548e2f9fde60fb$export$da80ee2cd4906c68 = {\n    startJourney (journeyId) {\n        const userJourney = {\n            journeyId: journeyId,\n            journeyType: (0, $34a8f7dff65743b0$export$f513f999610798cc).COMMENT_CREATION,\n            status: (0, $ad04c4a616b5629f$export$809ca94aeb6e220a).START\n        };\n        $c4548e2f9fde60fb$var$dataExchangeService.sendJourneyInfo(userJourney);\n    },\n    endJourney (journeyId) {\n        const userJourney = {\n            journeyId: journeyId,\n            journeyType: (0, $34a8f7dff65743b0$export$f513f999610798cc).COMMENT_CREATION,\n            status: (0, $ad04c4a616b5629f$export$809ca94aeb6e220a).END\n        };\n        $c4548e2f9fde60fb$var$dataExchangeService.sendJourneyInfo(userJourney);\n    }\n};\n\n\n\nvar $bcc2bddc26557dc7$export$e577eac1d0078c6f = /*#__PURE__*/ function(StepType) {\n    StepType[\"GENERATED\"] = \"GENERATED\";\n    StepType[\"COPIED\"] = \"COPIED\";\n    StepType[\"POSTED\"] = \"POSTED\";\n    return StepType;\n}({});\nvar $bcc2bddc26557dc7$export$e2e108cbe2e4f865 = /*#__PURE__*/ function(ContentType) {\n    ContentType[\"POST\"] = \"POST\";\n    ContentType[\"COMMENT\"] = \"COMMENT\";\n    return ContentType;\n}({});\n\n\nconst $c3046a973827c35b$var$dataExchangeService = new (0, $1309c5b6a9dcc764$export$248a06f14bb3c802)();\nconst $c3046a973827c35b$export$a3d2553e43503af7 = {\n    generated (stepInfo) {\n        const journeyStep = {\n            journeyId: stepInfo.journeyId,\n            stepNumber: 1,\n            stepType: (0, $bcc2bddc26557dc7$export$e577eac1d0078c6f).GENERATED,\n            contentType: (0, $bcc2bddc26557dc7$export$e2e108cbe2e4f865).COMMENT,\n            inputContent: stepInfo.inputContent,\n            outputContent: stepInfo.outputContent\n        };\n        $c3046a973827c35b$var$dataExchangeService.sendJourneyStepInfo(journeyStep);\n        console.log(\"comment generated step sent\");\n    },\n    copied (stepInfo) {\n        const journeyStep = {\n            journeyId: stepInfo.journeyId,\n            stepNumber: 2,\n            stepType: (0, $bcc2bddc26557dc7$export$e577eac1d0078c6f).COPIED,\n            contentType: (0, $bcc2bddc26557dc7$export$e2e108cbe2e4f865).COMMENT,\n            inputContent: stepInfo.inputContent,\n            outputContent: stepInfo.outputContent\n        };\n        $c3046a973827c35b$var$dataExchangeService.sendJourneyStepInfo(journeyStep);\n        console.log(\"comment copied step sent\");\n    },\n    posted (stepInfo) {\n        const journeyStep = {\n            journeyId: stepInfo.journeyId,\n            stepNumber: 3,\n            stepType: (0, $bcc2bddc26557dc7$export$e577eac1d0078c6f).POSTED,\n            contentType: (0, $bcc2bddc26557dc7$export$e2e108cbe2e4f865).COMMENT,\n            inputContent: stepInfo.inputContent,\n            outputContent: stepInfo.outputContent\n        };\n        $c3046a973827c35b$var$dataExchangeService.sendJourneyStepInfo(journeyStep);\n        console.log(\"comment post event ran\");\n        console.log(\"comment posted step sent:\", stepInfo.outputContent);\n    }\n};\nconst $c3046a973827c35b$export$44c3e96e54e6a618 = {\n    generated (stepInfo) {\n        console.log(\"post generation info sent\");\n    },\n    copied (stepInfo) {\n        console.log(\"post copied info sent\");\n    },\n    posted (stepInfo) {\n        console.log(\"post posted info sent\");\n    }\n};\n\n\nfunction $bae6b7eb49b8af20$export$6cb396331cd43885() {\n    document.addEventListener(\"click\", (e)=>{\n        const target = e.target;\n        // 🔹 Handle \"Post Comment\" button\n        const postBtn = target.closest(\"button.comments-comment-box__submit-button--cr\");\n        if (!postBtn) return;\n        const container = postBtn.closest(\"div.comments-comment-box--cr\");\n        if (!container) return;\n        const editor = container.querySelector(\"div.ql-editor\");\n        if (!editor) return;\n        const finalContent = editor.innerText.trim();\n        if (!finalContent) return;\n        // 🔹 Dispatch custom event with the posted comment\n        const event = new CustomEvent(\"CommentPostedEvent\", {\n            detail: {\n                finalContent: finalContent\n            }\n        });\n        document.dispatchEvent(event);\n    });\n}\n\n\n\nasync function $14e5bdbcb9102e29$export$203201cb94deadb2() {\n    // comment creation journey\n    await (0, $94cf3209767bf533$export$67b1df00533acc4b)((0, $34a8f7dff65743b0$export$f513f999610798cc).COMMENT_CREATION);\n    const journeyId = await (0, $94cf3209767bf533$export$38e20fb7da14d193)((0, $34a8f7dff65743b0$export$f513f999610798cc).COMMENT_CREATION);\n    console.log(\"journey_id_at_start:\", journeyId);\n    (0, $c4548e2f9fde60fb$export$da80ee2cd4906c68).startJourney(journeyId);\n    (0, $a3bcdddc9a5a8b50$export$eb85a53ab42fce58)();\n    // comment creation journey starts(CCJ)\n    const url = window.location.href; // provides url access in in-active tabs as well\n    let scrapedPost = await (0, $f88d70bda7452d95$export$a27c74d8ed2feb95)();\n    let generatedComment = await new (0, $1309c5b6a9dcc764$export$248a06f14bb3c802)().sendPostToBackend(scrapedPost, \"\");\n    (0, $833ff387e0427044$export$252c877b0ff122e7)(generatedComment.payload, url);\n    (0, $a3bcdddc9a5a8b50$export$1e2aa2b1e44ee7cf)();\n    // step 1- comment is generated\n    const stepData = {\n        journeyId: journeyId,\n        inputContent: scrapedPost,\n        outputContent: generatedComment.payload\n    };\n    (0, $c3046a973827c35b$export$a3d2553e43503af7).generated(stepData);\n    (0, $bae6b7eb49b8af20$export$6cb396331cd43885)();\n    // step 3- run event listener to fetch the posted comment on linkedin\n    document.addEventListener(\"CommentPostedEvent\", (e)=>{\n        const { finalContent: finalContent } = e.detail;\n        const postedStep = {\n            journeyId: journeyId,\n            inputContent: generatedComment.payload,\n            outputContent: finalContent\n        };\n        (0, $c3046a973827c35b$export$a3d2553e43503af7).posted(postedStep);\n        (0, $c4548e2f9fde60fb$export$da80ee2cd4906c68).endJourney(journeyId);\n    });\n}\n\n\nconsole.log(\"\\u2705 [LinkedIn Scraper] Content script injected.\");\n(0, $14e5bdbcb9102e29$export$203201cb94deadb2)();\n\n})();\n//# sourceMappingURL=content.js.map\n","import { runScraper } from \"@actions/content/runScraper\";\n\nconsole.log(\"✅ [LinkedIn Scraper] Content script injected.\");\n\nrunScraper();","import { DataExchangeService } from \"services/DataExchangeService\";\nimport { scrapePost } from \"./scrapePost\";\nimport { storeGeneratedComment } from \"./storeGeneratedComment\";\nimport { showCommentIsReady, showInProcess } from \"@actions/popup/displayBadgeStatus\";\nimport { generateUserJourneyId, getUserJourneyId } from \"./generateUserJourneyId\";\nimport { CommentCreationJourney } from \"tracing/UserJourneyUtils\";\nimport { CommentCreationJourneySteps, StepInfo } from \"tracing/UserJourneyStepUtils\";\nimport { checkIfCommentisPostedOrNot } from \"./checkifCommentisPostedOrNot\";\nimport { JourneyType } from \"@actions/types/JourneyType\";\n\nexport async function runScraper() {\n\n    // comment creation journey\n    await generateUserJourneyId(JourneyType.COMMENT_CREATION);\n    const journeyId = await getUserJourneyId(JourneyType.COMMENT_CREATION);\n    console.log(\"journey_id_at_start:\", journeyId);\n    CommentCreationJourney.startJourney(journeyId);\n\n    showInProcess();\n\n    // comment creation journey starts(CCJ)\n    const url = window.location.href;// provides url access in in-active tabs as well\n    let scrapedPost = await scrapePost();\n    let generatedComment = await new DataExchangeService().sendPostToBackend(scrapedPost, \"\");\n    storeGeneratedComment(generatedComment.payload, url);\n\n    showCommentIsReady();\n\n    // step 1- comment is generated\n    const stepData: StepInfo = {\n        journeyId: journeyId,\n        inputContent: scrapedPost,\n        outputContent: generatedComment.payload,\n    }\n    CommentCreationJourneySteps.generated(stepData);\n\n    checkIfCommentisPostedOrNot();\n    // step 3- run event listener to fetch the posted comment on linkedin\n    document.addEventListener(\"CommentPostedEvent\", (e: Event) => {\n        const { finalContent } = (e as CustomEvent).detail;\n\n        const postedStep: StepInfo = {\n            journeyId,\n            inputContent: generatedComment.payload,\n            outputContent: finalContent,\n\n        };\n\n        CommentCreationJourneySteps.posted(postedStep);\n        CommentCreationJourney.endJourney(journeyId);\n    });\n\n}","import { UserJourneyStep } from \"tracing/types/UserJourneyStep\";\nimport { AuthInfo } from \"./types/AuthInfo\";\nimport { UserIdea } from \"./types/UserIdea\";\nimport { UserJourney } from \"tracing/types/UserJourney\";\n\nconst baseUrl: string = \"https://api.wanderlytics.me\";\nexport class DataExchangeService {\n    async getAuthToken(): Promise<string | null> {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\"token\"], (result) => {\n                resolve(result.token ?? null);\n            });\n        });\n    }\n\n    async getInstallId(): Promise<string | null> {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\"installId\"], (result) => {\n                resolve(result.installId ?? null);\n            });\n        });\n    }\n\n    async generatePost(userInput: string) {\n\n        try {\n\n            const idea: UserIdea = {\n                idea: userInput\n            }\n            let authInfo = await this.getAuthTokenAndInstallerId();\n\n            const response = await fetch(baseUrl + \"/linkedin/api/v1/create-post\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: idea,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Backend error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log(\"✅ post received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"❌ Failed to send post to backend:\", error);\n            return null;\n        }\n\n\n    }\n\n\n\n    private async getAuthTokenAndInstallerId(): Promise<AuthInfo> {\n\n        const token = await this.getAuthToken();\n        const installId = await this.getInstallId();\n\n        if (!token || !installId) {\n            throw new Error(\"Missing auth token or install ID\");\n        }\n\n        return {\n            token,\n            installId\n        };\n\n    }\n\n\n\n    async sendPostToBackend(scrappedPost: string, url: string) {\n        try {\n\n            let authInfo = await this.getAuthTokenAndInstallerId();\n\n            const response = await fetch(baseUrl + \"/linkedin/api/v1/create-comment\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: {\n                        scrappedPost,\n                        url\n                    },\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Backend error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log(\"✅ Comment received from backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"❌ Failed to send post to backend:\", error);\n            return null;\n        }\n    }\n\n\n    async sendJourneyInfo(journeyInfo: UserJourney) {\n        try {\n\n            let authInfo = await this.getAuthTokenAndInstallerId();\n\n            const response = await fetch(baseUrl + \"/linkedin/api/v1/journey\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: journeyInfo\n                    ,\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Backend error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log(\"✅ journey info sent to backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"❌ Failed to send journey info to backend:\", error);\n            return null;\n        }\n    }\n\n    async sendJourneyStepInfo(journeyStep: UserJourneyStep) {\n        try {\n\n            let authInfo = await this.getAuthTokenAndInstallerId();\n\n            const response = await fetch(baseUrl + \"/linkedin/api/v1/journey/step\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${authInfo.token}`\n                },\n                body: JSON.stringify({\n                    payload: journeyStep,\n\n                    additionalMetadata: {\n                        installId: authInfo.installId\n                    }\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`Backend error: ${response.status}`);\n            }\n\n            const data = await response.json();\n            console.log(\"✅ step info sent to backend:\", data);\n            return data;\n        } catch (error) {\n            console.error(\"❌ Failed to send step info to backend:\", error);\n            return null;\n        }\n    }\n\n\n}\n","import { DataExchangeService } from \"services/DataExchangeService\";\n\nlet generatedComment = \"\";\nexport async function scrapePost() {\n    console.log(\"⏳ [Scraper] Waiting for DOM to load...\");\n\n    if (document.readyState === \"loading\") {\n        await new Promise((resolve) => document.addEventListener(\"DOMContentLoaded\", resolve));\n        console.log(\"✅ [Scraper] DOM fully loaded.\");\n    } else {\n        console.log(\"✅ [Scraper] DOM was already ready.\");\n    }\n\n    const postSelector = '.update-components-update-v2__commentary span[dir=\"ltr\"]';\n\n    const postText = await waitForPostText(postSelector);\n\n    if (postText) {\n        return postText;\n\n    } else {\n        console.error(\"❌ [Scraper] Failed to find or extract post text.\");\n        throw new Error(\"post could not be extracted\");\n    }\n}\n\nfunction waitForPostText(selector: string, timeout = 10000): Promise<string | null> {\n    return new Promise((resolve) => {\n        const startTime = Date.now();\n\n        const interval = setInterval(() => {\n            const elapsed = Date.now() - startTime;\n            const element = document.querySelector(selector) as HTMLElement;\n\n            if (element) {\n                console.log(\"✅ [Scraper] Found post text element.\");\n                clearInterval(interval);\n                resolve(element.innerText.trim());\n            }\n\n            if (elapsed >= timeout) {\n                console.warn(\"⚠️ [Scraper] Timeout: Post text not found.\");\n                clearInterval(interval);\n                resolve(null);\n            }\n        }, 500);\n    });\n}","\nexport async function storeGeneratedComment(comment: string, url: string | null) {\n    if (!url) return;\n\n    const key = `comment-${url}`;\n    await chrome.storage.local.set({ [key]: comment });\n    console.log(\"comment stored:\" + comment);\n}\n","export function showInProcess() {\n    chrome.runtime.sendMessage({ type: \"SET_BADGE\", status: \"loading\" });\n}\n\nexport function showCommentIsReady() {\n    chrome.runtime.sendMessage({ type: \"SET_BADGE\", status: \"ready\" });\n}","import { JourneyType } from \"@actions/types/JourneyType\";\nimport { generateToken } from \"background/generateTokenOnInstall\";\n\nexport async function generateUserJourneyId(journeyType: JourneyType): Promise<void> {\n    const secret = \"your-very-secret-key\"; // hardcoded for now\n    const id = crypto.randomUUID(); // unique per install\n\n    const token = await generateToken(secret, id);\n\n    if (journeyType === JourneyType.COMMENT_CREATION) {\n        const commentCreationJourney = token;\n        chrome.storage.local.set({ commentCreationJourney }, () => {\n            console.log(\"Comment creation token generated and saved:\", token);\n        });\n    }\n    else if (journeyType === JourneyType.POST_CREATION) {\n        const postCreationJourney = token;\n        chrome.storage.local.set({ postCreationJourney }, () => {\n            console.log(\"post creatin token generated and saved:\", token);\n        });\n    }\n}\n\nexport async function getUserJourneyId(journeyType: JourneyType): Promise<string> {\n    if (journeyType === JourneyType.COMMENT_CREATION) {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\"commentCreationJourney\"], (result) => {\n                resolve(result.commentCreationJourney ?? null);\n            });\n        });\n    }\n    else if (journeyType === JourneyType.POST_CREATION) {\n        return new Promise((resolve) => {\n            chrome.storage.local.get([\"postCreationJourney\"], (result) => {\n                resolve(result.postCreationJourney ?? null);\n            });\n        });\n    }\n    else {\n        return \"\";\n    }\n}","export enum JourneyType {\n    COMMENT_CREATION = \"COMMENT_CREATION\",\n    POST_CREATION = \"POST_CREATION\",\n}","export async function generateToken(secret: string, installId: string): Promise<string> {\n    const enc = new TextEncoder();\n    const key = await crypto.subtle.importKey(\n        \"raw\",\n        enc.encode(secret),\n        { name: \"HMAC\", hash: \"SHA-256\" },\n        false,\n        [\"sign\"]\n    );\n\n    const signature = await crypto.subtle.sign(\"HMAC\", key, enc.encode(installId));\n    return [...new Uint8Array(signature)].map(b => b.toString(16).padStart(2, '0')).join('');\n}\n","import { DataExchangeService } from \"services/DataExchangeService\"\nimport { JourneyStatus, UserJourney } from \"./types/UserJourney\";\nimport { JourneyType } from \"@actions/types/JourneyType\";\n\nconst dataExchangeService = new DataExchangeService();\n\n\nexport const PostCreationJourney = {\n    startJourney(journeyId: string) {\n\n        // FIXME: write logic in this function\n    },\n\n    endJourney(journeyId: string) {\n        // FIXME: write logic\n    }\n}\n\nexport const CommentCreationJourney = {\n    startJourney(journeyId: string) {\n\n        const userJourney: UserJourney = {\n            journeyId: journeyId,\n            journeyType: JourneyType.COMMENT_CREATION,\n            status: JourneyStatus.START,\n        }\n        dataExchangeService.sendJourneyInfo(userJourney);\n    },\n\n    endJourney(journeyId: string) {\n\n        const userJourney: UserJourney = {\n            journeyId: journeyId,\n            journeyType: JourneyType.COMMENT_CREATION,\n            status: JourneyStatus.END,\n        }\n        dataExchangeService.sendJourneyInfo(userJourney);\n    }\n}\n\n","import { JourneyType } from \"@actions/types/JourneyType\";\n\nexport type UserJourney = {\n    journeyId: string,\n    journeyType: JourneyType,\n    status: JourneyStatus,\n}\n\nexport enum JourneyStatus {\n    START = \"START\",\n    END = \"END\",\n}","import { DataExchangeService } from \"services/DataExchangeService\";\nimport { ContentType, StepType, UserJourneyStep } from \"./types/UserJourneyStep\";\n\nconst dataExchangeService = new DataExchangeService();\nexport const CommentCreationJourneySteps = {\n    generated(stepInfo: StepInfo): void {\n\n        const journeyStep: UserJourneyStep = {\n            journeyId: stepInfo.journeyId,\n            stepNumber: 1,\n            stepType: StepType.GENERATED,\n            contentType: ContentType.COMMENT,\n            inputContent: stepInfo.inputContent,\n            outputContent: stepInfo.outputContent,\n        }\n        dataExchangeService.sendJourneyStepInfo(journeyStep);\n        console.log(\"comment generated step sent\");\n    },\n    copied(stepInfo: StepInfo): void {\n\n        const journeyStep: UserJourneyStep = {\n            journeyId: stepInfo.journeyId,\n            stepNumber: 2,\n            stepType: StepType.COPIED,\n            contentType: ContentType.COMMENT,\n            inputContent: stepInfo.inputContent,\n            outputContent: stepInfo.outputContent,\n        }\n        dataExchangeService.sendJourneyStepInfo(journeyStep);\n        console.log(\"comment copied step sent\");\n    },\n\n    posted(stepInfo: StepInfo): void {\n\n        const journeyStep: UserJourneyStep = {\n            journeyId: stepInfo.journeyId,\n            stepNumber: 3,\n            stepType: StepType.POSTED,\n            contentType: ContentType.COMMENT,\n            inputContent: stepInfo.inputContent,\n            outputContent: stepInfo.outputContent,\n        }\n        dataExchangeService.sendJourneyStepInfo(journeyStep);\n        console.log(\"comment post event ran\");\n        console.log(\"comment posted step sent:\", stepInfo.outputContent);\n    }\n\n}\n\nexport type StepInfo = {\n    journeyId: string,\n    inputContent: string,\n    outputContent: string,\n}\n\nexport const PostCreationJourneySteps = {\n\n\n    generated(stepInfo: StepInfo) {\n        console.log(\"post generation info sent\");\n    },\n\n    copied(stepInfo: StepInfo) {\n        console.log(\"post copied info sent\");\n    },\n\n    posted(stepInfo: StepInfo) {\n        console.log(\"post posted info sent\");\n    },\n}","export type UserJourneyStep = {\n    journeyId: string,\n    stepNumber: number,\n    stepType: StepType,\n    contentType: ContentType,\n    inputContent: string,\n    outputContent: string,\n}\n\nexport enum StepType {\n    GENERATED = \"GENERATED\",\n    COPIED = \"COPIED\",\n    POSTED = \"POSTED\",\n}\n\nexport enum ContentType {\n    POST = \"POST\",\n    COMMENT = \"COMMENT\",\n} ","\nexport function checkIfCommentisPostedOrNot() {\n    document.addEventListener(\"click\", (e) => {\n        const target = e.target as HTMLElement;\n\n        // 🔹 Handle \"Post Comment\" button\n        const postBtn = target.closest(\"button.comments-comment-box__submit-button--cr\");\n        if (!postBtn) return;\n\n        const container = postBtn.closest(\"div.comments-comment-box--cr\");\n        if (!container) return;\n\n        const editor = container.querySelector(\"div.ql-editor\") as HTMLElement;\n        if (!editor) return;\n\n        const finalContent = editor.innerText.trim();\n        if (!finalContent) return;\n\n        // 🔹 Dispatch custom event with the posted comment\n        const event = new CustomEvent(\"CommentPostedEvent\", {\n            detail: {\n                finalContent,\n            },\n        });\n\n        document.dispatchEvent(event);\n    });\n}\n"],"names":["$1309c5b6a9dcc764$var$baseUrl","$1309c5b6a9dcc764$export$248a06f14bb3c802","getAuthToken","Promise","resolve","chrome","storage","local","get","result","token","getInstallId","installId","generatePost","userInput","authInfo","getAuthTokenAndInstallerId","response","fetch","method","headers","body","JSON","stringify","payload","idea","additionalMetadata","ok","Error","status","data","json","console","log","error","sendPostToBackend","scrappedPost","url","sendJourneyInfo","journeyInfo","sendJourneyStepInfo","journeyStep","$f88d70bda7452d95$export$a27c74d8ed2feb95","document","readyState","addEventListener","postText","$f88d70bda7452d95$var$waitForPostText","selector","timeout","startTime","Date","now","interval","setInterval","elapsed","element","querySelector","clearInterval","innerText","trim","warn","$833ff387e0427044$export$252c877b0ff122e7","comment","key","set","$34a8f7dff65743b0$export$f513f999610798cc","JourneyType","$d8b7f469424ea847$export$6473347ac50c95ee","secret","enc","TextEncoder","crypto","subtle","importKey","encode","name","hash","Uint8Array","sign","map","b","toString","padStart","join","$94cf3209767bf533$export$67b1df00533acc4b","journeyType","id","randomUUID","COMMENT_CREATION","commentCreationJourney","POST_CREATION","postCreationJourney","$94cf3209767bf533$export$38e20fb7da14d193","$ad04c4a616b5629f$export$809ca94aeb6e220a","JourneyStatus","$c4548e2f9fde60fb$var$dataExchangeService","$c4548e2f9fde60fb$export$da80ee2cd4906c68","startJourney","journeyId","userJourney","START","endJourney","END","$bcc2bddc26557dc7$export$e577eac1d0078c6f","StepType","$bcc2bddc26557dc7$export$e2e108cbe2e4f865","ContentType","$c3046a973827c35b$var$dataExchangeService","$c3046a973827c35b$export$a3d2553e43503af7","generated","stepInfo","stepNumber","stepType","GENERATED","contentType","COMMENT","inputContent","outputContent","copied","COPIED","posted","POSTED","$14e5bdbcb9102e29$export$203201cb94deadb2","runtime","sendMessage","type","window","location","href","scrapedPost","generatedComment","stepData","e","postBtn","target","closest","container","editor","finalContent","event","CustomEvent","detail","dispatchEvent","postedStep"],"version":3,"file":"content.js.map"}