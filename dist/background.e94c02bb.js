(()=>{var e=globalThis,r={},t={},n=e.parcelRequire94c2;null==n&&((n=function(e){if(e in r)return r[e].exports;if(e in t){var n=t[e];delete t[e];var o={id:e,exports:{}};return r[e]=o,n.call(o.exports,o,o.exports),o.exports}var a=Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,r){t[e]=r},e.parcelRequire94c2=n);var o=n.register;o("a99GE",function(e,r){var t=n("3qpGP");chrome.runtime.onMessage.addListener((e,r,t)=>{"OPEN_POST_TAB"===e.type&&e.url&&chrome.tabs.create({url:e.url,active:!1},e=>{let r=e.id;chrome.tabs.onUpdated.addListener(function e(t,n){t===r&&"complete"===n.status&&(chrome.tabs.onUpdated.removeListener(e),chrome.scripting.executeScript({target:{tabId:r},files:["src/background/content.js"]}))})})}),chrome.runtime.onInstalled.addListener(async()=>{let e=crypto.randomUUID(),r=await (0,t.generateToken)("your-very-secret-key",e);chrome.storage.local.set({installId:e,token:r},()=>{console.log("Token generated and saved:",r)})}),chrome.runtime.onMessage.addListener((e,r,t)=>{if(console.log("tab message is here 2"),"GET_TAB_URL_WHEN_FETCHING"===e.type)return console.log("message received 2"),chrome.tabs.query({active:!0},e=>{t({url:e[0]?.url??null})}),!0})}),o("3qpGP",function(e,r){async function t(e,r){let t=new TextEncoder,n=await crypto.subtle.importKey("raw",t.encode(e),{name:"HMAC",hash:"SHA-256"},!1,["sign"]);return[...new Uint8Array(await crypto.subtle.sign("HMAC",n,t.encode(r)))].map(e=>e.toString(16).padStart(2,"0")).join("")}Object.defineProperty(e.exports,"generateToken",{get:()=>t,set:void 0,enumerable:!0,configurable:!0})}),n("a99GE")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6IjRaLE8sTyxDLFMsQyxXLEMsQyxFLEUsSyxrQixFLEksRSxFLEcsRSxPLEksQyxNLEMsQyxJLEUsRyxDLFEsQyxFLEEsSSxJLEUsRSxFLEMsTyxJLEMsUyxDLFcsQyxTLEUsQyxDLEMsRSxJLEcsWSxDLEUsTSxHLE8sSSxDLFMsQyxjLEMsRyxPLFMsQyxhLEMsQyxPLE8sQyxFLE0sQyw0QixBLEcsRSxFLEcsTyxPLEMsVyxDLFcsQyxVLEksRSxPLFUsRyxDLEMsTSxDLEUsRSxTLEksQSxFLEEsdUIsQyxFLE8sTyxDLEcsRSxDLEcsQyxXLFEsQyxFLEssUSxHLEMsNkIsRSxFLEcsTyxPLEMsUyxDLFcsQyxDLEUsRSxLLEcsUSxHLEMseUIsNkIsQyxFLEksQyxPLFEsRyxDLHNCLE8sSSxDLEssQyxDLFEsQyxFLEEsSSxFLEMsSSxDLEMsRSxFLEssSSxFLEksQyxLLHdCLGUsRSxDLEMsQyxBLEUsSSxFLEksWSxFLE0sTyxNLEMsUyxDLE0sRSxNLEMsRyxDLEssTyxLLFMsRyxFLEMsTyxFLE0sSSxJLFcsQSxNLE8sTSxDLEksQyxPLEUsRSxNLEMsSyxDLEcsQyxHLEUsUSxDLEksUSxDLEUsTSxJLEMsRyIsInNvdXJjZXMiOlsic3JjL2JhY2tncm91bmQvYmFja2dyb3VuZC50cyIsInNyYy9iYWNrZ3JvdW5kL2dlbmVyYXRlVG9rZW5Pbkluc3RhbGwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVUb2tlbiB9IGZyb20gXCIuL2dlbmVyYXRlVG9rZW5Pbkluc3RhbGxcIjtcblxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiT1BFTl9QT1NUX1RBQlwiICYmIG1lc3NhZ2UudXJsKSB7XG4gICAgICAgIGNocm9tZS50YWJzLmNyZWF0ZSh7IHVybDogbWVzc2FnZS51cmwsIGFjdGl2ZTogZmFsc2UgfSwgKHRhYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFiSWQgPSB0YWIuaWQ7XG5cbiAgICAgICAgICAgIGNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbiBsaXN0ZW5lcih1cGRhdGVkVGFiSWQsIGluZm8pIHtcbiAgICAgICAgICAgICAgICBpZiAodXBkYXRlZFRhYklkID09PSB0YWJJZCAmJiBpbmZvLnN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLm9uVXBkYXRlZC5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hyb21lLnNjcmlwdGluZy5leGVjdXRlU2NyaXB0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogeyB0YWJJZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXM6IFtcInNyYy9iYWNrZ3JvdW5kL2NvbnRlbnQuanNcIl1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5jaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcihhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc2VjcmV0ID0gXCJ5b3VyLXZlcnktc2VjcmV0LWtleVwiOyAvLyBoYXJkY29kZWQgZm9yIG5vd1xuICAgIGNvbnN0IGluc3RhbGxJZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7IC8vIHVuaXF1ZSBwZXIgaW5zdGFsbFxuXG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZW5lcmF0ZVRva2VuKHNlY3JldCwgaW5zdGFsbElkKTtcblxuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGluc3RhbGxJZCwgdG9rZW4gfSwgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRva2VuIGdlbmVyYXRlZCBhbmQgc2F2ZWQ6XCIsIHRva2VuKTtcbiAgICB9KTtcbn0pO1xuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJ0YWIgbWVzc2FnZSBpcyBoZXJlIDJcIik7XG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJHRVRfVEFCX1VSTF9XSEVOX0ZFVENISU5HXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJtZXNzYWdlIHJlY2VpdmVkIDJcIik7XG4gICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlIH0sICh0YWJzKSA9PiB7XG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyB1cmw6IHRhYnNbMF0/LnVybCA/PyBudWxsIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIDwtLSBJbXBvcnRhbnQ6IGtlZXBzIG1lc3NhZ2UgY2hhbm5lbCBvcGVuXG4gICAgfVxufSk7XG5cbiIsImV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVRva2VuKHNlY3JldDogc3RyaW5nLCBpbnN0YWxsSWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZW5jID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgY29uc3Qga2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgIFwicmF3XCIsXG4gICAgICAgIGVuYy5lbmNvZGUoc2VjcmV0KSxcbiAgICAgICAgeyBuYW1lOiBcIkhNQUNcIiwgaGFzaDogXCJTSEEtMjU2XCIgfSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIFtcInNpZ25cIl1cbiAgICApO1xuXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5zaWduKFwiSE1BQ1wiLCBrZXksIGVuYy5lbmNvZGUoaW5zdGFsbElkKSk7XG4gICAgcmV0dXJuIFsuLi5uZXcgVWludDhBcnJheShzaWduYXR1cmUpXS5tYXAoYiA9PiBiLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpKS5qb2luKCcnKTtcbn1cbiJdLCJuYW1lcyI6W10sInZlcnNpb24iOjMsImZpbGUiOiJiYWNrZ3JvdW5kLkhBU0hfUkVGX2Y1MDk4MDUxYjFhNDllMDEuanMubWFwIn0=
