function e(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var t,n,r,l,a=globalThis,o={},i={},u=a.parcelRequire94c2;null==u&&((u=function(e){if(e in o)return o[e].exports;if(e in i){var t=i[e];delete i[e];var n={id:e,exports:{}};return o[e]=n,t.call(n.exports,n,n.exports),n.exports}var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,t){i[e]=t},a.parcelRequire94c2=u);var s=u.register;s("ir7AP",function(t,n){e(t.exports,"Fragment",()=>r,e=>r=e),e(t.exports,"jsx",()=>l,e=>l=e),e(t.exports,"jsxs",()=>a,e=>a=e);var r,l,a,o=Symbol.for("react.transitional.element");function i(e,t,n){var r=null;if(void 0!==n&&(r=""+n),void 0!==t.key&&(r=""+t.key),"key"in t)for(var l in n={},t)"key"!==l&&(n[l]=t[l]);else n=t;return{$$typeof:o,type:e,key:r,ref:void 0!==(t=n.ref)?t:null,props:n}}r=Symbol.for("react.fragment"),l=i,a=i}),s("a6Xtg",function(t,n){e(t.exports,"createRoot",()=>tR,e=>tR=e),e(t.exports,"hydrateRoot",()=>tD,e=>tD=e),e(t.exports,"version",()=>tI,e=>tI=e);var r,l=u("hisUG"),a=u("b40gr"),o=u("70pNV");function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function s(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function c(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do 0!=(4098&(t=e).flags)&&(n=t.return),e=t.return;while(e)}return 3===t.tag?n:null}function f(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function d(e){if(c(e)!==e)throw Error(i(188))}var p=Object.assign,m=Symbol.for("react.element"),h=Symbol.for("react.transitional.element"),g=Symbol.for("react.portal"),y=Symbol.for("react.fragment"),v=Symbol.for("react.strict_mode"),b=Symbol.for("react.profiler"),k=Symbol.for("react.provider"),w=Symbol.for("react.consumer"),S=Symbol.for("react.context"),x=Symbol.for("react.forward_ref"),E=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),_=Symbol.for("react.lazy");Symbol.for("react.scope");var T=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var N=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var z=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}var L=Symbol.for("react.client.reference"),A=Array.isArray,M=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,R=o.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,D={pending:!1,data:null,method:null,action:null},I=[],F=-1;function j(e){return{current:e}}function U(e){0>F||(e.current=I[F],I[F]=null,F--)}function H(e,t){I[++F]=e.current,e.current=t}var $=j(null),B=j(null),V=j(null),Q=j(null);function W(e,t){switch(H(V,t),H(B,e),H($,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?sc(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=sf(t=sc(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}U($),H($,e)}function q(){U($),U(B),U(V)}function G(e){null!==e.memoizedState&&H(Q,e);var t=$.current,n=sf(t,e.type);t!==n&&(H(B,e),H($,n))}function K(e){B.current===e&&(U($),U(B)),Q.current===e&&(U(Q),s0._currentValue=D)}var X=Object.prototype.hasOwnProperty,Y=l.unstable_scheduleCallback,J=l.unstable_cancelCallback,Z=l.unstable_shouldYield,ee=l.unstable_requestPaint,et=l.unstable_now,en=l.unstable_getCurrentPriorityLevel,er=l.unstable_ImmediatePriority,el=l.unstable_UserBlockingPriority,ea=l.unstable_NormalPriority,eo=l.unstable_LowPriority,ei=l.unstable_IdlePriority,eu=l.log,es=l.unstable_setDisableYieldValue,ec=null,ef=null;function ed(e){if("function"==typeof eu&&es(e),ef&&"function"==typeof ef.setStrictMode)try{ef.setStrictMode(ec,e)}catch(e){}}var ep=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(em(e)/eh|0)|0},em=Math.log,eh=Math.LN2,eg=256,ey=4194304;function ev(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 0x1000000:case 0x2000000:return 0x3c00000&e;case 0x4000000:return 0x4000000;case 0x8000000:return 0x8000000;case 0x10000000:return 0x10000000;case 0x20000000:return 0x20000000;case 0x40000000:return 0;default:return e}}function eb(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var l=0,a=e.suspendedLanes,o=e.pingedLanes;e=e.warmLanes;var i=0x7ffffff&r;return 0!==i?0!=(r=i&~a)?l=ev(r):0!=(o&=i)?l=ev(o):n||0!=(n=i&~e)&&(l=ev(n)):0!=(i=r&~a)?l=ev(i):0!==o?l=ev(o):n||0!=(n=r&~e)&&(l=ev(n)),0===l?0:0!==t&&t!==l&&0==(t&a)&&((a=l&-l)>=(n=t&-t)||32===a&&0!=(4194048&n))?t:l}function ek(e,t){return 0==(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function ew(){var e=eg;return 0==(4194048&(eg<<=1))&&(eg=256),e}function eS(){var e=ey;return 0==(0x3c00000&(ey<<=1))&&(ey=4194304),e}function ex(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function eE(e,t){e.pendingLanes|=t,0x10000000!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function eC(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-ep(t);e.entangledLanes|=t,e.entanglements[r]=0x40000000|e.entanglements[r]|4194090&n}function eP(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ep(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}function e_(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 0x1000000:case 0x2000000:e=128;break;case 0x10000000:e=0x8000000;break;default:e=0}return e}function eT(e){return 2<(e&=-e)?8<e?0!=(0x7ffffff&e)?32:0x10000000:8:2}function eN(){var e=R.p;return 0!==e?e:void 0===(e=window.event)?32:ca(e.type)}var ez=Math.random().toString(36).slice(2),eO="__reactFiber$"+ez,eL="__reactProps$"+ez,eA="__reactContainer$"+ez,eM="__reactEvents$"+ez,eR="__reactListeners$"+ez,eD="__reactHandles$"+ez,eI="__reactResources$"+ez,eF="__reactMarker$"+ez;function ej(e){delete e[eO],delete e[eL],delete e[eM],delete e[eR],delete e[eD]}function eU(e){var t=e[eO];if(t)return t;for(var n=e.parentNode;n;){if(t=n[eA]||n[eO]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=sC(e);null!==e;){if(n=e[eO])return n;e=sC(e)}return t}n=(e=n).parentNode}return null}function eH(e){if(e=e[eO]||e[eA]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function e$(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(i(33))}function eB(e){var t=e[eI];return t||(t=e[eI]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function eV(e){e[eF]=!0}var eQ=new Set,eW={};function eq(e,t){eG(e,t),eG(e+"Capture",t)}function eG(e,t){for(eW[e]=t,e=0;e<t.length;e++)eQ.add(t[e])}var eK=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),eX={},eY={};function eJ(e,t,n){if(X.call(eY,t)||!X.call(eX,t)&&(eK.test(t)?eY[t]=!0:(eX[t]=!0,!1)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":e.removeAttribute(t);return;case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function eZ(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":e.removeAttribute(t);return}e.setAttribute(t,""+n)}}function e0(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":e.removeAttribute(n);return}e.setAttributeNS(t,n,""+r)}}function e1(e){if(void 0===tF)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);tF=t&&t[1]||"",tj=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+tF+e+tj}var e2=!1;function e3(e,t){if(!e||e2)return"";e2=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch(function(){})}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),o=a[0],i=a[1];if(o&&i){var u=o.split("\n"),s=i.split("\n");for(l=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;l<s.length&&!s[l].includes("DetermineComponentFrameRoot");)l++;if(r===u.length||l===s.length)for(r=u.length-1,l=s.length-1;1<=r&&0<=l&&u[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(u[r]!==s[l]){if(1!==r||1!==l)do if(r--,l--,0>l||u[r]!==s[l]){var c="\n"+u[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}while(1<=r&&0<=l)break}}}finally{e2=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?e1(n):""}function e4(e){try{var t="";do t+=function(e){switch(e.tag){case 26:case 27:case 5:return e1(e.type);case 16:return e1("Lazy");case 13:return e1("Suspense");case 19:return e1("SuspenseList");case 0:case 15:return e3(e.type,!1);case 11:return e3(e.type.render,!1);case 1:return e3(e.type,!0);case 31:return e1("Activity");default:return""}}(e),e=e.return;while(e)return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function e8(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function e6(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function e5(e){e._valueTracker||(e._valueTracker=function(e){var t=e6(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var l=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function e9(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=e6(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function e7(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var te=/[\n"\\]/g;function tt(e){return e.replace(te,function(e){return"\\"+e.charCodeAt(0).toString(16)+" "})}function tn(e,t,n,r,l,a,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+e8(t)):e.value!==""+e8(t)&&(e.value=""+e8(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?tl(e,o,e8(t)):null!=n?tl(e,o,e8(n)):null!=r&&e.removeAttribute("value"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&"function"!=typeof l&&"symbol"!=typeof l),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+e8(i):e.removeAttribute("name")}function tr(e,t,n,r,l,a,o,i){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+e8(n):"",t=null!=t?""+e8(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:l)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function tl(e,t,n){"number"===t&&e7(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function ta(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(l=0,n=""+e8(n),t=null;l<e.length;l++){if(e[l].value===n){e[l].selected=!0,r&&(e[l].defaultSelected=!0);return}null!==t||e[l].disabled||(t=e[l])}null!==t&&(t.selected=!0)}}function to(e,t,n){if(null!=t&&((t=""+e8(t))!==e.value&&(e.value=t),null==n)){e.defaultValue!==t&&(e.defaultValue=t);return}e.defaultValue=null!=n?""+e8(n):""}function ti(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(i(92));if(A(r)){if(1<r.length)throw Error(i(93));r=r[0]}n=r}null==n&&(n=""),t=n}e.defaultValue=n=e8(t),(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function tu(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType){n.nodeValue=t;return}}e.textContent=t}var ts=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function tc(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||ts.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function tf(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(i(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var l in t)r=t[l],t.hasOwnProperty(l)&&n[l]!==r&&tc(e,l,r)}else for(var a in t)t.hasOwnProperty(a)&&tc(e,a,t[a])}function td(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var tp=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),tm=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function th(e){return tm.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var tg=null;function ty(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var tv=null,tb=null;function tk(e){var t=eH(e);if(t&&(e=t.stateNode)){var n=e[eL]||null;switch(e=t.stateNode,t.type){case"input":if(tn(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+tt(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=r[eL]||null;if(!l)throw Error(i(90));tn(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&e9(r)}break;case"textarea":to(e,n.value,n.defaultValue);break;case"select":null!=(t=n.value)&&ta(e,!!n.multiple,t,!1)}}}var tw=!1;function tS(e,t,n){if(tw)return e(t,n);tw=!0;try{return e(t)}finally{if(tw=!1,(null!==tv||null!==tb)&&(ua(),tv&&(t=tv,e=tb,tb=tv=null,tk(t),e)))for(t=0;t<e.length;t++)tk(e[t])}}function tx(e,t){var n=e.stateNode;if(null===n)return null;var r=n[eL]||null;if(null===r)return null;switch(n=r[t],t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r="button"!==(e=e.type)&&"input"!==e&&"select"!==e&&"textarea"!==e),e=!r;break;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var tE="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,tC=!1;if(tE)try{var tP={};Object.defineProperty(tP,"passive",{get:function(){tC=!0}}),window.addEventListener("test",tP,tP),window.removeEventListener("test",tP,tP)}catch(e){tC=!1}var t_=null,tT=null,tN=null;function tz(){if(tN)return tN;var e,t,n=tT,r=n.length,l="value"in t_?t_.value:t_.textContent,a=l.length;for(e=0;e<r&&n[e]===l[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===l[a-t];t++);return tN=l.slice(e,1<t?1-t:void 0)}function tO(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function tL(){return!0}function tA(){return!1}function tM(e){function t(t,n,r,l,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?tL:tA,this.isPropagationStopped=tA,this}return p(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=tL)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=tL)},persist:function(){},isPersistent:tL}),t}var tR,tD,tI,tF,tj,tU,tH,t$,tB={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},tV=tM(tB),tQ=p({},tB,{view:0,detail:0}),tW=tM(tQ),tq=p({},tQ,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:t4,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==t$&&(t$&&"mousemove"===e.type?(tU=e.screenX-t$.screenX,tH=e.screenY-t$.screenY):tH=tU=0,t$=e),tU)},movementY:function(e){return"movementY"in e?e.movementY:tH}}),tG=tM(tq),tK=tM(p({},tq,{dataTransfer:0})),tX=tM(p({},tQ,{relatedTarget:0})),tY=tM(p({},tB,{animationName:0,elapsedTime:0,pseudoElement:0})),tJ=tM(p({},tB,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),tZ=tM(p({},tB,{data:0})),t0={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},t1={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},t2={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function t3(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=t2[e])&&!!t[e]}function t4(){return t3}var t8=tM(p({},tQ,{key:function(e){if(e.key){var t=t0[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tO(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?t1[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:t4,charCode:function(e){return"keypress"===e.type?tO(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tO(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),t6=tM(p({},tq,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),t5=tM(p({},tQ,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:t4})),t9=tM(p({},tB,{propertyName:0,elapsedTime:0,pseudoElement:0})),t7=tM(p({},tq,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),ne=tM(p({},tB,{newState:0,oldState:0})),nt=[9,13,27,32],nn=tE&&"CompositionEvent"in window,nr=null;tE&&"documentMode"in document&&(nr=document.documentMode);var nl=tE&&"TextEvent"in window&&!nr,na=tE&&(!nn||nr&&8<nr&&11>=nr),no=!1;function ni(e,t){switch(e){case"keyup":return -1!==nt.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function nu(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ns=!1,nc={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function nf(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!nc[e.type]:"textarea"===t}function nd(e,t,n,r){tv?tb?tb.push(r):tb=[r]:tv=r,0<(t=u6(t,"onChange")).length&&(n=new tV("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var np=null,nm=null;function nh(e){uJ(e,0)}function ng(e){if(e9(e$(e)))return e}function ny(e,t){if("change"===e)return t}var nv=!1;if(tE){if(tE){var nb="oninput"in document;if(!nb){var nk=document.createElement("div");nk.setAttribute("oninput","return;"),nb="function"==typeof nk.oninput}r=nb}else r=!1;nv=r&&(!document.documentMode||9<document.documentMode)}function nw(){np&&(np.detachEvent("onpropertychange",nS),nm=np=null)}function nS(e){if("value"===e.propertyName&&ng(nm)){var t=[];nd(t,nm,e,ty(e)),tS(nh,t)}}function nx(e,t,n){"focusin"===e?(nw(),np=t,nm=n,np.attachEvent("onpropertychange",nS)):"focusout"===e&&nw()}function nE(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return ng(nm)}function nC(e,t){if("click"===e)return ng(t)}function nP(e,t){if("input"===e||"change"===e)return ng(t)}var n_="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function nT(e,t){if(n_(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!X.call(t,l)||!n_(e[l],t[l]))return!1}return!0}function nN(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function nz(e,t){var n,r=nN(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=nN(r)}}function nO(e){e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window;for(var t=e7(e.document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(n)e=t.contentWindow;else break;t=e7(e.document)}return t}function nL(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var nA=tE&&"documentMode"in document&&11>=document.documentMode,nM=null,nR=null,nD=null,nI=!1;function nF(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;nI||null==nM||nM!==e7(r)||(r="selectionStart"in(r=nM)&&nL(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},nD&&nT(nD,r)||(nD=r,0<(r=u6(nR,"onSelect")).length&&(t=new tV("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nM)))}function nj(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var nU={animationend:nj("Animation","AnimationEnd"),animationiteration:nj("Animation","AnimationIteration"),animationstart:nj("Animation","AnimationStart"),transitionrun:nj("Transition","TransitionRun"),transitionstart:nj("Transition","TransitionStart"),transitioncancel:nj("Transition","TransitionCancel"),transitionend:nj("Transition","TransitionEnd")},nH={},n$={};function nB(e){if(nH[e])return nH[e];if(!nU[e])return e;var t,n=nU[e];for(t in n)if(n.hasOwnProperty(t)&&t in n$)return nH[e]=n[t];return e}tE&&(n$=document.createElement("div").style,"AnimationEvent"in window||(delete nU.animationend.animation,delete nU.animationiteration.animation,delete nU.animationstart.animation),"TransitionEvent"in window||delete nU.transitionend.transition);var nV=nB("animationend"),nQ=nB("animationiteration"),nW=nB("animationstart"),nq=nB("transitionrun"),nG=nB("transitionstart"),nK=nB("transitioncancel"),nX=nB("transitionend"),nY=new Map,nJ="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function nZ(e,t){nY.set(e,t),eq(t,[e])}nJ.push("scrollEnd");var n0=new WeakMap;function n1(e,t){if("object"==typeof e&&null!==e){var n=n0.get(e);return void 0!==n?n:(t={value:e,source:t,stack:e4(t)},n0.set(e,t),t)}return{value:e,source:t,stack:e4(t)}}var n2=[],n3=0,n4=0;function n8(){for(var e=n3,t=n4=n3=0;t<e;){var n=n2[t];n2[t++]=null;var r=n2[t];n2[t++]=null;var l=n2[t];n2[t++]=null;var a=n2[t];if(n2[t++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&n7(n,l,a)}}function n6(e,t,n,r){n2[n3++]=e,n2[n3++]=t,n2[n3++]=n,n2[n3++]=r,n4|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function n5(e,t,n,r){return n6(e,t,n,r),re(e)}function n9(e,t){return n6(e,null,null,t),re(e)}function n7(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var l=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,l&&null!==t&&(l=31-ep(n),null===(r=(e=a.hiddenUpdates)[l])?e[l]=[t]:r.push(t),t.lane=0x20000000|n),a):null}function re(e){if(50<i5)throw i5=0,i9=null,Error(i(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var rt={};function rn(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function rr(e,t,n,r){return new rn(e,t,n,r)}function rl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ra(e,t){var n=e.alternate;return null===n?((n=rr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=0x3e00000&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function ro(e,t){e.flags&=0x3e00002;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,e.dependencies=null===(t=n.dependencies)?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function ri(e,t,n,r,l,a){var o=0;if(r=e,"function"==typeof e)rl(e)&&(o=1);else if("string"==typeof e)o=!function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;if("stylesheet"===t.rel)return e=t.disabled,"string"==typeof t.precedence&&null==e;return!0;case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,$.current)?"html"===e||"head"===e||"body"===e?27:5:26;else e:switch(e){case T:return(e=rr(31,n,t,l)).elementType=T,e.lanes=a,e;case y:return ru(n.children,l,a,t);case v:o=8,l|=24;break;case b:return(e=rr(12,n,t,2|l)).elementType=b,e.lanes=a,e;case E:return(e=rr(13,n,t,l)).elementType=E,e.lanes=a,e;case C:return(e=rr(19,n,t,l)).elementType=C,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case k:case S:o=10;break e;case w:o=9;break e;case x:o=11;break e;case P:o=14;break e;case _:o=16,r=null;break e}o=29,n=Error(i(130,null===e?"null":typeof e,"")),r=null}return(t=rr(o,n,t,l)).elementType=e,t.type=r,t.lanes=a,t}function ru(e,t,n,r){return(e=rr(7,e,r,t)).lanes=n,e}function rs(e,t,n){return(e=rr(6,e,null,t)).lanes=n,e}function rc(e,t,n){return(t=rr(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var rf=[],rd=0,rp=null,rm=0,rh=[],rg=0,ry=null,rv=1,rb="";function rk(e,t){rf[rd++]=rm,rf[rd++]=rp,rp=e,rm=t}function rw(e,t,n){rh[rg++]=rv,rh[rg++]=rb,rh[rg++]=ry,ry=e;var r=rv;e=rb;var l=32-ep(r)-1;r&=~(1<<l),n+=1;var a=32-ep(t)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,rv=1<<32-ep(t)+l|n<<l|r,rb=a+e}else rv=1<<a|n<<l|r,rb=e}function rS(e){null!==e.return&&(rk(e,1),rw(e,1,0))}function rx(e){for(;e===rp;)rp=rf[--rd],rf[rd]=null,rm=rf[--rd],rf[rd]=null;for(;e===ry;)ry=rh[--rg],rh[rg]=null,rb=rh[--rg],rh[rg]=null,rv=rh[--rg],rh[rg]=null}var rE=null,rC=null,rP=!1,r_=null,rT=!1,rN=Error(i(519));function rz(e){throw rD(n1(Error(i(418,"")),e)),rN}function rO(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[eO]=e,t[eL]=r,n){case"dialog":uZ("cancel",t),uZ("close",t);break;case"iframe":case"object":case"embed":uZ("load",t);break;case"video":case"audio":for(n=0;n<uX.length;n++)uZ(uX[n],t);break;case"source":uZ("error",t);break;case"img":case"image":case"link":uZ("error",t),uZ("load",t);break;case"details":uZ("toggle",t);break;case"input":uZ("invalid",t),tr(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),e5(t);break;case"select":uZ("invalid",t);break;case"textarea":uZ("invalid",t),ti(t,r.value,r.defaultValue,r.children),e5(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||sn(t.textContent,n)?(null!=r.popover&&(uZ("beforetoggle",t),uZ("toggle",t)),null!=r.onScroll&&uZ("scroll",t),null!=r.onScrollEnd&&uZ("scrollend",t),null!=r.onClick&&(t.onclick=sr),t=!0):t=!1,t||rz(e)}function rL(e){for(rE=e.return;rE;)switch(rE.tag){case 5:case 13:rT=!1;return;case 27:case 3:rT=!0;return;default:rE=rE.return}}function rA(e){if(e!==rE)return!1;if(!rP)return rL(e),rP=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t="form"===(t=e.type)||"button"===t||sd(e.type,e.memoizedProps)),t=!t),t&&rC&&rz(e),rL(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(n=0,e=e.nextSibling;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){rC=sx(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}rC=null}}else 27===n?(n=rC,sb(e.type)?(e=sE,sE=null,rC=e):rC=n):rC=rE?sx(e.stateNode.nextSibling):null;return!0}function rM(){rC=rE=null,rP=!1}function rR(){var e=r_;return null!==e&&(null===iG?iG=e:iG.push.apply(iG,e),r_=null),e}function rD(e){null===r_?r_=[e]:r_.push(e)}var rI=j(null),rF=null,rj=null;function rU(e,t,n){H(rI,t._currentValue),t._currentValue=n}function rH(e){e._currentValue=rI.current,U(rI)}function r$(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function rB(e,t,n,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var o=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<t.length;s++)if(u.context===t[s]){a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),r$(a.return,n,e),r||(o=null);break e}a=u.next}}else if(18===l.tag){if(null===(o=l.return))throw Error(i(341));o.lanes|=n,null!==(a=o.alternate)&&(a.lanes|=n),r$(o,n,e),o=null}else o=l.child;if(null!==o)o.return=l;else for(o=l;null!==o;){if(o===e){o=null;break}if(null!==(l=o.sibling)){l.return=o.return,o=l;break}o=o.return}l=o}}function rV(e,t,n,r){e=null;for(var l=t,a=!1;null!==l;){if(!a){if(0!=(524288&l.flags))a=!0;else if(0!=(262144&l.flags))break}if(10===l.tag){var o=l.alternate;if(null===o)throw Error(i(387));if(null!==(o=o.memoizedProps)){var u=l.type;n_(l.pendingProps.value,o.value)||(null!==e?e.push(u):e=[u])}}else if(l===Q.current){if(null===(o=l.alternate))throw Error(i(387));o.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(s0):e=[s0])}l=l.return}null!==e&&rB(t,e,n,r),t.flags|=262144}function rQ(e){for(e=e.firstContext;null!==e;){if(!n_(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function rW(e){rF=e,rj=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function rq(e){return rK(rF,e)}function rG(e,t){return null===rF&&rW(e),rK(e,t)}function rK(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===rj){if(null===e)throw Error(i(308));rj=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else rj=rj.next=t;return n}var rX="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach(function(e){return e()})}},rY=l.unstable_scheduleCallback,rJ=l.unstable_NormalPriority,rZ={$$typeof:S,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function r0(){return{controller:new rX,data:new Map,refCount:0}}function r1(e){e.refCount--,0===e.refCount&&rY(rJ,function(){e.controller.abort()})}var r2=null,r3=0,r4=0,r8=null;function r6(){if(0==--r3&&null!==r2){null!==r8&&(r8.status="fulfilled");var e=r2;r2=null,r4=0,r8=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var r5=M.S;M.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===r2){var n=r2=[];r3=0,r4=uQ(),r8={status:"pending",value:void 0,then:function(e){n.push(e)}}}r3++,t.then(r6,r6)}(0,t),null!==r5&&r5(e,t)};var r9=j(null);function r7(){var e=r9.current;return null!==e?e:iL.pooledCache}function le(e,t){null===t?H(r9,r9.current):H(r9,t.pool)}function lt(){var e=r7();return null===e?null:{parent:rZ._currentValue,pool:e}}var ln=Error(i(460)),lr=Error(i(474)),ll=Error(i(542)),la={then:function(){}};function lo(e){return"fulfilled"===(e=e.status)||"rejected"===e}function li(){}function lu(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(li,li),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw lf(e=t.reason),e;default:if("string"==typeof t.status)t.then(li,li);else{if(null!==(e=iL)&&100<e.shellSuspendCounter)throw Error(i(482));(e=t).status="pending",e.then(function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}},function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw lf(e=t.reason),e}throw ls=t,ln}}var ls=null;function lc(){if(null===ls)throw Error(i(459));var e=ls;return ls=null,e}function lf(e){if(e===ln||e===ll)throw Error(i(483))}var ld=!1;function lp(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function lm(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function lh(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function lg(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&iO)){var l=r.pending;return null===l?t.next=t:(t.next=l.next,l.next=t),r.pending=t,t=re(e),n7(e,null,n),t}return n6(e,r,t,n),re(e)}function ly(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194048&n))){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,eP(e,n)}}function lv(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var l=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,n=n.next}while(null!==n)null===a?l=a=t:a=a.next=t}else l=a=t;n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},e.updateQueue=n;return}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var lb=!1;function lk(){if(lb){var e=r8;if(null!==e)throw e}}function lw(e,t,n,r){lb=!1;var l=e.updateQueue;ld=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,i=l.shared.pending;if(null!==i){l.shared.pending=null;var u=i,s=u.next;u.next=null,null===o?a=s:o.next=s,o=u;var c=e.alternate;null!==c&&(i=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===i?c.firstBaseUpdate=s:i.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=l.baseState;for(o=0,c=s=u=null,i=a;;){var d=-0x20000001&i.lane,m=d!==i.lane;if(m?(iM&d)===d:(r&d)===d){0!==d&&d===r4&&(lb=!0),null!==c&&(c=c.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,g=i;switch(d=t,g.tag){case 1:if("function"==typeof(h=g.payload)){f=h.call(n,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=g.payload)?h.call(n,f,d):h))break e;f=p({},f,d);break e;case 2:ld=!0}}null!==(d=i.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=l.callbacks)?l.callbacks=[d]:m.push(d))}else m={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(s=c=m,u=f):c=c.next=m,o|=d;if(null===(i=i.next))if(null===(i=l.shared.pending))break;else i=(m=i).next,m.next=null,l.lastBaseUpdate=m,l.shared.pending=null}null===c&&(u=f),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),i$|=o,e.lanes=o,e.memoizedState=f}}function lS(e,t){if("function"!=typeof e)throw Error(i(191,e));e.call(t)}function lx(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)lS(n[e],t)}var lE=j(null),lC=j(0);function lP(e,t){H(lC,e=iU),H(lE,t),iU=e|t.baseLanes}function l_(){H(lC,iU),H(lE,lE.current)}function lT(){iU=lC.current,U(lE),U(lC)}var lN=0,lz=null,lO=null,lL=null,lA=!1,lM=!1,lR=!1,lD=0,lI=0,lF=null,lj=0;function lU(){throw Error(i(321))}function lH(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!n_(e[n],t[n]))return!1;return!0}function l$(e,t,n,r,l,a){return lN=a,lz=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,M.H=null===e||null===e.memoizedState?aG:aK,lR=!1,a=n(r,l),lR=!1,lM&&(a=lV(t,n,r,l)),lB(e),a}function lB(e){M.H=aq;var t=null!==lO&&null!==lO.next;if(lN=0,lL=lO=lz=null,lA=!1,lI=0,lF=null,t)throw Error(i(300));null===e||ob||null!==(e=e.dependencies)&&rQ(e)&&(ob=!0)}function lV(e,t,n,r){lz=e;var l=0;do{if(lM&&(lF=null),lI=0,lM=!1,25<=l)throw Error(i(301));if(l+=1,lL=lO=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}M.H=aX,a=t(n,r)}while(lM)return a}function lQ(){var e=M.H,t=e.useState()[0];return t="function"==typeof t.then?lJ(t):t,e=e.useState()[0],(null!==lO?lO.memoizedState:null)!==e&&(lz.flags|=1024),t}function lW(){var e=0!==lD;return lD=0,e}function lq(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function lG(e){if(lA){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}lA=!1}lN=0,lL=lO=lz=null,lM=!1,lI=lD=0,lF=null}function lK(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===lL?lz.memoizedState=lL=e:lL=lL.next=e,lL}function lX(){if(null===lO){var e=lz.alternate;e=null!==e?e.memoizedState:null}else e=lO.next;var t=null===lL?lz.memoizedState:lL.next;if(null!==t)lL=t,lO=e;else{if(null===e){if(null===lz.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(lO=e).memoizedState,baseState:lO.baseState,baseQueue:lO.baseQueue,queue:lO.queue,next:null},null===lL?lz.memoizedState=lL=e:lL=lL.next=e}return lL}function lY(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function lJ(e){var t=lI;return lI+=1,null===lF&&(lF=[]),e=lu(lF,e,t),t=lz,null===(null===lL?t.memoizedState:lL.next)&&(M.H=null===(t=t.alternate)||null===t.memoizedState?aG:aK),e}function lZ(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return lJ(e);if(e.$$typeof===S)return rq(e)}throw Error(i(438,String(e)))}function l0(e){var t=null,n=lz.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=lz.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n=lY(),lz.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=N;return t.index++,n}function l1(e,t){return"function"==typeof t?t(e):t}function l2(e){return l3(lX(),lO,e)}function l3(e,t,n){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=n;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var o=l.next;l.next=a.next,a.next=o}t.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{t=l.next;var u=o=null,s=null,c=t,f=!1;do{var d=-0x20000001&c.lane;if(d!==c.lane?(iM&d)===d:(lN&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===r4&&(f=!0);else if((lN&p)===p){c=c.next,p===r4&&(f=!0);continue}else d={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,o=a):s=s.next=d,lz.lanes|=p,i$|=p;d=c.action,lR&&n(a,d),a=c.hasEagerState?c.eagerState:n(a,d)}else p={lane:d,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,o=a):s=s.next=p,lz.lanes|=d,i$|=d;c=c.next}while(null!==c&&c!==t)if(null===s?o=a:s.next=u,!n_(a,e.memoizedState)&&(ob=!0,f&&null!==(n=r8)))throw n;e.memoizedState=a,e.baseState=o,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function l4(e){var t=lX(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,a=t.memoizedState;if(null!==l){n.pending=null;var o=l=l.next;do a=e(a,o.action),o=o.next;while(o!==l)n_(a,t.memoizedState)||(ob=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function l8(e,t,n){var r=lz,l=lX(),a=rP;if(a){if(void 0===n)throw Error(i(407));n=n()}else n=t();var o=!n_((lO||l).memoizedState,n);if(o&&(l.memoizedState=n,ob=!0),l=l.queue,ab(2048,8,l9.bind(null,r,l,e),[e]),l.getSnapshot!==t||o||null!==lL&&1&lL.memoizedState.tag){if(r.flags|=2048,ah(9,ag(),l5.bind(null,r,l,n,t),null),null===iL)throw Error(i(349));a||0!=(124&lN)||l6(r,t,n)}return n}function l6(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=lz.updateQueue)?(t=lY(),lz.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function l5(e,t,n,r){t.value=n,t.getSnapshot=r,l7(t)&&ae(e)}function l9(e,t,n){return n(function(){l7(t)&&ae(e)})}function l7(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!n_(e,n)}catch(e){return!0}}function ae(e){var t=n9(e,2);null!==t&&ut(t,e,2)}function at(e){var t=lK();if("function"==typeof e){var n=e;if(e=n(),lR){ed(!0);try{n()}finally{ed(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:l1,lastRenderedState:e},t}function an(e,t,n,r){return e.baseState=n,l3(e,lO,"function"==typeof r?r:l1)}function ar(e,t,n,r,l){if(aV(e))throw Error(i(485));if(null!==(e=t.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==M.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,al(t,a)):(a.next=n.next,t.pending=n.next=a)}}function al(e,t){var n=t.action,r=t.payload,l=e.state;if(t.isTransition){var a=M.T,o={};M.T=o;try{var i=n(l,r),u=M.S;null!==u&&u(o,i),aa(e,t,i)}catch(n){ai(e,t,n)}finally{M.T=a}}else try{a=n(l,r),aa(e,t,a)}catch(n){ai(e,t,n)}}function aa(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then(function(n){ao(e,t,n)},function(n){return ai(e,t,n)}):ao(e,t,n)}function ao(e,t,n){t.status="fulfilled",t.value=n,au(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,al(e,n)))}function ai(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do t.status="rejected",t.reason=n,au(t),t=t.next;while(t!==r)}e.action=null}function au(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function as(e,t){return t}function ac(e,t){if(rP){var n=iL.formState;if(null!==n){e:{var r=lz;if(rP){if(rC){t:{for(var l=rC,a=rT;8!==l.nodeType;)if(!a||null===(l=sx(l.nextSibling))){l=null;break t}l="F!"===(a=l.data)||"F"===a?l:null}if(l){rC=sx(l.nextSibling),r="F!"===l.data;break e}}rz(r)}r=!1}r&&(t=n[0])}}return(n=lK()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:as,lastRenderedState:t},n.queue=r,n=aH.bind(null,lz,r),r.dispatch=n,r=at(!1),a=aB.bind(null,lz,!1,r.queue),r=lK(),l={state:t,dispatch:null,action:e,pending:null},r.queue=l,n=ar.bind(null,lz,l,a,n),l.dispatch=n,r.memoizedState=e,[t,n,!1]}function af(e){return ad(lX(),lO,e)}function ad(e,t,n){if(t=l3(e,t,as)[0],e=l2(l1)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=lJ(t)}catch(e){if(e===ln)throw ll;throw e}else r=t;var l=(t=lX()).queue,a=l.dispatch;return n!==t.memoizedState&&(lz.flags|=2048,ah(9,ag(),ap.bind(null,l,n),null)),[r,a,e]}function ap(e,t){e.action=t}function am(e){var t=lX(),n=lO;if(null!==n)return ad(t,n,e);lX(),t=t.memoizedState;var r=(n=lX()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function ah(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=lz.updateQueue)&&(t=lY(),lz.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ag(){return{destroy:void 0,resource:void 0}}function ay(){return lX().memoizedState}function av(e,t,n,r){var l=lK();r=void 0===r?null:r,lz.flags|=e,l.memoizedState=ah(1|t,ag(),n,r)}function ab(e,t,n,r){var l=lX();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==lO&&null!==r&&lH(r,lO.memoizedState.deps)?l.memoizedState=ah(t,a,n,r):(lz.flags|=e,l.memoizedState=ah(1|t,a,n,r))}function ak(e,t){av(8390656,8,e,t)}function aw(e,t){ab(2048,8,e,t)}function aS(e,t){return ab(4,2,e,t)}function ax(e,t){return ab(4,4,e,t)}function aE(e,t){if("function"==typeof t){var n=t(e=e());return function(){"function"==typeof n?n():t(null)}}if(null!=t)return t.current=e=e(),function(){t.current=null}}function aC(e,t,n){n=null!=n?n.concat([e]):null,ab(4,4,aE.bind(null,t,e),n)}function aP(){}function a_(e,t){var n=lX();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&lH(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function aT(e,t){var n=lX();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&lH(t,r[1]))return r[0];if(r=e(),lR){ed(!0);try{e()}finally{ed(!1)}}return n.memoizedState=[r,t],r}function aN(e,t,n){return void 0===n||0!=(0x40000000&lN)?e.memoizedState=t:(e.memoizedState=n,e=ue(),lz.lanes|=e,i$|=e,n)}function az(e,t,n,r){return n_(n,t)?n:null!==lE.current?(n_(e=aN(e,n,r),t)||(ob=!0),e):0==(42&lN)?(ob=!0,e.memoizedState=n):(e=ue(),lz.lanes|=e,i$|=e,t)}function aO(e,t,n,r,l){var a=R.p;R.p=0!==a&&8>a?a:8;var o=M.T,i={};M.T=i,aB(e,!1,t,n);try{var u=l(),s=M.S;if(null!==s&&s(i,u),null!==u&&"object"==typeof u&&"function"==typeof u.then){var c,f,d=(c=[],f={status:"pending",value:null,reason:null,then:function(e){c.push(e)}},u.then(function(){f.status="fulfilled",f.value=r;for(var e=0;e<c.length;e++)(0,c[e])(r)},function(e){for(f.status="rejected",f.reason=e,e=0;e<c.length;e++)(0,c[e])(void 0)}),f);a$(e,t,d,i7(e))}else a$(e,t,r,i7(e))}catch(n){a$(e,t,{then:function(){},status:"rejected",reason:n},i7())}finally{R.p=a,M.T=o}}function aL(){}function aA(e,t,n,r){if(5!==e.tag)throw Error(i(476));var l=aM(e).queue;aO(e,l,t,D,null===n?aL:function(){return aR(e),n(r)})}function aM(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:D,baseState:D,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:l1,lastRenderedState:D},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:l1,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function aR(e){var t=aM(e).next.queue;a$(e,t,{},i7())}function aD(){return rq(s0)}function aI(){return lX().memoizedState}function aF(){return lX().memoizedState}function aj(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=i7(),r=lg(t,e=lh(n),n);null!==r&&(ut(r,t,n),ly(r,t,n)),t={cache:r0()},e.payload=t;return}t=t.return}}function aU(e,t,n){var r=i7();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},aV(e)?aQ(t,n):null!==(n=n5(e,t,n,r))&&(ut(n,e,r),aW(n,t,r))}function aH(e,t,n){a$(e,t,n,i7())}function a$(e,t,n,r){var l={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(aV(e))aQ(t,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=a(o,n);if(l.hasEagerState=!0,l.eagerState=i,n_(i,o))return n6(e,t,l,0),null===iL&&n8(),!1}catch(e){}finally{}if(null!==(n=n5(e,t,l,r)))return ut(n,e,r),aW(n,t,r),!0}return!1}function aB(e,t,n,r){if(r={lane:2,revertLane:uQ(),action:r,hasEagerState:!1,eagerState:null,next:null},aV(e)){if(t)throw Error(i(479))}else null!==(t=n5(e,n,r,2))&&ut(t,e,2)}function aV(e){var t=e.alternate;return e===lz||null!==t&&t===lz}function aQ(e,t){lM=lA=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function aW(e,t,n){if(0!=(4194048&n)){var r=t.lanes;r&=e.pendingLanes,t.lanes=n|=r,eP(e,n)}}var aq={readContext:rq,use:lZ,useCallback:lU,useContext:lU,useEffect:lU,useImperativeHandle:lU,useLayoutEffect:lU,useInsertionEffect:lU,useMemo:lU,useReducer:lU,useRef:lU,useState:lU,useDebugValue:lU,useDeferredValue:lU,useTransition:lU,useSyncExternalStore:lU,useId:lU,useHostTransitionStatus:lU,useFormState:lU,useActionState:lU,useOptimistic:lU,useMemoCache:lU,useCacheRefresh:lU},aG={readContext:rq,use:lZ,useCallback:function(e,t){return lK().memoizedState=[e,void 0===t?null:t],e},useContext:rq,useEffect:ak,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,av(4194308,4,aE.bind(null,t,e),n)},useLayoutEffect:function(e,t){return av(4194308,4,e,t)},useInsertionEffect:function(e,t){av(4,2,e,t)},useMemo:function(e,t){var n=lK();t=void 0===t?null:t;var r=e();if(lR){ed(!0);try{e()}finally{ed(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=lK();if(void 0!==n){var l=n(t);if(lR){ed(!0);try{n(t)}finally{ed(!1)}}}else l=t;return r.memoizedState=r.baseState=l,r.queue=e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},e=e.dispatch=aU.bind(null,lz,e),[r.memoizedState,e]},useRef:function(e){return lK().memoizedState=e={current:e}},useState:function(e){var t=(e=at(e)).queue,n=aH.bind(null,lz,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:aP,useDeferredValue:function(e,t){return aN(lK(),e,t)},useTransition:function(){var e=at(!1);return e=aO.bind(null,lz,e.queue,!0,!1),lK().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=lz,l=lK();if(rP){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===iL)throw Error(i(349));0!=(124&iM)||l6(r,t,n)}l.memoizedState=n;var a={value:n,getSnapshot:t};return l.queue=a,ak(l9.bind(null,r,a,e),[e]),r.flags|=2048,ah(9,ag(),l5.bind(null,r,a,n,t),null),n},useId:function(){var e=lK(),t=iL.identifierPrefix;if(rP){var n=rb,r=rv;t="«"+t+"R"+(n=(r&~(1<<32-ep(r)-1)).toString(32)+n),0<(n=lD++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=lj++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:aD,useFormState:ac,useActionState:ac,useOptimistic:function(e){var t=lK();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=aB.bind(null,lz,!0,n),n.dispatch=t,[e,t]},useMemoCache:l0,useCacheRefresh:function(){return lK().memoizedState=aj.bind(null,lz)}},aK={readContext:rq,use:lZ,useCallback:a_,useContext:rq,useEffect:aw,useImperativeHandle:aC,useInsertionEffect:aS,useLayoutEffect:ax,useMemo:aT,useReducer:l2,useRef:ay,useState:function(){return l2(l1)},useDebugValue:aP,useDeferredValue:function(e,t){return az(lX(),lO.memoizedState,e,t)},useTransition:function(){var e=l2(l1)[0],t=lX().memoizedState;return["boolean"==typeof e?e:lJ(e),t]},useSyncExternalStore:l8,useId:aI,useHostTransitionStatus:aD,useFormState:af,useActionState:af,useOptimistic:function(e,t){return an(lX(),lO,e,t)},useMemoCache:l0,useCacheRefresh:aF},aX={readContext:rq,use:lZ,useCallback:a_,useContext:rq,useEffect:aw,useImperativeHandle:aC,useInsertionEffect:aS,useLayoutEffect:ax,useMemo:aT,useReducer:l4,useRef:ay,useState:function(){return l4(l1)},useDebugValue:aP,useDeferredValue:function(e,t){var n=lX();return null===lO?aN(n,e,t):az(n,lO.memoizedState,e,t)},useTransition:function(){var e=l4(l1)[0],t=lX().memoizedState;return["boolean"==typeof e?e:lJ(e),t]},useSyncExternalStore:l8,useId:aI,useHostTransitionStatus:aD,useFormState:am,useActionState:am,useOptimistic:function(e,t){var n=lX();return null!==lO?an(n,lO,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:l0,useCacheRefresh:aF},aY=null,aJ=0;function aZ(e){var t=aJ;return aJ+=1,null===aY&&(aY=[]),lu(aY,e,t)}function a0(e,t){e.ref=void 0!==(t=t.props.ref)?t:null}function a1(e,t){if(t.$$typeof===m)throw Error(i(525));throw Error(i(31,"[object Object]"===(e=Object.prototype.toString.call(t))?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function a2(e){return(0,e._init)(e._payload)}function a3(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function l(e,t){return(e=ra(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return(t.index=r,e)?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=0x4000002,n):r:(t.flags|=0x4000002,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=0x4000002),t}function u(e,t,n,r){return null===t||6!==t.tag?(t=rs(n,e.mode,r)).return=e:(t=l(t,n)).return=e,t}function s(e,t,n,r){var a=n.type;return a===y?f(e,t,n.props.children,r,n.key):(null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===_&&a2(a)===t.type)?a0(t=l(t,n.props),n):a0(t=ri(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?(t=rc(n,e.mode,r)).return=e:(t=l(t,n.children||[])).return=e,t}function f(e,t,n,r,a){return null===t||7!==t.tag?(t=ru(n,e.mode,r,a)).return=e:(t=l(t,n)).return=e,t}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=rs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case h:return a0(n=ri(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case g:return(t=rc(t,e.mode,n)).return=e,t;case _:return d(e,t=(0,t._init)(t._payload),n)}if(A(t)||O(t))return(t=ru(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return d(e,aZ(t),n);if(t.$$typeof===S)return d(e,rG(e,t),n);a1(e,t)}return null}function p(e,t,n,r){var l=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==l?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case h:return n.key===l?s(e,t,n,r):null;case g:return n.key===l?c(e,t,n,r):null;case _:return p(e,t,n=(l=n._init)(n._payload),r)}if(A(n)||O(n))return null!==l?null:f(e,t,n,r,null);if("function"==typeof n.then)return p(e,t,aZ(n),r);if(n.$$typeof===S)return p(e,t,rG(e,n),r);a1(e,n)}return null}function m(e,t,n,r,l){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return u(t,e=e.get(n)||null,""+r,l);if("object"==typeof r&&null!==r){switch(r.$$typeof){case h:return s(t,e=e.get(null===r.key?n:r.key)||null,r,l);case g:return c(t,e=e.get(null===r.key?n:r.key)||null,r,l);case _:return m(e,t,n,r=(0,r._init)(r._payload),l)}if(A(r)||O(r))return f(t,e=e.get(n)||null,r,l,null);if("function"==typeof r.then)return m(e,t,n,aZ(r),l);if(r.$$typeof===S)return m(e,t,n,rG(t,r),l);a1(t,r)}return null}return function(u,s,c,f){try{aJ=0;var v=function u(s,c,f,v){if("object"==typeof f&&null!==f&&f.type===y&&null===f.key&&(f=f.props.children),"object"==typeof f&&null!==f){switch(f.$$typeof){case h:e:{for(var b=f.key;null!==c;){if(c.key===b){if((b=f.type)===y){if(7===c.tag){n(s,c.sibling),(v=l(c,f.props.children)).return=s,s=v;break e}}else if(c.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===_&&a2(b)===c.type){n(s,c.sibling),a0(v=l(c,f.props),f),v.return=s,s=v;break e}n(s,c);break}t(s,c),c=c.sibling}f.type===y?(v=ru(f.props.children,s.mode,v,f.key)).return=s:(a0(v=ri(f.type,f.key,f.props,null,s.mode,v),f),v.return=s),s=v}return o(s);case g:e:{for(b=f.key;null!==c;){if(c.key===b)if(4===c.tag&&c.stateNode.containerInfo===f.containerInfo&&c.stateNode.implementation===f.implementation){n(s,c.sibling),(v=l(c,f.children||[])).return=s,s=v;break e}else{n(s,c);break}t(s,c),c=c.sibling}(v=rc(f,s.mode,v)).return=s,s=v}return o(s);case _:return u(s,c,f=(b=f._init)(f._payload),v)}if(A(f))return function(l,o,i,u){for(var s=null,c=null,f=o,h=o=0,g=null;null!==f&&h<i.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var y=p(l,f,i[h],u);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(l,f),o=a(y,o,h),null===c?s=y:c.sibling=y,c=y,f=g}if(h===i.length)return n(l,f),rP&&rk(l,h),s;if(null===f){for(;h<i.length;h++)null!==(f=d(l,i[h],u))&&(o=a(f,o,h),null===c?s=f:c.sibling=f,c=f);return rP&&rk(l,h),s}for(f=r(f);h<i.length;h++)null!==(g=m(f,l,h,i[h],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),o=a(g,o,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return t(l,e)}),rP&&rk(l,h),s}(s,c,f,v);if(O(f)){if("function"!=typeof(b=O(f)))throw Error(i(150));return function(l,o,u,s){if(null==u)throw Error(i(151));for(var c=null,f=null,h=o,g=o=0,y=null,v=u.next();null!==h&&!v.done;g++,v=u.next()){h.index>g?(y=h,h=null):y=h.sibling;var b=p(l,h,v.value,s);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(l,h),o=a(b,o,g),null===f?c=b:f.sibling=b,f=b,h=y}if(v.done)return n(l,h),rP&&rk(l,g),c;if(null===h){for(;!v.done;g++,v=u.next())null!==(v=d(l,v.value,s))&&(o=a(v,o,g),null===f?c=v:f.sibling=v,f=v);return rP&&rk(l,g),c}for(h=r(h);!v.done;g++,v=u.next())null!==(v=m(h,l,g,v.value,s))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),o=a(v,o,g),null===f?c=v:f.sibling=v,f=v);return e&&h.forEach(function(e){return t(l,e)}),rP&&rk(l,g),c}(s,c,f=b.call(f),v)}if("function"==typeof f.then)return u(s,c,aZ(f),v);if(f.$$typeof===S)return u(s,c,rG(s,f),v);a1(s,f)}return"string"==typeof f&&""!==f||"number"==typeof f||"bigint"==typeof f?(f=""+f,null!==c&&6===c.tag?(n(s,c.sibling),(v=l(c,f)).return=s):(n(s,c),(v=rs(f,s.mode,v)).return=s),o(s=v)):n(s,c)}(u,s,c,f);return aY=null,v}catch(e){if(e===ln||e===ll)throw e;var b=rr(29,e,null,u.mode);return b.lanes=f,b.return=u,b}finally{}}}var a4=a3(!0),a8=a3(!1),a6=j(null),a5=null;function a9(e){var t=e.alternate;H(on,1&on.current),H(a6,e),null===a5&&(null===t||null!==lE.current?a5=e:null!==t.memoizedState&&(a5=e))}function a7(e){if(22===e.tag){if(H(on,on.current),H(a6,e),null===a5){var t=e.alternate;null!==t&&null!==t.memoizedState&&(a5=e)}}else oe(e)}function oe(){H(on,on.current),H(a6,a6.current)}function ot(e){U(a6),a5===e&&(a5=null),U(on)}var on=j(0);function or(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||sS(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function ol(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:p({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var oa={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=i7(),l=lh(r);l.payload=t,null!=n&&(l.callback=n),null!==(t=lg(e,l,r))&&(ut(t,e,r),ly(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=i7(),l=lh(r);l.tag=1,l.payload=t,null!=n&&(l.callback=n),null!==(t=lg(e,l,r))&&(ut(t,e,r),ly(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=i7(),r=lh(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=lg(e,r,n))&&(ut(t,e,n),ly(t,e,n))}};function oo(e,t,n,r,l,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!t.prototype||!t.prototype.isPureReactComponent||!nT(n,r)||!nT(l,a)}function oi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&oa.enqueueReplaceState(t,t.state,null)}function ou(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var l in n===t&&(n=p({},n)),e)void 0===n[l]&&(n[l]=e[l]);return n}var os="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}console.error(e)};function oc(e){os(e)}function of(e){console.error(e)}function od(e){os(e)}function op(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout(function(){throw e})}}function om(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function oh(e,t,n){return(n=lh(n)).tag=3,n.payload={element:null},n.callback=function(){op(e,t)},n}function og(e){return(e=lh(e)).tag=3,e}function oy(e,t,n,r){var l=n.type.getDerivedStateFromError;if("function"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){om(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){om(t,n,r),"function"!=typeof l&&(null===iZ?iZ=new Set([this]):iZ.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var ov=Error(i(461)),ob=!1;function ok(e,t,n,r){t.child=null===e?a8(t,null,n,r):a4(t,e.child,n,r)}function ow(e,t,n,r,l){n=n.render;var a=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return(rW(t),r=l$(e,t,n,o,a,l),i=lW(),null===e||ob)?(rP&&i&&rS(t),t.flags|=1,ok(e,t,r,l),t.child):(lq(e,t,l),oH(e,t,l))}function oS(e,t,n,r,l){if(null===e){var a=n.type;return"function"!=typeof a||rl(a)||void 0!==a.defaultProps||null!==n.compare?((e=ri(n.type,null,r,t,t.mode,l)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ox(e,t,a,r,l))}if(a=e.child,!o$(e,l)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:nT)(o,r)&&e.ref===t.ref)return oH(e,t,l)}return t.flags|=1,(e=ra(a,r)).ref=t.ref,e.return=t,t.child=e}function ox(e,t,n,r,l){if(null!==e){var a=e.memoizedProps;if(nT(a,r)&&e.ref===t.ref)if(ob=!1,t.pendingProps=r=a,!o$(e,l))return t.lanes=e.lanes,oH(e,t,l);else 0!=(131072&e.flags)&&(ob=!0)}return o_(e,t,n,r,l)}function oE(e,t,n){var r=t.pendingProps,l=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(0!=(128&t.flags)){if(r=null!==a?a.baseLanes|n:n,null!==e){for(a=0,l=t.child=e.child;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return oC(e,t,r,n)}if(0==(0x20000000&n))return t.lanes=t.childLanes=0x20000000,oC(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&le(t,null!==a?a.cachePool:null),null!==a?lP(t,a):l_(),a7(t)}else null!==a?(le(t,a.cachePool),lP(t,a),oe(t),t.memoizedState=null):(null!==e&&le(t,null),l_(),oe(t));return ok(e,t,l,n),t.child}function oC(e,t,n,r){var l=r7();return t.memoizedState={baseLanes:n,cachePool:l=null===l?null:{parent:rZ._currentValue,pool:l}},null!==e&&le(t,null),l_(),a7(t),null!==e&&rV(e,t,r,!0),null}function oP(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(i(284));(null===e||e.ref!==n)&&(t.flags|=4194816)}}function o_(e,t,n,r,l){return(rW(t),n=l$(e,t,n,r,void 0,l),r=lW(),null===e||ob)?(rP&&r&&rS(t),t.flags|=1,ok(e,t,n,l),t.child):(lq(e,t,l),oH(e,t,l))}function oT(e,t,n,r,l,a){return(rW(t),t.updateQueue=null,n=lV(t,r,n,l),lB(e),r=lW(),null===e||ob)?(rP&&r&&rS(t),t.flags|=1,ok(e,t,n,a),t.child):(lq(e,t,a),oH(e,t,a))}function oN(e,t,n,r,l){if(rW(t),null===t.stateNode){var a=rt,o=n.contextType;"object"==typeof o&&null!==o&&(a=rq(o)),t.memoizedState=null!==(a=new n(r,a)).state&&void 0!==a.state?a.state:null,a.updater=oa,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},lp(t),o=n.contextType,a.context="object"==typeof o&&null!==o?rq(o):rt,a.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(ol(t,n,o,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(o=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&oa.enqueueReplaceState(a,a.state,null),lw(t,r,a,l),lk(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var i=t.memoizedProps,u=ou(n,i);a.props=u;var s=a.context,c=n.contextType;o=rt,"object"==typeof c&&null!==c&&(o=rq(c));var f=n.getDerivedStateFromProps;c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate,i=t.pendingProps!==i,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(i||s!==o)&&oi(t,a,r,o),ld=!1;var d=t.memoizedState;a.state=d,lw(t,r,a,l),lk(),s=t.memoizedState,i||d!==s||ld?("function"==typeof f&&(ol(t,n,f,r),s=t.memoizedState),(u=ld||oo(t,n,u,r,d,s,o))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=o,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,lm(e,t),c=ou(n,o=t.memoizedProps),a.props=c,f=t.pendingProps,d=a.context,s=n.contextType,u=rt,"object"==typeof s&&null!==s&&(u=rq(s)),(s="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o!==f||d!==u)&&oi(t,a,r,u),ld=!1,d=t.memoizedState,a.state=d,lw(t,r,a,l),lk();var p=t.memoizedState;o!==f||d!==p||ld||null!==e&&null!==e.dependencies&&rQ(e.dependencies)?("function"==typeof i&&(ol(t,n,i,r),p=t.memoizedState),(c=ld||oo(t,n,c,r,d,p,u)||null!==e&&null!==e.dependencies&&rQ(e.dependencies))?(s||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=u,r=c):("function"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,oP(e,t),r=0!=(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=a4(t,e.child,null,l),t.child=a4(t,null,n,l)):ok(e,t,n,l),t.memoizedState=a.state,e=t.child):e=oH(e,t,l),e}function oz(e,t,n,r){return rM(),t.flags|=256,ok(e,t,n,r),t.child}var oO={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function oL(e){return{baseLanes:e,cachePool:lt()}}function oA(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=iQ),e}function oM(e,t,n){var r,l=t.pendingProps,a=!1,o=0!=(128&t.flags);if((r=o)||(r=(null===e||null!==e.memoizedState)&&0!=(2&on.current)),r&&(a=!0,t.flags&=-129),r=0!=(32&t.flags),t.flags&=-33,null===e){if(rP){if(a?a9(t):oe(t),rP){var u,s=rC;if(u=s){n:{for(u=s,s=rT;8!==u.nodeType;)if(!s||null===(u=sx(u.nextSibling))){s=null;break n}s=u}null!==s?(t.memoizedState={dehydrated:s,treeContext:null!==ry?{id:rv,overflow:rb}:null,retryLane:0x20000000,hydrationErrors:null},(u=rr(18,null,null,0)).stateNode=s,u.return=t,t.child=u,rE=t,rC=null,u=!0):u=!1}u||rz(t)}if(null!==(s=t.memoizedState)&&null!==(s=s.dehydrated))return sS(s)?t.lanes=32:t.lanes=0x20000000,null;ot(t)}return(s=l.children,l=l.fallback,a)?(oe(t),s=oD({mode:"hidden",children:s},a=t.mode),l=ru(l,a,n,null),s.return=t,l.return=t,s.sibling=l,t.child=s,(a=t.child).memoizedState=oL(n),a.childLanes=oA(e,r,n),t.memoizedState=oO,l):(a9(t),oR(t,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(o)256&t.flags?(a9(t),t.flags&=-257,t=oI(e,t,n)):null!==t.memoizedState?(oe(t),t.child=e.child,t.flags|=128,t=null):(oe(t),a=l.fallback,s=t.mode,l=oD({mode:"visible",children:l.children},s),a=ru(a,s,n,null),a.flags|=2,l.return=t,a.return=t,l.sibling=a,t.child=l,a4(t,e.child,null,n),(l=t.child).memoizedState=oL(n),l.childLanes=oA(e,r,n),t.memoizedState=oO,t=a);else if(a9(t),sS(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(i(419))).stack="",l.digest=r,rD({value:l,source:null,stack:null}),t=oI(e,t,n)}else if(ob||rV(e,t,n,!1),r=0!=(n&e.childLanes),ob||r){if(null!==(r=iL)&&0!==(l=0!=((l=0!=(42&(l=n&-n))?1:e_(l))&(r.suspendedLanes|n))?0:l)&&l!==u.retryLane)throw u.retryLane=l,n9(e,l),ut(r,e,l),ov;"$?"===s.data||uf(),t=oI(e,t,n)}else"$?"===s.data?(t.flags|=192,t.child=e.child,t=null):(e=u.treeContext,rC=sx(s.nextSibling),rE=t,rP=!0,r_=null,rT=!1,null!==e&&(rh[rg++]=rv,rh[rg++]=rb,rh[rg++]=ry,rv=e.id,rb=e.overflow,ry=t),t=oR(t,l.children),t.flags|=4096);return t}return a?(oe(t),a=l.fallback,s=t.mode,c=(u=e.child).sibling,(l=ra(u,{mode:"hidden",children:l.children})).subtreeFlags=0x3e00000&u.subtreeFlags,null!==c?a=ra(c,a):(a=ru(a,s,n,null),a.flags|=2),a.return=t,l.return=t,l.sibling=a,t.child=l,l=a,a=t.child,null===(s=e.child.memoizedState)?s=oL(n):(null!==(u=s.cachePool)?(c=rZ._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=lt(),s={baseLanes:s.baseLanes|n,cachePool:u}),a.memoizedState=s,a.childLanes=oA(e,r,n),t.memoizedState=oO,l):(a9(t),e=(n=e.child).sibling,(n=ra(n,{mode:"visible",children:l.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function oR(e,t){return(t=oD({mode:"visible",children:t},e.mode)).return=e,e.child=t}function oD(e,t){return(e=rr(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function oI(e,t,n){return a4(t,e.child,null,n),e=oR(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function oF(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),r$(e.return,t,n)}function oj(e,t,n,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=l)}function oU(e,t,n){var r=t.pendingProps,l=r.revealOrder,a=r.tail;if(ok(e,t,r.children,n),0!=(2&(r=on.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&oF(e,n,t);else if(19===e.tag)oF(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(H(on,r),l){case"forwards":for(l=null,n=t.child;null!==n;)null!==(e=n.alternate)&&null===or(e)&&(l=n),n=n.sibling;null===(n=l)?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),oj(t,!1,l,n,a);break;case"backwards":for(n=null,l=t.child,t.child=null;null!==l;){if(null!==(e=l.alternate)&&null===or(e)){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}oj(t,!0,n,null,a);break;case"together":oj(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function oH(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),i$|=t.lanes,0==(n&t.childLanes)){if(null===e)return null;else if(rV(e,t,n,!1),0==(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=ra(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ra(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function o$(e,t){return 0!=(e.lanes&t)||!!(null!==(e=e.dependencies)&&rQ(e))}function oB(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)ob=!0;else{if(!o$(e,n)&&0==(128&t.flags))return ob=!1,function(e,t,n){switch(t.tag){case 3:W(t,t.stateNode.containerInfo),rU(t,rZ,e.memoizedState.cache),rM();break;case 27:case 5:G(t);break;case 4:W(t,t.stateNode.containerInfo);break;case 10:rU(t,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r){if(null!==r.dehydrated)return a9(t),t.flags|=128,null;if(0!=(n&t.child.childLanes))return oM(e,t,n);return a9(t),null!==(e=oH(e,t,n))?e.sibling:null}a9(t);break;case 19:var l=0!=(128&e.flags);if((r=0!=(n&t.childLanes))||(rV(e,t,n,!1),r=0!=(n&t.childLanes)),l){if(r)return oU(e,t,n);t.flags|=128}if(null!==(l=t.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),H(on,on.current),!r)return null;break;case 22:case 23:return t.lanes=0,oE(e,t,n);case 24:rU(t,rZ,e.memoizedState.cache)}return oH(e,t,n)}(e,t,n);ob=0!=(131072&e.flags)}else ob=!1,rP&&0!=(1048576&t.flags)&&rw(t,rm,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,l=r._init;if(r=l(r._payload),t.type=r,"function"==typeof r)rl(r)?(e=ou(r,e),t.tag=1,t=oN(null,t,r,e,n)):(t.tag=0,t=o_(null,t,r,e,n));else{if(null!=r){if((l=r.$$typeof)===x){t.tag=11,t=ow(null,t,r,e,n);break e}else if(l===P){t.tag=14,t=oS(null,t,r,e,n);break e}}throw Error(i(306,t=function e(t){if(null==t)return null;if("function"==typeof t)return t.$$typeof===L?null:t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case y:return"Fragment";case b:return"Profiler";case v:return"StrictMode";case E:return"Suspense";case C:return"SuspenseList";case T:return"Activity"}if("object"==typeof t)switch(t.$$typeof){case g:return"Portal";case S:return(t.displayName||"Context")+".Provider";case w:return(t._context.displayName||"Context")+".Consumer";case x:var n=t.render;return(t=t.displayName)||(t=""!==(t=n.displayName||n.name||"")?"ForwardRef("+t+")":"ForwardRef"),t;case P:return null!==(n=t.displayName||null)?n:e(t.type)||"Memo";case _:n=t._payload,t=t._init;try{return e(t(n))}catch(e){}}return null}(r)||r,""))}}return t;case 0:return o_(e,t,t.type,t.pendingProps,n);case 1:return l=ou(r=t.type,t.pendingProps),oN(e,t,r,l,n);case 3:e:{if(W(t,t.stateNode.containerInfo),null===e)throw Error(i(387));r=t.pendingProps;var a=t.memoizedState;l=a.element,lm(e,t),lw(t,r,null,n);var o=t.memoizedState;if(rU(t,rZ,r=o.cache),r!==a.cache&&rB(t,[rZ],n,!0),lk(),r=o.element,a.isDehydrated)if(a={element:r,isDehydrated:!1,cache:o.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=oz(e,t,r,n);break e}else if(r!==l){rD(l=n1(Error(i(424)),t)),t=oz(e,t,r,n);break e}else for(rC=sx((e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e).firstChild),rE=t,rP=!0,r_=null,rT=!0,n=a8(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling;else{if(rM(),r===l){t=oH(e,t,n);break e}ok(e,t,r,n)}t=t.child}return t;case 26:return oP(e,t),null===e?(n=sM(t.type,null,t.pendingProps,null))?t.memoizedState=n:rP||(n=t.type,e=t.pendingProps,(r=ss(V.current).createElement(n))[eO]=t,r[eL]=e,so(r,n,e),eV(r),t.stateNode=r):t.memoizedState=sM(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return G(t),null===e&&rP&&(r=t.stateNode=sP(t.type,t.pendingProps,V.current),rE=t,rT=!0,l=rC,sb(t.type)?(sE=l,rC=sx(r.firstChild)):rC=l),ok(e,t,t.pendingProps.children,n),oP(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&rP&&((l=r=rC)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[eF])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence")||l!==n.rel||e.getAttribute("href")!==(null==n.href||""===n.href?null:n.href)||e.getAttribute("crossorigin")!==(null==n.crossOrigin?null:n.crossOrigin)||e.getAttribute("title")!==(null==n.title?null:n.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==n.src?null:n.src)||e.getAttribute("type")!==(null==n.type?null:n.type)||e.getAttribute("crossorigin")!==(null==n.crossOrigin?null:n.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var l=null==n.name?null:""+n.name;if("hidden"===n.type&&e.getAttribute("name")===l)return e}if(null===(e=sx(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,rT))?(t.stateNode=r,rE=t,rC=sx(r.firstChild),rT=!1,l=!0):l=!1),l||rz(t)),G(t),l=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,r=a.children,sd(l,a)?r=null:null!==o&&sd(l,o)&&(t.flags|=32),null!==t.memoizedState&&(s0._currentValue=l=l$(e,t,lQ,null,null,n)),oP(e,t),ok(e,t,r,n),t.child;case 6:return null===e&&rP&&((e=n=rC)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;)if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n||null===(e=sx(e.nextSibling)))return null;return e}(n,t.pendingProps,rT))?(t.stateNode=n,rE=t,rC=null,e=!0):e=!1),e||rz(t)),null;case 13:return oM(e,t,n);case 4:return W(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=a4(t,null,r,n):ok(e,t,r,n),t.child;case 11:return ow(e,t,t.type,t.pendingProps,n);case 7:return ok(e,t,t.pendingProps,n),t.child;case 8:case 12:return ok(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,rU(t,t.type,r.value),ok(e,t,r.children,n),t.child;case 9:return l=t.type._context,r=t.pendingProps.children,rW(t),r=r(l=rq(l)),t.flags|=1,ok(e,t,r,n),t.child;case 14:return oS(e,t,t.type,t.pendingProps,n);case 15:return ox(e,t,t.type,t.pendingProps,n);case 19:return oU(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?(n=oD(r,n)).ref=t.ref:(n=ra(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n;case 22:return oE(e,t,n);case 24:return rW(t),r=rq(rZ),null===e?(null===(l=r7())&&(l=iL,a=r0(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=n),l=a),t.memoizedState={parent:r,cache:l},lp(t),rU(t,rZ,l)):(0!=(e.lanes&n)&&(lm(e,t),lw(t,null,null,n),lk()),l=e.memoizedState,a=t.memoizedState,l.parent!==r?(l={parent:r,cache:r},t.memoizedState=l,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=l),rU(t,rZ,r)):(rU(t,rZ,r=a.cache),r!==l.cache&&rB(t,[rZ],n,!0))),ok(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(i(156,t.tag))}function oV(e){e.flags|=4}function oQ(e,t){if("stylesheet"!==t.type||0!=(4&t.state.loading))e.flags&=-0x1000001;else if(e.flags|=0x1000000,!sq(t)){if(null!==(t=a6.current)&&((4194048&iM)===iM?null!==a5:(0x3c00000&iM)!==iM&&0==(0x20000000&iM)||t!==a5))throw ls=la,lr;e.flags|=8192}}function oW(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?eS():0x20000000,e.lanes|=t,iW|=t)}function oq(e,t){if(!rP)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function oG(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=0x3e00000&l.subtreeFlags,r|=0x3e00000&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function oK(e,t){switch(rx(t),t.tag){case 3:rH(rZ),q();break;case 26:case 27:case 5:K(t);break;case 4:q();break;case 13:ot(t);break;case 19:U(on);break;case 10:rH(t.type);break;case 22:case 23:ot(t),lT(),null!==e&&U(r9);break;case 24:rH(rZ)}}function oX(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var l=r.next;n=l;do{if((n.tag&e)===e){r=void 0;var a=n.create;n.inst.destroy=r=a()}n=n.next}while(n!==l)}}catch(e){uP(t,t.return,e)}}function oY(e,t,n){try{var r=t.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,l=t;try{i()}catch(e){uP(l,n,e)}}}r=r.next}while(r!==a)}}catch(e){uP(t,t.return,e)}}function oJ(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{lx(t,n)}catch(t){uP(e,e.return,t)}}}function oZ(e,t,n){n.props=ou(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){uP(e,t,n)}}function o0(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){uP(e,t,n)}}function o1(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){uP(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){uP(e,t,n)}else n.current=null}function o2(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){uP(e,e.return,t)}}function o3(e,t,n){try{var r=e.stateNode;(function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var l=null,a=null,o=null,u=null,s=null,c=null,f=null;for(m in n){var d=n[m];if(n.hasOwnProperty(m)&&null!=d)switch(m){case"checked":case"value":break;case"defaultValue":s=d;default:r.hasOwnProperty(m)||sl(e,t,m,null,r,d)}}for(var p in r){var m=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case"type":a=m;break;case"name":l=m;break;case"checked":c=m;break;case"defaultChecked":f=m;break;case"value":o=m;break;case"defaultValue":u=m;break;case"children":case"dangerouslySetInnerHTML":if(null!=m)throw Error(i(137,t));break;default:m!==d&&sl(e,t,p,m,r,d)}}tn(e,o,u,s,c,f,a,l);return;case"select":for(a in m=o=u=p=null,n)if(s=n[a],n.hasOwnProperty(a)&&null!=s)switch(a){case"value":break;case"multiple":m=s;default:r.hasOwnProperty(a)||sl(e,t,a,null,r,s)}for(l in r)if(a=r[l],s=n[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case"value":p=a;break;case"defaultValue":u=a;break;case"multiple":o=a;default:a!==s&&sl(e,t,l,a,r,s)}t=u,n=o,r=m,null!=p?ta(e,!!n,p,!1):!!r!=!!n&&(null!=t?ta(e,!!n,t,!0):ta(e,!!n,n?[]:"",!1));return;case"textarea":for(u in m=p=null,n)if(l=n[u],n.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:sl(e,t,u,null,r,l)}for(o in r)if(l=r[o],a=n[o],r.hasOwnProperty(o)&&(null!=l||null!=a))switch(o){case"value":p=l;break;case"defaultValue":m=l;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=l)throw Error(i(91));break;default:l!==a&&sl(e,t,o,l,r,a)}to(e,p,m);return;case"option":for(var h in n)p=n[h],n.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&("selected"===h?e.selected=!1:sl(e,t,h,null,r,p));for(s in r)p=r[s],m=n[s],r.hasOwnProperty(s)&&p!==m&&(null!=p||null!=m)&&("selected"===s?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:sl(e,t,s,p,r,m));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&sl(e,t,g,null,r,p);for(c in r)if(p=r[c],m=n[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(i(137,t));break;default:sl(e,t,c,p,r,m)}return;default:if(td(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&sa(e,t,y,void 0,r,p);for(f in r)p=r[f],m=n[f],r.hasOwnProperty(f)&&p!==m&&(void 0!==p||void 0!==m)&&sa(e,t,f,p,r,m);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&sl(e,t,v,null,r,p);for(d in r)p=r[d],m=n[d],r.hasOwnProperty(d)&&p!==m&&(null!=p||null!=m)&&sl(e,t,d,p,r,m)})(r,e.type,n,t),r[eL]=t}catch(t){uP(e,e.return,t)}}function o4(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&sb(e.type)||4===e.tag}function o8(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||o4(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&sb(e.type)||2&e.flags||null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function o6(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&sb(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(o6(e,t,n),e=e.sibling;null!==e;)o6(e,t,n),e=e.sibling}function o5(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,l=t.attributes;l.length;)t.removeAttributeNode(l[0]);so(t,r,n),t[eO]=e,t[eL]=n}catch(t){uP(e,e.return,t)}}var o9=!1,o7=!1,ie=!1,it="function"==typeof WeakSet?WeakSet:Set,ir=null;function il(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:ig(e,n),4&r&&oX(5,n);break;case 1:if(ig(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){uP(n,n.return,e)}else{var l=ou(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(l,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){uP(n,n.return,e)}}64&r&&oJ(n),512&r&&o0(n,n.return);break;case 3:if(ig(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{lx(e,t)}catch(e){uP(n,n.return,e)}}break;case 27:null===t&&4&r&&o5(n);case 26:case 5:ig(e,n),null===t&&4&r&&o2(n),512&r&&o0(n,n.return);break;case 12:default:ig(e,n);break;case 13:ig(e,n),4&r&&is(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=uz.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||o9)){t=null!==t&&null!==t.memoizedState||o7,l=o9;var a=o7;o9=r,(o7=t)&&!a?function e(t,n,r){for(r=r&&0!=(8772&n.subtreeFlags),n=n.child;null!==n;){var l=n.alternate,a=t,o=n,i=o.flags;switch(o.tag){case 0:case 11:case 15:e(a,o,r),oX(4,o);break;case 1:if(e(a,o,r),"function"==typeof(a=(l=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){uP(l,l.return,e)}if(null!==(a=(l=o).updateQueue)){var u=l.stateNode;try{var s=a.shared.hiddenCallbacks;if(null!==s)for(a.shared.hiddenCallbacks=null,a=0;a<s.length;a++)lS(s[a],u)}catch(e){uP(l,l.return,e)}}r&&64&i&&oJ(o),o0(o,o.return);break;case 27:o5(o);case 26:case 5:e(a,o,r),r&&null===l&&4&i&&o2(o),o0(o,o.return);break;case 12:default:e(a,o,r);break;case 13:e(a,o,r),r&&4&i&&is(a,o);break;case 22:null===o.memoizedState&&e(a,o,r),o0(o,o.return);case 30:}n=n.sibling}}(e,n,0!=(8772&n.subtreeFlags)):ig(e,n),o9=l,o7=a}case 30:}}var ia=null,io=!1;function ii(e,t,n){for(n=n.child;null!==n;)iu(e,t,n),n=n.sibling}function iu(e,t,n){if(ef&&"function"==typeof ef.onCommitFiberUnmount)try{ef.onCommitFiberUnmount(ec,n)}catch(e){}switch(n.tag){case 26:o7||o1(n,t),ii(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:o7||o1(n,t);var r=ia,l=io;sb(n.type)&&(ia=n.stateNode,io=!1),ii(e,t,n),s_(n.stateNode),ia=r,io=l;break;case 5:o7||o1(n,t);case 6:if(r=ia,l=io,ia=null,ii(e,t,n),ia=r,io=l,null!==ia)if(io)try{(9===ia.nodeType?ia.body:"HTML"===ia.nodeName?ia.ownerDocument.body:ia).removeChild(n.stateNode)}catch(e){uP(n,t,e)}else try{ia.removeChild(n.stateNode)}catch(e){uP(n,t,e)}break;case 18:null!==ia&&(io?(sk(9===(e=ia).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),cx(e)):sk(ia,n.stateNode));break;case 4:r=ia,l=io,ia=n.stateNode.containerInfo,io=!0,ii(e,t,n),ia=r,io=l;break;case 0:case 11:case 14:case 15:o7||oY(2,n,t),o7||oY(4,n,t),ii(e,t,n);break;case 1:o7||(o1(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&oZ(n,t,r)),ii(e,t,n);break;case 21:default:ii(e,t,n);break;case 22:o7=(r=o7)||null!==n.memoizedState,ii(e,t,n),o7=r}}function is(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{cx(e)}catch(e){uP(t,t.return,e)}}function ic(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new it),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new it),t;default:throw Error(i(435,e.tag))}}(e);t.forEach(function(t){var r=uO.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}function id(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var l=n[r],a=e,o=t,u=o;e:for(;null!==u;){switch(u.tag){case 27:if(sb(u.type)){ia=u.stateNode,io=!1;break e}break;case 5:ia=u.stateNode,io=!1;break e;case 3:case 4:ia=u.stateNode.containerInfo,io=!0;break e}u=u.return}if(null===ia)throw Error(i(160));iu(a,o,l),ia=null,io=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)im(t,e),t=t.sibling}var ip=null;function im(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:id(t,e),ih(e),4&r&&(oY(3,e,e.return),oX(3,e),oY(5,e,e.return));break;case 1:id(t,e),ih(e),512&r&&(o7||null===n||o1(n,n.return)),64&r&&o9&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var l=ip;if(id(t,e),ih(e),512&r&&(o7||null===n||o1(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,l=l.ownerDocument||l;t:switch(r){case"title":(!(a=l.getElementsByTagName("title")[0])||a[eF]||a[eO]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector("head > title"))),so(a,r,n),a[eO]=e,eV(a),r=a;break e;case"link":var o=sQ("link","href",l).get(r+(n.href||""));if(o){for(var u=0;u<o.length;u++)if((a=o[u]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){o.splice(u,1);break t}}so(a=l.createElement(r),r,n),l.head.appendChild(a);break;case"meta":if(o=sQ("meta","content",l).get(r+(n.content||""))){for(u=0;u<o.length;u++)if((a=o[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){o.splice(u,1);break t}}so(a=l.createElement(r),r,n),l.head.appendChild(a);break;default:throw Error(i(468,r))}a[eO]=e,eV(a),r=a}e.stateNode=r}else sW(l,e.type,e.stateNode);else e.stateNode=sU(l,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?sW(l,e.type,e.stateNode):sU(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&o3(e,e.memoizedProps,n.memoizedProps)}break;case 27:id(t,e),ih(e),512&r&&(o7||null===n||o1(n,n.return)),null!==n&&4&r&&o3(e,e.memoizedProps,n.memoizedProps);break;case 5:if(id(t,e),ih(e),512&r&&(o7||null===n||o1(n,n.return)),32&e.flags){l=e.stateNode;try{tu(l,"")}catch(t){uP(e,e.return,t)}}4&r&&null!=e.stateNode&&(l=e.memoizedProps,o3(e,l,null!==n?n.memoizedProps:l)),1024&r&&(ie=!0);break;case 6:if(id(t,e),ih(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){uP(e,e.return,t)}}break;case 3:if(sV=null,l=ip,ip=sz(t.containerInfo),id(t,e),ip=l,ih(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{cx(t.containerInfo)}catch(t){uP(e,e.return,t)}ie&&(ie=!1,function e(t){if(1024&t.subtreeFlags)for(t=t.child;null!==t;){var n=t;e(n),5===n.tag&&1024&n.flags&&n.stateNode.reset(),t=t.sibling}}(e));break;case 4:r=ip,ip=sz(e.stateNode.containerInfo),id(t,e),ih(e),ip=r;break;case 12:default:id(t,e),ih(e);break;case 13:id(t,e),ih(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(iX=et()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,ic(e,r));break;case 22:l=null!==e.memoizedState;var s=null!==n&&null!==n.memoizedState,c=o9,f=o7;if(o9=c||l,o7=f||s,id(t,e),o7=f,o9=c,ih(e),8192&r)e:for((t=e.stateNode)._visibility=l?-2&t._visibility:1|t._visibility,l&&(null===n||s||o9||o7||function e(t){for(t=t.child;null!==t;){var n=t;switch(n.tag){case 0:case 11:case 14:case 15:oY(4,n,n.return),e(n);break;case 1:o1(n,n.return);var r=n.stateNode;"function"==typeof r.componentWillUnmount&&oZ(n,n.return,r),e(n);break;case 27:s_(n.stateNode);case 26:case 5:o1(n,n.return),e(n);break;case 22:null===n.memoizedState&&e(n);break;default:e(n)}t=t.sibling}}(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){s=n=t;try{if(a=s.stateNode,l)o=a.style,"function"==typeof o.setProperty?o.setProperty("display","none","important"):o.display="none";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty("display")?d.display:null;u.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){uP(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=l?"":s.memoizedProps}catch(e){uP(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,ic(e,n));break;case 19:id(t,e),ih(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,ic(e,r));case 30:case 21:}}function ih(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(o4(r)){n=r;break}r=r.return}if(null==n)throw Error(i(160));switch(n.tag){case 27:var l=n.stateNode,a=o8(e);o6(e,a,l);break;case 5:var o=n.stateNode;32&n.flags&&(tu(o,""),n.flags&=-33);var u=o8(e);o6(e,u,o);break;case 3:case 4:var s=n.stateNode.containerInfo,c=o8(e);!function e(t,n,r){var l=t.tag;if(5===l||6===l)t=t.stateNode,n?(9===r.nodeType?r.body:"HTML"===r.nodeName?r.ownerDocument.body:r).insertBefore(t,n):((n=9===r.nodeType?r.body:"HTML"===r.nodeName?r.ownerDocument.body:r).appendChild(t),null!=(r=r._reactRootContainer)||null!==n.onclick||(n.onclick=sr));else if(4!==l&&(27===l&&sb(t.type)&&(r=t.stateNode,n=null),null!==(t=t.child)))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,c,s);break;default:throw Error(i(161))}}catch(t){uP(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ig(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)il(e,t.alternate,t),t=t.sibling}function iy(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&r1(n))}function iv(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&r1(e))}function ib(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)ik(e,t,n,r),t=t.sibling}function ik(e,t,n,r){var l=t.flags;switch(t.tag){case 0:case 11:case 15:ib(e,t,n,r),2048&l&&oX(9,t);break;case 1:case 13:default:ib(e,t,n,r);break;case 3:ib(e,t,n,r),2048&l&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&r1(e)));break;case 12:if(2048&l){ib(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,o=a.id,i=a.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){uP(t,t.return,e)}}else ib(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,o=t.alternate,null!==t.memoizedState?2&a._visibility?ib(e,t,n,r):iw(e,t):2&a._visibility?ib(e,t,n,r):(a._visibility|=2,function e(t,n,r,l,a){for(a=a&&0!=(10256&n.subtreeFlags),n=n.child;null!==n;){var o=n,i=o.flags;switch(o.tag){case 0:case 11:case 15:e(t,o,r,l,a),oX(8,o);break;case 23:break;case 22:var u=o.stateNode;null!==o.memoizedState?2&u._visibility?e(t,o,r,l,a):iw(t,o):(u._visibility|=2,e(t,o,r,l,a)),a&&2048&i&&iy(o.alternate,o);break;case 24:e(t,o,r,l,a),a&&2048&i&&iv(o.alternate,o);break;default:e(t,o,r,l,a)}n=n.sibling}}(e,t,n,r,0!=(10256&t.subtreeFlags))),2048&l&&iy(o,t);break;case 24:ib(e,t,n,r),2048&l&&iv(t.alternate,t)}}function iw(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=t,r=n.flags;switch(n.tag){case 22:iw(e,n),2048&r&&iy(n.alternate,n);break;case 24:iw(e,n),2048&r&&iv(n.alternate,n);break;default:iw(e,n)}t=t.sibling}}var iS=8192;function ix(e){if(e.subtreeFlags&iS)for(e=e.child;null!==e;)iE(e),e=e.sibling}function iE(e){switch(e.tag){case 26:ix(e),e.flags&iS&&null!==e.memoizedState&&function(e,t,n){if(null===sG)throw Error(i(475));var r=sG;if("stylesheet"===t.type&&("string"!=typeof n.media||!1!==matchMedia(n.media).matches)&&0==(4&t.state.loading)){if(null===t.instance){var l=sR(n.href),a=e.querySelector(sD(l));if(a){null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=sX.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,eV(a);return}a=e.ownerDocument||e,n=sI(n),(l=sT.get(l))&&s$(n,l),eV(a=a.createElement("link"));var o=a;o._p=new Promise(function(e,t){o.onload=e,o.onerror=t}),so(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&0==(3&t.state.loading)&&(r.count++,t=sX.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(ip,e.memoizedState,e.memoizedProps);break;case 5:default:ix(e);break;case 3:case 4:var t=ip;ip=sz(e.stateNode.containerInfo),ix(e),ip=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=iS,iS=0x1000000,ix(e),iS=t):ix(e))}}function iC(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do t=e.sibling,e.sibling=null,e=t;while(null!==e)}}function iP(e){var t=e.deletions;if(0!=(16&e.flags)){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ir=r,iT(r,e)}iC(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)i_(e),e=e.sibling}function i_(e){switch(e.tag){case 0:case 11:case 15:iP(e),2048&e.flags&&oY(9,e,e.return);break;case 3:case 12:default:iP(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,function e(t){var n=t.deletions;if(0!=(16&t.flags)){if(null!==n)for(var r=0;r<n.length;r++){var l=n[r];ir=l,iT(l,t)}iC(t)}for(t=t.child;null!==t;){switch((n=t).tag){case 0:case 11:case 15:oY(8,n,n.return),e(n);break;case 22:2&(r=n.stateNode)._visibility&&(r._visibility&=-3,e(n));break;default:e(n)}t=t.sibling}}(e)):iP(e)}}function iT(e,t){for(;null!==ir;){var n=ir;switch(n.tag){case 0:case 11:case 15:oY(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:r1(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ir=r;else for(n=e;null!==ir;){var l=(r=ir).sibling,a=r.return;if(!function e(t){var n=t.alternate;null!==n&&(t.alternate=null,e(n)),t.child=null,t.deletions=null,t.sibling=null,5===t.tag&&null!==(n=t.stateNode)&&ej(n),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}(r),r===n){ir=null;break}if(null!==l){l.return=a,ir=l;break}ir=a}}}var iN={getCacheForType:function(e){var t=rq(rZ),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},iz="function"==typeof WeakMap?WeakMap:Map,iO=0,iL=null,iA=null,iM=0,iR=0,iD=null,iI=!1,iF=!1,ij=!1,iU=0,iH=0,i$=0,iB=0,iV=0,iQ=0,iW=0,iq=null,iG=null,iK=!1,iX=0,iY=1/0,iJ=null,iZ=null,i0=0,i1=null,i2=null,i3=0,i4=0,i8=null,i6=null,i5=0,i9=null;function i7(){if(0!=(2&iO)&&0!==iM)return iM&-iM;if(null!==M.T){var e=r4;return 0!==e?e:uQ()}return eN()}function ue(){0===iQ&&(iQ=0==(0x20000000&iM)||rP?ew():0x20000000);var e=a6.current;return null!==e&&(e.flags|=32),iQ}function ut(e,t,n){(e===iL&&(2===iR||9===iR)||null!==e.cancelPendingCommit)&&(ui(e,0),ul(e,iM,iQ,!1)),eE(e,n),(0==(2&iO)||e!==iL)&&(e===iL&&(0==(2&iO)&&(iB|=n),4===iH&&ul(e,iM,iQ,!1)),uF(e))}function un(e,t,n){if(0!=(6&iO))throw Error(i(327));for(var r=!n&&0==(124&t)&&0==(t&e.expiredLanes)||ek(e,t),l=r?function(e,t){var n=iO;iO|=2;var r=us(),l=uc();iL!==e||iM!==t?(iJ=null,iY=et()+500,ui(e,t)):iF=ek(e,t);e:for(;;)try{if(0!==iR&&null!==iA){t=iA;var a=iD;t:switch(iR){case 1:iR=0,iD=null,uh(e,t,a,1);break;case 2:case 9:if(lo(a)){iR=0,iD=null,um(t);break}t=function(){2!==iR&&9!==iR||iL!==e||(iR=7),uF(e)},a.then(t,t);break e;case 3:iR=7;break e;case 4:iR=5;break e;case 7:lo(a)?(iR=0,iD=null,um(t)):(iR=0,iD=null,uh(e,t,a,7));break;case 5:var o=null;switch(iA.tag){case 26:o=iA.memoizedState;case 5:case 27:var u=iA;if(o?sq(o):1){iR=0,iD=null;var s=u.sibling;if(null!==s)iA=s;else{var c=u.return;null!==c?(iA=c,ug(c)):iA=null}break t}}iR=0,iD=null,uh(e,t,a,5);break;case 6:iR=0,iD=null,uh(e,t,a,6);break;case 8:uo(),iH=6;break e;default:throw Error(i(462))}}for(;null!==iA&&!Z();)up(iA);break}catch(t){uu(e,t)}return(rj=rF=null,M.H=r,M.A=l,iO=n,null!==iA)?0:(iL=null,iM=0,n8(),iH)}(e,t):ud(e,t,!0),a=r;;){if(0===l)iF&&!r&&ul(e,t,0,!1);else{if(n=e.current.alternate,a&&!function(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var l=n[r],a=l.getSnapshot;l=l.value;try{if(!n_(a(),l))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(n)){l=ud(e,t,!1),a=!1;continue}if(2===l){if(a=t,e.errorRecoveryDisabledLanes&a)var o=0;else o=0!=(o=-0x20000001&e.pendingLanes)?o:0x20000000&o?0x20000000:0;if(0!==o){t=o;e:{l=iq;var u=e.current.memoizedState.isDehydrated;if(u&&(ui(e,o).flags|=256),2!==(o=ud(e,o,!1))){if(ij&&!u){e.errorRecoveryDisabledLanes|=a,iB|=a,l=4;break e}a=iG,iG=l,null!==a&&(null===iG?iG=a:iG.push.apply(iG,a))}l=o}if(a=!1,2!==l)continue}}if(1===l){ui(e,0),ul(e,t,0,!0);break}e:{switch(r=e,a=l){case 0:case 1:throw Error(i(345));case 4:if((4194048&t)!==t)break;case 6:ul(r,t,iQ,!iI);break e;case 2:iG=null;break;case 3:case 5:break;default:throw Error(i(329))}if((0x3c00000&t)===t&&10<(l=iX+300-et())){if(ul(r,t,iQ,!iI),0!==eb(r,0,!0))break e;r.timeoutHandle=sm(ur.bind(null,r,n,iG,iJ,iK,t,iQ,iB,iW,iI,a,2,-0,0),l);break e}ur(r,n,iG,iJ,iK,t,iQ,iB,iW,iI,a,0,-0,0)}}break}uF(e)}function ur(e,t,n,r,l,a,o,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=t.subtreeFlags)||0x1002000==(0x1002000&d))&&(sG={stylesheets:null,count:0,unsuspend:sK},iE(t),null!==(d=function(){if(null===sG)throw Error(i(475));var e=sG;return e.stylesheets&&0===e.count&&sJ(e,e.stylesheets),0<e.count?function(t){var n=setTimeout(function(){if(e.stylesheets&&sJ(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}},6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}()))){e.cancelPendingCommit=d(uv.bind(null,e,t,a,n,r,l,o,u,s,f,1,p,m)),ul(e,a,o,!c);return}uv(e,t,a,n,r,l,o,u,s)}function ul(e,t,n,r){t&=~iV,t&=~iB,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var l=t;0<l;){var a=31-ep(l),o=1<<a;r[a]=-1,l&=~o}0!==n&&eC(e,n,t)}function ua(){return 0!=(6&iO)||(uj(0,!1),!1)}function uo(){if(null!==iA){if(0===iR)var e=iA.return;else e=iA,rj=rF=null,lG(e),aY=null,aJ=0,e=iA;for(;null!==e;)oK(e.alternate,e),e=e.return;iA=null}}function ui(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,sh(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),uo(),iL=e,iA=n=ra(e.current,null),iM=t,iR=0,iD=null,iI=!1,iF=ek(e,t),ij=!1,iW=iQ=iV=iB=i$=iH=0,iG=iq=null,iK=!1,0!=(8&t)&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var l=31-ep(r),a=1<<l;t|=e[l],r&=~a}return iU=t,n8(),n}function uu(e,t){lz=null,M.H=aq,t===ln||t===ll?(t=lc(),iR=3):t===lr?(t=lc(),iR=4):iR=t===ov?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,iD=t,null===iA&&(iH=1,op(e,n1(t,e.current)))}function us(){var e=M.H;return M.H=aq,null===e?aq:e}function uc(){var e=M.A;return M.A=iN,e}function uf(){iH=4,iI||(4194048&iM)!==iM&&null!==a6.current||(iF=!0),0==(0x7ffffff&i$)&&0==(0x7ffffff&iB)||null===iL||ul(iL,iM,iQ,!1)}function ud(e,t,n){var r=iO;iO|=2;var l=us(),a=uc();(iL!==e||iM!==t)&&(iJ=null,ui(e,t)),t=!1;var o=iH;e:for(;;)try{if(0!==iR&&null!==iA){var i=iA,u=iD;switch(iR){case 8:uo(),o=6;break e;case 3:case 2:case 9:case 6:null===a6.current&&(t=!0);var s=iR;if(iR=0,iD=null,uh(e,i,u,s),n&&iF){o=0;break e}break;default:s=iR,iR=0,iD=null,uh(e,i,u,s)}}(function(){for(;null!==iA;)up(iA)})(),o=iH;break}catch(t){uu(e,t)}return t&&e.shellSuspendCounter++,rj=rF=null,iO=r,M.H=l,M.A=a,null===iA&&(iL=null,iM=0,n8()),o}function up(e){var t=oB(e.alternate,e,iU);e.memoizedProps=e.pendingProps,null===t?ug(e):iA=t}function um(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=oT(n,t,t.pendingProps,t.type,void 0,iM);break;case 11:t=oT(n,t,t.pendingProps,t.type.render,t.ref,iM);break;case 5:lG(t);default:oK(n,t),t=oB(n,t=iA=ro(t,iU),iU)}e.memoizedProps=e.pendingProps,null===t?ug(e):iA=t}function uh(e,t,n,r){rj=rF=null,lG(t),aY=null,aJ=0;var l=t.return;try{if(function(e,t,n,r,l){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&rV(t,n,l,!0),null!==(n=a6.current)){switch(n.tag){case 13:return null===a5?uf():null===n.alternate&&0===iH&&(iH=3),n.flags&=-257,n.flags|=65536,n.lanes=l,r===la?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),u_(e,r,l)),!1;case 22:return n.flags|=65536,r===la?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),u_(e,r,l)),!1}throw Error(i(435,n.tag))}return u_(e,r,l),uf(),!1}if(rP)return null!==(t=a6.current)?(0==(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=l,r!==rN&&rD(n1(e=Error(i(422),{cause:r}),n))):(r!==rN&&rD(n1(t=Error(i(423),{cause:r}),n)),e=e.current.alternate,e.flags|=65536,l&=-l,e.lanes|=l,r=n1(r,n),l=oh(e.stateNode,r,l),lv(e,l),4!==iH&&(iH=2)),!1;var a=Error(i(520),{cause:r});if(a=n1(a,n),null===iq?iq=[a]:iq.push(a),4!==iH&&(iH=2),null===t)return!0;r=n1(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=l&-l,n.lanes|=e,e=oh(n.stateNode,r,e),lv(n,e),!1;case 1:if(t=n.type,a=n.stateNode,0==(128&n.flags)&&("function"==typeof t.getDerivedStateFromError||null!==a&&"function"==typeof a.componentDidCatch&&(null===iZ||!iZ.has(a))))return n.flags|=65536,l&=-l,n.lanes|=l,oy(l=og(l),e,n,r),lv(n,l),!1}n=n.return}while(null!==n)return!1}(e,l,t,n,iM)){iH=1,op(e,n1(n,e.current)),iA=null;return}}catch(t){if(null!==l)throw iA=l,t;iH=1,op(e,n1(n,e.current)),iA=null;return}32768&t.flags?(rP||1===r?e=!0:iF||0!=(0x20000000&iM)?e=!1:(iI=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=a6.current)&&13===r.tag&&(r.flags|=16384)),uy(t,e)):ug(t)}function ug(e){var t=e;do{if(0!=(32768&t.flags))return void uy(t,iI);e=t.return;var n=function(e,t,n){var r=t.pendingProps;switch(rx(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return oG(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),rH(rZ),q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(null===e||null===e.child)&&(rA(t)?oV(t):null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,rR())),oG(t),null;case 26:return n=t.memoizedState,null===e?(oV(t),null!==n?(oG(t),oQ(t,n)):(oG(t),t.flags&=-0x1000001)):n?n!==e.memoizedState?(oV(t),oG(t),oQ(t,n)):(oG(t),t.flags&=-0x1000001):(e.memoizedProps!==r&&oV(t),oG(t),t.flags&=-0x1000001),null;case 27:K(t),n=V.current;var l=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&oV(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return oG(t),null}e=$.current,rA(t)?rO(t,e):(e=sP(l,r,n),t.stateNode=e,oV(t))}return oG(t),null;case 5:if(K(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&oV(t);else{if(!r){if(null===t.stateNode)throw Error(i(166));return oG(t),null}if(e=$.current,rA(t))rO(t,e);else{switch(l=ss(V.current),e){case 1:e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=l.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=l.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?l.createElement("select",{is:r.is}):l.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?l.createElement(n,{is:r.is}):l.createElement(n)}}e[eO]=t,e[eL]=r;e:for(l=t.child;null!==l;){if(5===l.tag||6===l.tag)e.appendChild(l.stateNode);else if(4!==l.tag&&27!==l.tag&&null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)break;for(;null===l.sibling;){if(null===l.return||l.return===t)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}switch(t.stateNode=e,so(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break;case"img":e=!0;break;default:e=!1}e&&oV(t)}}return oG(t),t.flags&=-0x1000001,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&oV(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(e=V.current,rA(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(l=rE))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[eO]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||sn(e.nodeValue,n)))||rz(t)}else(e=ss(e).createTextNode(r))[eO]=t,t.stateNode=e}return oG(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=rA(t),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(i(318));if(!(l=null!==(l=t.memoizedState)?l.dehydrated:null))throw Error(i(317));l[eO]=t}else rM(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;oG(t),l=!1}else l=rR(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=l),l=!0;if(!l){if(256&t.flags)return ot(t),t;return ot(t),null}}if(ot(t),0!=(128&t.flags))return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){r=t.child,l=null,null!==r.alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),oW(t,t.updateQueue),oG(t),null;case 4:return q(),null===e&&u2(t.stateNode.containerInfo),oG(t),null;case 10:return rH(t.type),oG(t),null;case 19:if(U(on),null===(l=t.memoizedState))return oG(t),null;if(r=0!=(128&t.flags),null===(a=l.rendering))if(r)oq(l,!1);else{if(0!==iH||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(a=or(e))){for(t.flags|=128,oq(l,!1),e=a.updateQueue,t.updateQueue=e,oW(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)ro(n,e),n=n.sibling;return H(on,1&on.current|2),t.child}e=e.sibling}null!==l.tail&&et()>iY&&(t.flags|=128,r=!0,oq(l,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=or(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,oW(t,e),oq(l,!0),null===l.tail&&"hidden"===l.tailMode&&!a.alternate&&!rP)return oG(t),null}else 2*et()-l.renderingStartTime>iY&&0x20000000!==n&&(t.flags|=128,r=!0,oq(l,!1),t.lanes=4194304);l.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=l.last)?e.sibling=a:t.child=a,l.last=a)}if(null!==l.tail)return t=l.tail,l.rendering=t,l.tail=t.sibling,l.renderingStartTime=et(),t.sibling=null,e=on.current,H(on,r?1&e|2:1&e),t;return oG(t),null;case 22:case 23:return ot(t),lT(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?0!=(0x20000000&n)&&0==(128&t.flags)&&(oG(t),6&t.subtreeFlags&&(t.flags|=8192)):oG(t),null!==(n=t.updateQueue)&&oW(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&U(r9),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),rH(rZ),oG(t),null;case 25:case 30:return null}throw Error(i(156,t.tag))}(t.alternate,t,iU);if(null!==n){iA=n;return}if(null!==(t=t.sibling)){iA=t;return}iA=t=e}while(null!==t)0===iH&&(iH=5)}function uy(e,t){do{var n=function(e,t){switch(rx(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return rH(rZ),q(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return K(t),null;case 13:if(ot(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));rM()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return U(on),null;case 4:return q(),null;case 10:return rH(t.type),null;case 22:case 23:return ot(t),lT(),null!==e&&U(r9),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return rH(rZ),null;default:return null}}(e.alternate,e);if(null!==n){n.flags&=32767,iA=n;return}if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling)){iA=e;return}iA=e=n}while(null!==e)iH=6,iA=null}function uv(e,t,n,r,l,a,o,u,s){e.cancelPendingCommit=null;do ux();while(0!==i0)if(0!=(6&iO))throw Error(i(327));if(null!==t){if(t===e.current)throw Error(i(177));if(!function(e,t,n,r,l,a){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,s=e.hiddenUpdates;for(n=o&~n;0<n;){var c=31-ep(n),f=1<<c;i[c]=0,u[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-0x20000001)}n&=~f}0!==r&&eC(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~t))}(e,n,a=t.lanes|t.childLanes|n4,o,u,s),e===iL&&(iA=iL=null,iM=0),i2=t,i1=e,i3=n,i4=a,i8=l,i6=r,0!=(10256&t.subtreeFlags)||0!=(10256&t.flags)?(e.callbackNode=null,e.callbackPriority=0,Y(ea,function(){return uE(!0),null})):(e.callbackNode=null,e.callbackPriority=0),r=0!=(13878&t.flags),0!=(13878&t.subtreeFlags)||r){r=M.T,M.T=null,l=R.p,R.p=2,o=iO,iO|=4;try{!function(e,t){if(e=e.containerInfo,si=s9,nL(e=nO(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var l,a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var u=0,s=-1,c=-1,f=0,d=0,p=e,m=null;t:for(;;){for(;p!==n||0!==a&&3!==p.nodeType||(s=u+a),p!==o||0!==r&&3!==p.nodeType||(c=u+r),3===p.nodeType&&(u+=p.nodeValue.length),null!==(l=p.firstChild);)m=p,p=l;for(;;){if(p===e)break t;if(m===n&&++f===a&&(s=u),m===o&&++d===r&&(c=u),null!==(l=p.nextSibling))break;m=(p=m).parentNode}p=l}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(su={focusedElem:e,selectionRange:n},s9=!1,ir=t;null!==ir;)if(e=(t=ir).child,0!=(1024&t.subtreeFlags)&&null!==e)e.return=t,ir=e;else for(;null!==ir;){switch(o=(t=ir).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(0!=(1024&e)&&null!==o){e=void 0,n=t,a=o.memoizedProps,o=o.memoizedState,r=n.stateNode;try{var h=ou(n.type,a,n.elementType===n.type);e=r.getSnapshotBeforeUpdate(h,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){uP(n,n.return,e)}}break;case 3:if(0!=(1024&e)){if(9===(n=(e=t.stateNode.containerInfo).nodeType))sw(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":sw(e);break;default:e.textContent=""}}break;default:if(0!=(1024&e))throw Error(i(163))}if(null!==(e=t.sibling)){e.return=t.return,ir=e;break}ir=t.return}}(e,t,n)}finally{iO=o,R.p=l,M.T=r}}i0=1,ub(),uk(),uw()}}function ub(){if(1===i0){i0=0;var e=i1,t=i2,n=0!=(13878&t.flags);if(0!=(13878&t.subtreeFlags)||n){n=M.T,M.T=null;var r=R.p;R.p=2;var l=iO;iO|=4;try{im(t,e);var a=su,o=nO(e.containerInfo),i=a.focusedElem,u=a.selectionRange;if(o!==i&&i&&i.ownerDocument&&function e(t,n){return!!t&&!!n&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(i.ownerDocument.documentElement,i)){if(null!==u&&nL(i)){var s=u.start,c=u.end;if(void 0===c&&(c=s),"selectionStart"in i)i.selectionStart=s,i.selectionEnd=Math.min(c,i.value.length);else{var f=i.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=i.textContent.length,h=Math.min(u.start,m),g=void 0===u.end?h:Math.min(u.end,m);!p.extend&&h>g&&(o=g,g=h,h=o);var y=nz(i,h),v=nz(i,g);if(y&&v&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==v.node||p.focusOffset!==v.offset)){var b=f.createRange();b.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(b),p.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),p.addRange(b))}}}}for(f=[],p=i;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof i.focus&&i.focus(),i=0;i<f.length;i++){var k=f[i];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}s9=!!si,su=si=null}finally{iO=l,R.p=r,M.T=n}}e.current=t,i0=2}}function uk(){if(2===i0){i0=0;var e=i1,t=i2,n=0!=(8772&t.flags);if(0!=(8772&t.subtreeFlags)||n){n=M.T,M.T=null;var r=R.p;R.p=2;var l=iO;iO|=4;try{il(e,t.alternate,t)}finally{iO=l,R.p=r,M.T=n}}i0=3}}function uw(){if(4===i0||3===i0){i0=0,ee();var e=i1,t=i2,n=i3,r=i6;0!=(10256&t.subtreeFlags)||0!=(10256&t.flags)?i0=5:(i0=0,i2=i1=null,uS(e,e.pendingLanes));var l=e.pendingLanes;if(0===l&&(iZ=null),eT(n),t=t.stateNode,ef&&"function"==typeof ef.onCommitFiberRoot)try{ef.onCommitFiberRoot(ec,t,void 0,128==(128&t.current.flags))}catch(e){}if(null!==r){t=M.T,l=R.p,R.p=2,M.T=null;try{for(var a=e.onRecoverableError,o=0;o<r.length;o++){var i=r[o];a(i.value,{componentStack:i.stack})}}finally{M.T=t,R.p=l}}0!=(3&i3)&&ux(),uF(e),l=e.pendingLanes,0!=(4194090&n)&&0!=(42&l)?e===i9?i5++:(i5=0,i9=e):i5=0,uj(0,!1)}}function uS(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,r1(t))}function ux(e){return ub(),uk(),uw(),uE(e)}function uE(){if(5!==i0)return!1;var e=i1,t=i4;i4=0;var n=eT(i3),r=M.T,l=R.p;try{R.p=32>n?32:n,M.T=null,n=i8,i8=null;var a=i1,o=i3;if(i0=0,i2=i1=null,i3=0,0!=(6&iO))throw Error(i(331));var u=iO;if(iO|=4,i_(a.current),ik(a,a.current,o,n),iO=u,uj(0,!1),ef&&"function"==typeof ef.onPostCommitFiberRoot)try{ef.onPostCommitFiberRoot(ec,a)}catch(e){}return!0}finally{R.p=l,M.T=r,uS(e,t)}}function uC(e,t,n){t=n1(n,t),t=oh(e.stateNode,t,2),null!==(e=lg(e,t,2))&&(eE(e,2),uF(e))}function uP(e,t,n){if(3===e.tag)uC(e,e,n);else for(;null!==t;){if(3===t.tag){uC(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===iZ||!iZ.has(r))){e=n1(n,e),null!==(r=lg(t,n=og(2),2))&&(oy(n,r,t,e),eE(r,2),uF(r));break}}t=t.return}}function u_(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new iz;var l=new Set;r.set(t,l)}else void 0===(l=r.get(t))&&(l=new Set,r.set(t,l));l.has(n)||(ij=!0,l.add(n),e=uT.bind(null,e,t,n),t.then(e,e))}function uT(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,iL===e&&(iM&n)===n&&(4===iH||3===iH&&(0x3c00000&iM)===iM&&300>et()-iX?0==(2&iO)&&ui(e,0):iV|=n,iW===iM&&(iW=0)),uF(e)}function uN(e,t){0===t&&(t=eS()),null!==(e=n9(e,t))&&(eE(e,t),uF(e))}function uz(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),uN(e,n)}function uO(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(n=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(t),uN(e,n)}var uL=null,uA=null,uM=!1,uR=!1,uD=!1,uI=0;function uF(e){e!==uA&&null===e.next&&(null===uA?uL=uA=e:uA=uA.next=e),uR=!0,uM||(uM=!0,sy(function(){0!=(6&iO)?Y(er,uU):uH()}))}function uj(e,t){if(!uD&&uR){uD=!0;do for(var n=!1,r=uL;null!==r;){if(!t)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,i=r.pingedLanes;a=0xc000095&(a=(1<<31-ep(42|e)+1)-1&(l&~(o&~i)))?0xc000095&a|1:a?2|a:0}0!==a&&(n=!0,uV(r,a))}else a=iM,0==(3&(a=eb(r,r===iL?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||ek(r,a)||(n=!0,uV(r,a));r=r.next}while(n)uD=!1}}function uU(){uH()}function uH(){uR=uM=!1;var e,t=0;0!==uI&&(((e=window.event)&&"popstate"===e.type?e===sp||(sp=e,0):(sp=null,1))||(t=uI),uI=0);for(var n=et(),r=null,l=uL;null!==l;){var a=l.next,o=u$(l,n);0===o?(l.next=null,null===r?uL=a:r.next=a,null===a&&(uA=r)):(r=l,(0!==t||0!=(3&o))&&(uR=!0)),l=a}uj(t,!1)}function u$(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-0x3c00001&e.pendingLanes;0<a;){var o=31-ep(a),i=1<<o,u=l[o];-1===u?(0==(i&n)||0!=(i&r))&&(l[o]=function(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return -1}}(i,t)):u<=t&&(e.expiredLanes|=i),a&=~i}if(t=iL,n=iM,n=eb(e,e===t?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===iR||9===iR)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&J(r),e.callbackNode=null,e.callbackPriority=0;if(0==(3&n)||ek(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&J(r),eT(n)){case 2:case 8:n=el;break;case 32:default:n=ea;break;case 0x10000000:n=ei}return n=Y(n,r=uB.bind(null,e)),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&J(r),e.callbackPriority=2,e.callbackNode=null,2}function uB(e,t){if(0!==i0&&5!==i0)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(ux(!0)&&e.callbackNode!==n)return null;var r=iM;return 0===(r=eb(e,e===iL?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(un(e,r,t),u$(e,et()),null!=e.callbackNode&&e.callbackNode===n?uB.bind(null,e):null)}function uV(e,t){if(ux())return null;un(e,t,!0)}function uQ(){return 0===uI&&(uI=ew()),uI}function uW(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:th(""+e)}function uq(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var uG=0;uG<nJ.length;uG++){var uK=nJ[uG];nZ(uK.toLowerCase(),"on"+(uK[0].toUpperCase()+uK.slice(1)))}nZ(nV,"onAnimationEnd"),nZ(nQ,"onAnimationIteration"),nZ(nW,"onAnimationStart"),nZ("dblclick","onDoubleClick"),nZ("focusin","onFocus"),nZ("focusout","onBlur"),nZ(nq,"onTransitionRun"),nZ(nG,"onTransitionStart"),nZ(nK,"onTransitionCancel"),nZ(nX,"onTransitionEnd"),eG("onMouseEnter",["mouseout","mouseover"]),eG("onMouseLeave",["mouseout","mouseover"]),eG("onPointerEnter",["pointerout","pointerover"]),eG("onPointerLeave",["pointerout","pointerover"]),eq("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),eq("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),eq("onBeforeInput",["compositionend","keypress","textInput","paste"]),eq("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),eq("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),eq("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var uX="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),uY=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(uX));function uJ(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,s=i.currentTarget;if(i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){os(e)}l.currentTarget=null,a=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,s=i.currentTarget,i=i.listener,u!==a&&l.isPropagationStopped())break e;a=i,l.currentTarget=s;try{a(l)}catch(e){os(e)}l.currentTarget=null,a=u}}}}function uZ(e,t){var n=t[eM];void 0===n&&(n=t[eM]=new Set);var r=e+"__bubble";n.has(r)||(u3(t,e,2,!1),n.add(r))}function u0(e,t,n){var r=0;t&&(r|=4),u3(n,e,r,t)}var u1="_reactListening"+Math.random().toString(36).slice(2);function u2(e){if(!e[u1]){e[u1]=!0,eQ.forEach(function(t){"selectionchange"!==t&&(uY.has(t)||u0(t,!1,e),u0(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[u1]||(t[u1]=!0,u0("selectionchange",!1,t))}}function u3(e,t,n,r){switch(ca(t)){case 2:var l=s7;break;case 8:l=ce;break;default:l=ct}n=l.bind(null,t,n,e),l=void 0,tC&&("touchstart"===t||"touchmove"===t||"wheel"===t)&&(l=!0),r?void 0!==l?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):void 0!==l?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function u4(e,t,n,r,l){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===l)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&o.stateNode.containerInfo===l)return;o=o.return}for(;null!==i;){if(null===(o=eU(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=a=o;continue e}i=i.parentNode}}r=r.return}tS(function(){var r=a,l=ty(n),o=[];e:{var i=nY.get(e);if(void 0!==i){var u=tV,s=e;switch(e){case"keypress":if(0===tO(n))break e;case"keydown":case"keyup":u=t8;break;case"focusin":s="focus",u=tX;break;case"focusout":s="blur",u=tX;break;case"beforeblur":case"afterblur":u=tX;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=tG;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=tK;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=t5;break;case nV:case nQ:case nW:u=tY;break;case nX:u=t9;break;case"scroll":case"scrollend":u=tW;break;case"wheel":u=t7;break;case"copy":case"cut":case"paste":u=tJ;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=t6;break;case"toggle":case"beforetoggle":u=ne}var f=0!=(4&t),d=!f&&("scroll"===e||"scrollend"===e),p=f?null!==i?i+"Capture":null:i;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=tx(h,p))&&f.push(u8(h,g,m)),d)break;h=h.return}0<f.length&&(i=new u(i,s,null,n,l),o.push({event:i,listeners:f}))}}if(0==(7&t)){if((i="mouseover"===e||"pointerover"===e,u="mouseout"===e||"pointerout"===e,!(i&&n!==tg&&(s=n.relatedTarget||n.fromElement)&&(eU(s)||s[eA])))&&(u||i)&&(i=l.window===l?l:(i=l.ownerDocument)?i.defaultView||i.parentWindow:window,u?(s=n.relatedTarget||n.toElement,u=r,null!==(s=s?eU(s):null)&&(d=c(s),f=s.tag,s!==d||5!==f&&27!==f&&6!==f)&&(s=null)):(u=null,s=r),u!==s)){if(f=tG,g="onMouseLeave",p="onMouseEnter",h="mouse",("pointerout"===e||"pointerover"===e)&&(f=t6,g="onPointerLeave",p="onPointerEnter",h="pointer"),d=null==u?i:e$(u),m=null==s?i:e$(s),(i=new f(g,h+"leave",u,n,l)).target=d,i.relatedTarget=m,g=null,eU(l)===r&&((f=new f(p,h+"enter",s,n,l)).target=m,f.relatedTarget=d,g=f),d=g,u&&s)t:{for(f=u,p=s,h=0,m=f;m;m=u5(m))h++;for(m=0,g=p;g;g=u5(g))m++;for(;0<h-m;)f=u5(f),h--;for(;0<m-h;)p=u5(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break t;f=u5(f),p=u5(p)}f=null}else f=null;null!==u&&u9(o,i,u,f,!1),null!==s&&null!==d&&u9(o,d,s,f,!0)}e:{if("select"===(u=(i=r?e$(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var y,v=ny;else if(nf(i))if(nv)v=nP;else{v=nE;var b=nx}else(u=i.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)?v=nC:r&&td(r.elementType)&&(v=ny);if(v&&(v=v(e,r))){nd(o,v,n,l);break e}b&&b(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&tl(i,"number",i.value)}switch(b=r?e$(r):window,e){case"focusin":(nf(b)||"true"===b.contentEditable)&&(nM=b,nR=r,nD=null);break;case"focusout":nD=nR=nM=null;break;case"mousedown":nI=!0;break;case"contextmenu":case"mouseup":case"dragend":nI=!1,nF(o,n,l);break;case"selectionchange":if(nA)break;case"keydown":case"keyup":nF(o,n,l)}if(nn)t:{switch(e){case"compositionstart":var k="onCompositionStart";break t;case"compositionend":k="onCompositionEnd";break t;case"compositionupdate":k="onCompositionUpdate";break t}k=void 0}else ns?ni(e,n)&&(k="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(k="onCompositionStart");k&&(na&&"ko"!==n.locale&&(ns||"onCompositionStart"!==k?"onCompositionEnd"===k&&ns&&(y=tz()):(tT="value"in(t_=l)?t_.value:t_.textContent,ns=!0)),0<(b=u6(r,k)).length&&(k=new tZ(k,e,null,n,l),o.push({event:k,listeners:b}),y?k.data=y:null!==(y=nu(n))&&(k.data=y))),(y=nl?function(e,t){switch(e){case"compositionend":return nu(t);case"keypress":if(32!==t.which)return null;return no=!0," ";case"textInput":return" "===(e=t.data)&&no?null:e;default:return null}}(e,n):function(e,t){if(ns)return"compositionend"===e||!nn&&ni(e,t)?(e=tz(),tN=tT=t_=null,ns=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return na&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(k=u6(r,"onBeforeInput")).length&&(b=new tZ("onBeforeInput","beforeinput",null,n,l),o.push({event:b,listeners:k}),b.data=y);var w=e;if("submit"===w&&r&&r.stateNode===l){var S=uW((l[eL]||null).action),x=n.submitter;x&&null!==(w=(w=x[eL]||null)?uW(w.formAction):x.getAttribute("formAction"))&&(S=w,x=null);var E=new tV("action","action",null,n,l);o.push({event:E,listeners:[{instance:null,listener:function(){if(n.defaultPrevented){if(0!==uI){var e=x?uq(l,x):new FormData(l);aA(r,{pending:!0,data:e,method:l.method,action:S},null,e)}}else"function"==typeof S&&(E.preventDefault(),aA(r,{pending:!0,data:e=x?uq(l,x):new FormData(l),method:l.method,action:S},S,e))},currentTarget:l}]})}}uJ(o,t)})}function u8(e,t,n){return{instance:e,listener:t,currentTarget:n}}function u6(e,t){for(var n=t+"Capture",r=[];null!==e;){var l=e,a=l.stateNode;if(5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=tx(e,n))&&r.unshift(u8(e,l,a)),null!=(l=tx(e,t))&&r.push(u8(e,l,a))),3===e.tag)return r;e=e.return}return[]}function u5(e){if(null===e)return null;do e=e.return;while(e&&5!==e.tag&&27!==e.tag)return e||null}function u9(e,t,n,r,l){for(var a=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,s=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===s||(u=s,l?null!=(s=tx(n,a))&&o.unshift(u8(n,s,u)):l||null!=(s=tx(n,a))&&o.push(u8(n,s,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var u7=/\r\n?/g,se=/\u0000|\uFFFD/g;function st(e){return("string"==typeof e?e:""+e).replace(u7,"\n").replace(se,"")}function sn(e,t){return t=st(t),st(e)===t}function sr(){}function sl(e,t,n,r,l,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||tu(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&tu(e,""+r);break;case"className":eZ(e,"class",r);break;case"tabIndex":eZ(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":eZ(e,n,r);break;case"style":tf(e,r,a);break;case"data":if("object"!==t){eZ(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)||null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=th(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&sl(e,t,"name",l.name,l,null),sl(e,t,"formEncType",l.formEncType,l,null),sl(e,t,"formMethod",l.formMethod,l,null),sl(e,t,"formTarget",l.formTarget,l,null)):(sl(e,t,"encType",l.encType,l,null),sl(e,t,"method",l.method,l,null),sl(e,t,"target",l.target,l,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=th(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=sr);break;case"onScroll":null!=r&&uZ("scroll",e);break;case"onScrollEnd":null!=r&&uZ("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(i(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":case"innerText":case"textContent":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=th(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":uZ("beforetoggle",e),uZ("toggle",e),eJ(e,"popover",r);break;case"xlinkActuate":e0(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":e0(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":e0(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":e0(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":e0(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":e0(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":e0(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":e0(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":e0(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":eJ(e,"is",r);break;default:2<n.length&&("o"===n[0]||"O"===n[0])&&("n"===n[1]||"N"===n[1])||eJ(e,n=tp.get(n)||n,r)}}function sa(e,t,n,r,l,a){switch(n){case"style":tf(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(i(61));if(null!=(n=r.__html)){if(null!=l.children)throw Error(i(60));e.innerHTML=n}}break;case"children":"string"==typeof r?tu(e,r):("number"==typeof r||"bigint"==typeof r)&&tu(e,""+r);break;case"onScroll":null!=r&&uZ("scroll",e);break;case"onScrollEnd":null!=r&&uZ("scrollend",e);break;case"onClick":null!=r&&(e.onclick=sr);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:if(!eW.hasOwnProperty(n))e:{if("o"===n[0]&&"n"===n[1]&&(l=n.endsWith("Capture"),t=n.slice(2,l?n.length-7:void 0),"function"==typeof(a=null!=(a=e[eL]||null)?a[n]:null)&&e.removeEventListener(t,a,l),"function"==typeof r)){"function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,l);break e}n in e?e[n]=r:!0===r?e.setAttribute(n,""):eJ(e,n,r)}}}function so(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":uZ("error",e),uZ("load",e);var r,l=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var o=n[r];if(null!=o)switch(r){case"src":l=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:sl(e,t,r,o,n,null)}}a&&sl(e,t,"srcSet",n.srcSet,n,null),l&&sl(e,t,"src",n.src,n,null);return;case"input":uZ("invalid",e);var u=r=o=a=null,s=null,c=null;for(l in n)if(n.hasOwnProperty(l)){var f=n[l];if(null!=f)switch(l){case"name":a=f;break;case"type":o=f;break;case"checked":s=f;break;case"defaultChecked":c=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(i(137,t));break;default:sl(e,t,l,f,n,null)}}tr(e,r,u,s,c,o,a,!1),e5(e);return;case"select":for(a in uZ("invalid",e),l=o=r=null,n)if(n.hasOwnProperty(a)&&null!=(u=n[a]))switch(a){case"value":r=u;break;case"defaultValue":o=u;break;case"multiple":l=u;default:sl(e,t,a,u,n,null)}t=r,n=o,e.multiple=!!l,null!=t?ta(e,!!l,t,!1):null!=n&&ta(e,!!l,n,!0);return;case"textarea":for(o in uZ("invalid",e),r=a=l=null,n)if(n.hasOwnProperty(o)&&null!=(u=n[o]))switch(o){case"value":l=u;break;case"defaultValue":a=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(i(91));break;default:sl(e,t,o,u,n,null)}ti(e,l,a,r),e5(e);return;case"option":for(s in n)n.hasOwnProperty(s)&&null!=(l=n[s])&&("selected"===s?e.selected=l&&"function"!=typeof l&&"symbol"!=typeof l:sl(e,t,s,l,n,null));return;case"dialog":uZ("beforetoggle",e),uZ("toggle",e),uZ("cancel",e),uZ("close",e);break;case"iframe":case"object":uZ("load",e);break;case"video":case"audio":for(l=0;l<uX.length;l++)uZ(uX[l],e);break;case"image":uZ("error",e),uZ("load",e);break;case"details":uZ("toggle",e);break;case"embed":case"source":case"link":uZ("error",e),uZ("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(l=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(i(137,t));default:sl(e,t,c,l,n,null)}return;default:if(td(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(l=n[f])&&sa(e,t,f,l,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(l=n[u])&&sl(e,t,u,l,n,null)}var si=null,su=null;function ss(e){return 9===e.nodeType?e:e.ownerDocument}function sc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function sf(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function sd(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var sp=null,sm="function"==typeof setTimeout?setTimeout:void 0,sh="function"==typeof clearTimeout?clearTimeout:void 0,sg="function"==typeof Promise?Promise:void 0,sy="function"==typeof queueMicrotask?queueMicrotask:void 0!==sg?function(e){return sg.resolve(null).then(e).catch(sv)}:sm;function sv(e){setTimeout(function(){throw e})}function sb(e){return"head"===e}function sk(e,t){var n=t,r=0,l=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var o=e.ownerDocument;if(1&n&&s_(o.documentElement),2&n&&s_(o.body),4&n)for(s_(n=o.head),o=n.firstChild;o;){var i=o.nextSibling,u=o.nodeName;o[eF]||"SCRIPT"===u||"STYLE"===u||"LINK"===u&&"stylesheet"===o.rel.toLowerCase()||n.removeChild(o),o=i}}if(0===l){e.removeChild(a),cx(t);return}l--}else"$"===n||"$?"===n||"$!"===n?l++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n)cx(t)}function sw(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":sw(n),ej(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function sS(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function sx(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var sE=null;function sC(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function sP(e,t,n){switch(t=ss(n),e){case"html":if(!(e=t.documentElement))throw Error(i(452));return e;case"head":if(!(e=t.head))throw Error(i(453));return e;case"body":if(!(e=t.body))throw Error(i(454));return e;default:throw Error(i(451))}}function s_(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);ej(e)}var sT=new Map,sN=new Set;function sz(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var sO=R.d;R.d={f:function(){var e=sO.f(),t=ua();return e||t},r:function(e){var t=eH(e);null!==t&&5===t.tag&&"form"===t.type?aR(t):sO.r(e)},D:function(e){sO.D(e),sA("dns-prefetch",e,null)},C:function(e,t){sO.C(e,t),sA("preconnect",e,t)},L:function(e,t,n){if(sO.L(e,t,n),sL&&e&&t){var r='link[rel="preload"][as="'+tt(t)+'"]';"image"===t&&n&&n.imageSrcSet?(r+='[imagesrcset="'+tt(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(r+='[imagesizes="'+tt(n.imageSizes)+'"]')):r+='[href="'+tt(e)+'"]';var l=r;switch(t){case"style":l=sR(e);break;case"script":l=sF(e)}sT.has(l)||(e=p({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),sT.set(l,e),null!==sL.querySelector(r)||"style"===t&&sL.querySelector(sD(l))||"script"===t&&sL.querySelector(sj(l))||(so(t=sL.createElement("link"),"link",e),eV(t),sL.head.appendChild(t)))}},m:function(e,t){if(sO.m(e,t),sL&&e){var n=t&&"string"==typeof t.as?t.as:"script",r='link[rel="modulepreload"][as="'+tt(n)+'"][href="'+tt(e)+'"]',l=r;switch(n){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=sF(e)}if(!sT.has(l)&&(e=p({rel:"modulepreload",href:e},t),sT.set(l,e),null===sL.querySelector(r))){switch(n){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(sL.querySelector(sj(l)))return}so(n=sL.createElement("link"),"link",e),eV(n),sL.head.appendChild(n)}}},X:function(e,t){if(sO.X(e,t),sL&&e){var n=eB(sL).hoistableScripts,r=sF(e),l=n.get(r);l||((l=sL.querySelector(sj(r)))||(e=p({src:e,async:!0},t),(t=sT.get(r))&&sB(e,t),eV(l=sL.createElement("script")),so(l,"link",e),sL.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},n.set(r,l))}},S:function(e,t,n){if(sO.S(e,t,n),sL&&e){var r=eB(sL).hoistableStyles,l=sR(e);t=t||"default";var a=r.get(l);if(!a){var o={loading:0,preload:null};if(a=sL.querySelector(sD(l)))o.loading=5;else{e=p({rel:"stylesheet",href:e,"data-precedence":t},n),(n=sT.get(l))&&s$(e,n);var i=a=sL.createElement("link");eV(i),so(i,"link",e),i._p=new Promise(function(e,t){i.onload=e,i.onerror=t}),i.addEventListener("load",function(){o.loading|=1}),i.addEventListener("error",function(){o.loading|=2}),o.loading|=4,sH(a,t,sL)}a={type:"stylesheet",instance:a,count:1,state:o},r.set(l,a)}}},M:function(e,t){if(sO.M(e,t),sL&&e){var n=eB(sL).hoistableScripts,r=sF(e),l=n.get(r);l||((l=sL.querySelector(sj(r)))||(e=p({src:e,async:!0,type:"module"},t),(t=sT.get(r))&&sB(e,t),eV(l=sL.createElement("script")),so(l,"link",e),sL.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},n.set(r,l))}}};var sL="undefined"==typeof document?null:document;function sA(e,t,n){if(sL&&"string"==typeof t&&t){var r=tt(t);r='link[rel="'+e+'"][href="'+r+'"]',"string"==typeof n&&(r+='[crossorigin="'+n+'"]'),sN.has(r)||(sN.add(r),e={rel:e,crossOrigin:n,href:t},null===sL.querySelector(r)&&(so(t=sL.createElement("link"),"link",e),eV(t),sL.head.appendChild(t)))}}function sM(e,t,n,r){var l=(l=V.current)?sz(l):null;if(!l)throw Error(i(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=sR(n.href),(r=(n=eB(l).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=sR(n.href);var a,o,u,s,c=eB(l).hoistableStyles,f=c.get(e);if(f||(l=l.ownerDocument||l,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=l.querySelector(sD(e)))&&!c._p&&(f.instance=c,f.state.loading=5),sT.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},sT.set(e,n),c||(a=l,o=e,u=n,s=f.state,a.querySelector('link[rel="preload"][as="style"]['+o+"]")?s.loading=1:(s.preload=o=a.createElement("link"),o.addEventListener("load",function(){return s.loading|=1}),o.addEventListener("error",function(){return s.loading|=2}),so(o,"link",u),eV(o),a.head.appendChild(o))))),t&&null===r)throw Error(i(528,""));return f}if(t&&null!==r)throw Error(i(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=sF(n),(r=(n=eB(l).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function sR(e){return'href="'+tt(e)+'"'}function sD(e){return'link[rel="stylesheet"]['+e+"]"}function sI(e){return p({},e,{"data-precedence":e.precedence,precedence:null})}function sF(e){return'[src="'+tt(e)+'"]'}function sj(e){return"script[async]"+e}function sU(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+tt(n.href)+'"]');if(r)return t.instance=r,eV(r),r;var l=p({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return eV(r=(e.ownerDocument||e).createElement("style")),so(r,"style",l),sH(r,n.precedence,e),t.instance=r;case"stylesheet":l=sR(n.href);var a=e.querySelector(sD(l));if(a)return t.state.loading|=4,t.instance=a,eV(a),a;r=sI(n),(l=sT.get(l))&&s$(r,l),eV(a=(e.ownerDocument||e).createElement("link"));var o=a;return o._p=new Promise(function(e,t){o.onload=e,o.onerror=t}),so(a,"link",r),t.state.loading|=4,sH(a,n.precedence,e),t.instance=a;case"script":if(a=sF(n.src),l=e.querySelector(sj(a)))return t.instance=l,eV(l),l;return r=n,(l=sT.get(a))&&sB(r=p({},n),l),eV(l=(e=e.ownerDocument||e).createElement("script")),so(l,"link",r),e.head.appendChild(l),t.instance=l;case"void":return null;default:throw Error(i(443,t.type))}return"stylesheet"===t.type&&0==(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,sH(r,n.precedence,e)),t.instance}function sH(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)a=i;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function s$(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function sB(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var sV=null;function sQ(e,t,n){if(null===sV){var r=new Map,l=sV=new Map;l.set(n,r)}else(r=(l=sV).get(n))||(r=new Map,l.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),l=0;l<n.length;l++){var a=n[l];if(!(a[eF]||a[eO]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var o=a.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(a):r.set(o,[a])}}return r}function sW(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function sq(e){return"stylesheet"!==e.type||0!=(3&e.state.loading)}var sG=null;function sK(){}function sX(){if(this.count--,0===this.count){if(this.stylesheets)sJ(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}}var sY=null;function sJ(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,sY=new Map,t.forEach(sZ,e),sY=null,sX.call(e))}function sZ(e,t){if(!(4&t.state.loading)){var n=sY.get(e);if(n)var r=n.get(null);else{n=new Map,sY.set(e,n);for(var l=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<l.length;a++){var o=l[a];("LINK"===o.nodeName||"not all"!==o.getAttribute("media"))&&(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(l=t.instance).getAttribute("data-precedence"),(a=n.get(o)||r)===r&&n.set(null,l),n.set(o,l),this.count++,r=sX.bind(this),l.addEventListener("load",r),l.addEventListener("error",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),t.state.loading|=4}}var s0={$$typeof:S,Provider:null,Consumer:null,_currentValue:D,_currentValue2:D,_threadCount:0};function s1(e,t,n,r,l,a,o,i){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=ex(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ex(0),this.hiddenUpdates=ex(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function s2(e,t,n,r,l,a,o,i,u,s,c,f){return e=new s1(e,t,n,o,i,u,s,f),t=1,!0===a&&(t|=24),a=rr(3,null,null,t),e.current=a,a.stateNode=e,t=r0(),t.refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},lp(a),e}function s3(e){return e?e=rt:rt}function s4(e,t,n,r,l,a){var o;l=(o=l)?o=rt:rt,null===r.context?r.context=l:r.pendingContext=l,(r=lh(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=lg(e,r,t))&&(ut(n,e,t),ly(n,e,t))}function s8(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function s6(e,t){s8(e,t),(e=e.alternate)&&s8(e,t)}function s5(e){if(13===e.tag){var t=n9(e,0x4000000);null!==t&&ut(t,e,0x4000000),s6(e,0x4000000)}}var s9=!0;function s7(e,t,n,r){var l=M.T;M.T=null;var a=R.p;try{R.p=2,ct(e,t,n,r)}finally{R.p=a,M.T=l}}function ce(e,t,n,r){var l=M.T;M.T=null;var a=R.p;try{R.p=8,ct(e,t,n,r)}finally{R.p=a,M.T=l}}function ct(e,t,n,r){if(s9){var l=cn(r);if(null===l)u4(e,t,r,cr,n),cm(e,r);else if(function(e,t,n,r,l){switch(t){case"focusin":return ci=ch(ci,e,t,n,r,l),!0;case"dragenter":return cu=ch(cu,e,t,n,r,l),!0;case"mouseover":return cs=ch(cs,e,t,n,r,l),!0;case"pointerover":var a=l.pointerId;return cc.set(a,ch(cc.get(a)||null,e,t,n,r,l)),!0;case"gotpointercapture":return a=l.pointerId,cf.set(a,ch(cf.get(a)||null,e,t,n,r,l)),!0}return!1}(l,e,t,n,r))r.stopPropagation();else if(cm(e,r),4&t&&-1<cp.indexOf(e)){for(;null!==l;){var a=eH(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=ev(a.pendingLanes);if(0!==o){var i=a;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-ep(o);i.entanglements[1]|=u,o&=~u}uF(a),0==(6&iO)&&(iY=et()+500,uj(0,!1))}}break;case 13:null!==(i=n9(a,2))&&ut(i,a,2),ua(),s6(a,2)}if(null===(a=cn(r))&&u4(e,t,r,cr,n),a===l)break;l=a}null!==l&&r.stopPropagation()}else u4(e,t,r,null,n)}}function cn(e){return cl(e=ty(e))}var cr=null;function cl(e){if(cr=null,null!==(e=eU(e))){var t=c(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=f(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return cr=e,null}function ca(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(en()){case er:return 2;case el:return 8;case ea:case eo:return 32;case ei:return 0x10000000;default:return 32}default:return 32}}var co=!1,ci=null,cu=null,cs=null,cc=new Map,cf=new Map,cd=[],cp="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function cm(e,t){switch(e){case"focusin":case"focusout":ci=null;break;case"dragenter":case"dragleave":cu=null;break;case"mouseover":case"mouseout":cs=null;break;case"pointerover":case"pointerout":cc.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":cf.delete(t.pointerId)}}function ch(e,t,n,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==t&&null!==(t=eH(t))&&s5(t)):(e.eventSystemFlags|=r,t=e.targetContainers,null!==l&&-1===t.indexOf(l)&&t.push(l)),e}function cg(e){var t=eU(e.target);if(null!==t){var n=c(t);if(null!==n){if(13===(t=n.tag)){if(null!==(t=f(n))){e.blockedOn=t,function(e,t){var n=R.p;try{return R.p=e,t()}finally{R.p=n}}(e.priority,function(){if(13===n.tag){var e=i7(),t=n9(n,e=e_(e));null!==t&&ut(t,n,e),s6(n,e)}});return}}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=3===n.tag?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function cy(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=cn(e.nativeEvent);if(null!==n)return null!==(t=eH(n))&&s5(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);tg=r,n.target.dispatchEvent(r),tg=null,t.shift()}return!0}function cv(e,t,n){cy(e)&&n.delete(t)}function cb(){co=!1,null!==ci&&cy(ci)&&(ci=null),null!==cu&&cy(cu)&&(cu=null),null!==cs&&cy(cs)&&(cs=null),cc.forEach(cv),cf.forEach(cv)}function ck(e,t){e.blockedOn===t&&(e.blockedOn=null,co||(co=!0,l.unstable_scheduleCallback(l.unstable_NormalPriority,cb)))}var cw=null;function cS(e){cw!==e&&(cw=e,l.unstable_scheduleCallback(l.unstable_NormalPriority,function(){cw===e&&(cw=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],l=e[t+2];if("function"!=typeof r)if(null===cl(r||n))continue;else break;var a=eH(n);null!==a&&(e.splice(t,3),t-=3,aA(a,{pending:!0,data:l,method:n.method,action:r},r,l))}}))}function cx(e){function t(t){return ck(t,e)}null!==ci&&ck(ci,e),null!==cu&&ck(cu,e),null!==cs&&ck(cs,e),cc.forEach(t),cf.forEach(t);for(var n=0;n<cd.length;n++){var r=cd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<cd.length&&null===(n=cd[0]).blockedOn;)cg(n),null===n.blockedOn&&cd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var l=n[r],a=n[r+1],o=l[eL]||null;if("function"==typeof a)o||cS(n);else if(o){var i=null;if(a&&a.hasAttribute("formAction")){if(l=a,o=a[eL]||null)i=o.formAction;else if(null!==cl(l))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),cS(n)}}}function cE(e){this._internalRoot=e}function cC(e){this._internalRoot=e}cC.prototype.render=cE.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));s4(t.current,i7(),e,t,null,null)},cC.prototype.unmount=cE.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;s4(e.current,2,null,e,null,null),ua(),t[eA]=null}},cC.prototype.unstable_scheduleHydration=function(e){if(e){var t=eN();e={blockedOn:null,target:e,priority:t};for(var n=0;n<cd.length&&0!==t&&t<cd[n].priority;n++);cd.splice(n,0,e),0===n&&cg(e)}};var cP=a.version;if("19.1.0"!==cP)throw Error(i(527,cP,"19.1.0"));if(R.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,e=Object.keys(e).join(",")))}return e=null===(e=null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=c(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){n=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===n)return d(l),e;if(a===r)return d(l),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=l,r=a;else{for(var o=!1,u=l.child;u;){if(u===n){o=!0,n=l,r=a;break}if(u===r){o=!0,r=l,n=a;break}u=u.sibling}if(!o){for(u=a.child;u;){if(u===n){o=!0,n=a,r=l;break}if(u===r){o=!0,r=a,n=l;break}u=u.sibling}if(!o)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(t))?function e(t){var n=t.tag;if(5===n||26===n||27===n||6===n)return t;for(t=t.child;null!==t;){if(null!==(n=e(t)))return n;t=t.sibling}return null}(e):null)?null:e.stateNode},"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var c_=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!c_.isDisabled&&c_.supportsFiber)try{ec=c_.inject({bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:M,reconcilerVersion:"19.1.0"}),ef=c_}catch(e){}}tR=function(e,t){if(!s(e))throw Error(i(299));var n=!1,r="",l=oc,a=of,o=od,u=null;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onUncaughtError&&(l=t.onUncaughtError),void 0!==t.onCaughtError&&(a=t.onCaughtError),void 0!==t.onRecoverableError&&(o=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&(u=t.unstable_transitionCallbacks)),t=s2(e,1,!1,null,null,n,r,l,a,o,u,null),e[eA]=t.current,u2(e),new cE(t)},tD=function(e,t,n){if(!s(e))throw Error(i(299));var r,l=!1,a="",o=oc,u=of,c=od,f=null,d=null;return null!=n&&(!0===n.unstable_strictMode&&(l=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onUncaughtError&&(o=n.onUncaughtError),void 0!==n.onCaughtError&&(u=n.onCaughtError),void 0!==n.onRecoverableError&&(c=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&(f=n.unstable_transitionCallbacks),void 0!==n.formState&&(d=n.formState)),(t=s2(e,1,!0,t,null!=n?n:null,l,a,o,u,c,f,d)).context=(r=null,rt),n=t.current,(a=lh(l=e_(l=i7()))).callback=null,lg(n,a,l),n=l,t.current.lanes=n,eE(t,n),uF(t),e[eA]=t.current,u2(e),new cC(t)},tI="19.1.0"}),s("hisUG",function(e,t){e.exports=u("7DJyw")}),s("7DJyw",function(t,n){function r(e,t){var n=e.length;for(e.push(t);0<n;){var r=n-1>>>1,l=e[r];if(0<o(l,t))e[r]=t,e[n]=l,n=r;else break}}function l(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;for(var r=0,l=e.length,a=l>>>1;r<a;){var i=2*(r+1)-1,u=e[i],s=i+1,c=e[s];if(0>o(u,n))s<l&&0>o(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[i]=n,r=i);else if(s<l&&0>o(c,n))e[r]=c,e[s]=n,r=s;else break}}return t}function o(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(e(t.exports,"unstable_now",()=>i,e=>i=e),e(t.exports,"unstable_IdlePriority",()=>u,e=>u=e),e(t.exports,"unstable_ImmediatePriority",()=>s,e=>s=e),e(t.exports,"unstable_LowPriority",()=>c,e=>c=e),e(t.exports,"unstable_NormalPriority",()=>f,e=>f=e),e(t.exports,"unstable_Profiling",()=>d,e=>d=e),e(t.exports,"unstable_UserBlockingPriority",()=>p,e=>p=e),e(t.exports,"unstable_cancelCallback",()=>m,e=>m=e),e(t.exports,"unstable_forceFrameRate",()=>h,e=>h=e),e(t.exports,"unstable_getCurrentPriorityLevel",()=>g,e=>g=e),e(t.exports,"unstable_next",()=>y,e=>y=e),e(t.exports,"unstable_requestPaint",()=>v,e=>v=e),e(t.exports,"unstable_runWithPriority",()=>b,e=>b=e),e(t.exports,"unstable_scheduleCallback",()=>k,e=>k=e),e(t.exports,"unstable_shouldYield",()=>w,e=>w=e),e(t.exports,"unstable_wrapCallback",()=>S,e=>S=e),i=void 0,"object"==typeof performance&&"function"==typeof performance.now){var i,u,s,c,f,d,p,m,h,g,y,v,b,k,w,S,x,E=performance;i=function(){return E.now()}}else{var C=Date,P=C.now();i=function(){return C.now()-P}}var _=[],T=[],N=1,z=null,O=3,L=!1,A=!1,M=!1,R=!1,D="function"==typeof setTimeout?setTimeout:null,I="function"==typeof clearTimeout?clearTimeout:null,F="undefined"!=typeof setImmediate?setImmediate:null;function j(e){for(var t=l(T);null!==t;){if(null===t.callback)a(T);else if(t.startTime<=e)a(T),t.sortIndex=t.expirationTime,r(_,t);else break;t=l(T)}}function U(e){if(M=!1,j(e),!A)if(null!==l(_))A=!0,H||(H=!0,x());else{var t=l(T);null!==t&&K(U,t.startTime-e)}}var H=!1,$=-1,B=5,V=-1;function Q(){return!!R||!(i()-V<B)}function W(){if(R=!1,H){var e=i();V=e;var t=!0;try{e:{A=!1,M&&(M=!1,I($),$=-1),L=!0;var n=O;try{t:{for(j(e),z=l(_);null!==z&&!(z.expirationTime>e&&Q());){var r=z.callback;if("function"==typeof r){z.callback=null,O=z.priorityLevel;var o=r(z.expirationTime<=e);if(e=i(),"function"==typeof o){z.callback=o,j(e),t=!0;break t}z===l(_)&&a(_),j(e)}else a(_);z=l(_)}if(null!==z)t=!0;else{var u=l(T);null!==u&&K(U,u.startTime-e),t=!1}}break e}finally{z=null,O=n,L=!1}}}finally{t?x():H=!1}}}if("function"==typeof F)x=function(){F(W)};else if("undefined"!=typeof MessageChannel){var q=new MessageChannel,G=q.port2;q.port1.onmessage=W,x=function(){G.postMessage(null)}}else x=function(){D(W,0)};function K(e,t){$=D(function(){e(i())},t)}u=5,s=1,c=4,f=3,d=null,p=2,m=function(e){e.callback=null},h=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):B=0<e?Math.floor(1e3/e):5},g=function(){return O},y=function(e){switch(O){case 1:case 2:case 3:var t=3;break;default:t=O}var n=O;O=t;try{return e()}finally{O=n}},v=function(){R=!0},b=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=O;O=e;try{return t()}finally{O=n}},k=function(e,t,n){var a=i();switch(n="object"==typeof n&&null!==n&&"number"==typeof(n=n.delay)&&0<n?a+n:a,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=0x3fffffff;break;case 4:o=1e4;break;default:o=5e3}return o=n+o,e={id:N++,callback:t,priorityLevel:e,startTime:n,expirationTime:o,sortIndex:-1},n>a?(e.sortIndex=n,r(T,e),null===l(_)&&e===l(T)&&(M?(I($),$=-1):M=!0,K(U,n-a))):(e.sortIndex=o,r(_,e),A||L||(A=!0,H||(H=!0,x()))),e},w=Q,S=function(e){var t=O;return function(){var n=O;O=t;try{return e.apply(this,arguments)}finally{O=n}}}}),s("b40gr",function(e,t){e.exports=u("gXMNK")}),s("gXMNK",function(t,n){e(t.exports,"Children",()=>r,e=>r=e),e(t.exports,"Component",()=>l,e=>l=e),e(t.exports,"Fragment",()=>a,e=>a=e),e(t.exports,"Profiler",()=>o,e=>o=e),e(t.exports,"PureComponent",()=>i,e=>i=e),e(t.exports,"StrictMode",()=>u,e=>u=e),e(t.exports,"Suspense",()=>s,e=>s=e),e(t.exports,"__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE",()=>c,e=>c=e),e(t.exports,"__COMPILER_RUNTIME",()=>f,e=>f=e),e(t.exports,"cache",()=>d,e=>d=e),e(t.exports,"cloneElement",()=>p,e=>p=e),e(t.exports,"createContext",()=>m,e=>m=e),e(t.exports,"createElement",()=>h,e=>h=e),e(t.exports,"createRef",()=>g,e=>g=e),e(t.exports,"forwardRef",()=>y,e=>y=e),e(t.exports,"isValidElement",()=>v,e=>v=e),e(t.exports,"lazy",()=>b,e=>b=e),e(t.exports,"memo",()=>k,e=>k=e),e(t.exports,"startTransition",()=>w,e=>w=e),e(t.exports,"unstable_useCacheRefresh",()=>S,e=>S=e),e(t.exports,"use",()=>x,e=>x=e),e(t.exports,"useActionState",()=>E,e=>E=e),e(t.exports,"useCallback",()=>C,e=>C=e),e(t.exports,"useContext",()=>P,e=>P=e),e(t.exports,"useDebugValue",()=>_,e=>_=e),e(t.exports,"useDeferredValue",()=>T,e=>T=e),e(t.exports,"useEffect",()=>N,e=>N=e),e(t.exports,"useId",()=>z,e=>z=e),e(t.exports,"useImperativeHandle",()=>O,e=>O=e),e(t.exports,"useInsertionEffect",()=>L,e=>L=e),e(t.exports,"useLayoutEffect",()=>A,e=>A=e),e(t.exports,"useMemo",()=>M,e=>M=e),e(t.exports,"useOptimistic",()=>R,e=>R=e),e(t.exports,"useReducer",()=>D,e=>D=e),e(t.exports,"useRef",()=>I,e=>I=e),e(t.exports,"useState",()=>F,e=>F=e),e(t.exports,"useSyncExternalStore",()=>j,e=>j=e),e(t.exports,"useTransition",()=>U,e=>U=e),e(t.exports,"version",()=>H,e=>H=e);var r,l,a,o,i,u,s,c,f,d,p,m,h,g,y,v,b,k,w,S,x,E,C,P,_,T,N,z,O,L,A,M,R,D,I,F,j,U,H,$=Symbol.for("react.transitional.element"),B=Symbol.for("react.portal"),V=Symbol.for("react.fragment"),Q=Symbol.for("react.strict_mode"),W=Symbol.for("react.profiler"),q=Symbol.for("react.consumer"),G=Symbol.for("react.context"),K=Symbol.for("react.forward_ref"),X=Symbol.for("react.suspense"),Y=Symbol.for("react.memo"),J=Symbol.for("react.lazy"),Z=Symbol.iterator,ee={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},et=Object.assign,en={};function er(e,t,n){this.props=e,this.context=t,this.refs=en,this.updater=n||ee}function el(){}function ea(e,t,n){this.props=e,this.context=t,this.refs=en,this.updater=n||ee}er.prototype.isReactComponent={},er.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},er.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},el.prototype=er.prototype;var eo=ea.prototype=new el;eo.constructor=ea,et(eo,er.prototype),eo.isPureReactComponent=!0;var ei=Array.isArray,eu={H:null,A:null,T:null,S:null,V:null},es=Object.prototype.hasOwnProperty;function ec(e,t,n,r,l,a){return{$$typeof:$,type:e,key:t,ref:void 0!==(n=a.ref)?n:null,props:a}}function ef(e){return"object"==typeof e&&null!==e&&e.$$typeof===$}var ed=/\/+/g;function ep(e,t){var n,r;return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,function(e){return r[e]})):t.toString(36)}function em(){}function eh(e,t,n){if(null==e)return e;var r=[],l=0;return!function e(t,n,r,l,a){var o,i,u,s=typeof t;("undefined"===s||"boolean"===s)&&(t=null);var c=!1;if(null===t)c=!0;else switch(s){case"bigint":case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case $:case B:c=!0;break;case J:return e((c=t._init)(t._payload),n,r,l,a)}}if(c)return a=a(t),c=""===l?"."+ep(t,0):l,ei(a)?(r="",null!=c&&(r=c.replace(ed,"$&/")+"/"),e(a,n,r,"",function(e){return e})):null!=a&&(ef(a)&&(o=a,i=r+(null==a.key||t&&t.key===a.key?"":(""+a.key).replace(ed,"$&/")+"/")+c,a=ec(o.type,i,void 0,void 0,void 0,o.props)),n.push(a)),1;c=0;var f=""===l?".":l+":";if(ei(t))for(var d=0;d<t.length;d++)s=f+ep(l=t[d],d),c+=e(l,n,r,s,a);else if("function"==typeof(d=null===(u=t)||"object"!=typeof u?null:"function"==typeof(u=Z&&u[Z]||u["@@iterator"])?u:null))for(t=d.call(t),d=0;!(l=t.next()).done;)s=f+ep(l=l.value,d++),c+=e(l,n,r,s,a);else if("object"===s){if("function"==typeof t.then)return e(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(em,em):(e.status="pending",e.then(function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)},function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)})),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(t),n,r,l,a);throw Error("Objects are not valid as a React child (found: "+("[object Object]"===(n=String(t))?"object with keys {"+Object.keys(t).join(", ")+"}":n)+"). If you meant to render a collection of children, use an array instead.")}return c}(e,r,"","",function(e){return t.call(n,e,l++)}),r}function eg(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){(0===e._status||-1===e._status)&&(e._status=1,e._result=t)},function(t){(0===e._status||-1===e._status)&&(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var ey="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}console.error(e)};function ev(){}r={map:eh,forEach:function(e,t,n){eh(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return eh(e,function(){t++}),t},toArray:function(e){return eh(e,function(e){return e})||[]},only:function(e){if(!ef(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},l=er,a=V,o=W,i=ea,u=Q,s=X,c=eu,f={__proto__:null,c:function(e){return eu.H.useMemoCache(e)}},d=function(e){return function(){return e.apply(null,arguments)}},p=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=et({},e.props),l=e.key,a=void 0;if(null!=t)for(o in void 0!==t.ref&&(a=void 0),void 0!==t.key&&(l=""+t.key),t)es.call(t,o)&&"key"!==o&&"__self"!==o&&"__source"!==o&&("ref"!==o||void 0!==t.ref)&&(r[o]=t[o]);var o=arguments.length-2;if(1===o)r.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];r.children=i}return ec(e.type,l,void 0,void 0,a,r)},m=function(e){return(e={$$typeof:G,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:q,_context:e},e},h=function(e,t,n){var r,l={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)es.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(l[r]=t[r]);var o=arguments.length-2;if(1===o)l.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];l.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===l[r]&&(l[r]=o[r]);return ec(e,a,void 0,void 0,null,l)},g=function(){return{current:null}},y=function(e){return{$$typeof:K,render:e}},v=ef,b=function(e){return{$$typeof:J,_payload:{_status:-1,_result:e},_init:eg}},k=function(e,t){return{$$typeof:Y,type:e,compare:void 0===t?null:t}},w=function(e){var t=eu.T,n={};eu.T=n;try{var r=e(),l=eu.S;null!==l&&l(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(ev,ey)}catch(e){ey(e)}finally{eu.T=t}},S=function(){return eu.H.useCacheRefresh()},x=function(e){return eu.H.use(e)},E=function(e,t,n){return eu.H.useActionState(e,t,n)},C=function(e,t){return eu.H.useCallback(e,t)},P=function(e){return eu.H.useContext(e)},_=function(){},T=function(e,t){return eu.H.useDeferredValue(e,t)},N=function(e,t,n){var r=eu.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},z=function(){return eu.H.useId()},O=function(e,t,n){return eu.H.useImperativeHandle(e,t,n)},L=function(e,t){return eu.H.useInsertionEffect(e,t)},A=function(e,t){return eu.H.useLayoutEffect(e,t)},M=function(e,t){return eu.H.useMemo(e,t)},R=function(e,t){return eu.H.useOptimistic(e,t)},D=function(e,t,n){return eu.H.useReducer(e,t,n)},I=function(e){return eu.H.useRef(e)},F=function(e){return eu.H.useState(e)},j=function(e,t,n){return eu.H.useSyncExternalStore(e,t,n)},U=function(){return eu.H.useTransition()},H="19.1.0"}),s("70pNV",function(e,t){!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=u("5AMoI")}),s("5AMoI",function(t,n){e(t.exports,"__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE",()=>r,e=>r=e),e(t.exports,"createPortal",()=>l,e=>l=e),e(t.exports,"flushSync",()=>a,e=>a=e),e(t.exports,"preconnect",()=>o,e=>o=e),e(t.exports,"prefetchDNS",()=>i,e=>i=e),e(t.exports,"preinit",()=>s,e=>s=e),e(t.exports,"preinitModule",()=>c,e=>c=e),e(t.exports,"preload",()=>f,e=>f=e),e(t.exports,"preloadModule",()=>d,e=>d=e),e(t.exports,"requestFormReset",()=>p,e=>p=e),e(t.exports,"unstable_batchedUpdates",()=>m,e=>m=e),e(t.exports,"useFormState",()=>h,e=>h=e),e(t.exports,"useFormStatus",()=>g,e=>g=e),e(t.exports,"version",()=>y,e=>y=e);var r,l,a,o,i,s,c,f,d,p,m,h,g,y,v=u("b40gr");function b(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function k(){}var w={d:{f:k,r:function(){throw Error(b(522))},D:k,C:k,L:k,m:k,X:k,S:k,M:k},p:0,findDOMNode:null},S=Symbol.for("react.portal"),x=v.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function E(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}r=w,l=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(b(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},a=function(e){var t=x.T,n=w.p;try{if(x.T=null,w.p=2,e)return e()}finally{x.T=t,w.p=n,w.d.f()}},o=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,w.d.C(e,t))},i=function(e){"string"==typeof e&&w.d.D(e)},s=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=E(n,t.crossOrigin),l="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?w.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:l,fetchPriority:a}):"script"===n&&w.d.X(e,{crossOrigin:r,integrity:l,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},c=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=E(t.as,t.crossOrigin);w.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&w.d.M(e)},f=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=E(n,t.crossOrigin);w.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},d=function(e,t){if("string"==typeof e)if(t){var n=E(t.as,t.crossOrigin);w.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else w.d.m(e)},p=function(e){w.d.r(e)},m=function(e,t){return e(t)},h=function(e,t,n){return x.H.useFormState(e,t,n)},g=function(){return x.H.useHostTransitionStatus()},y="19.1.0"});var c={};c=u("ir7AP");var f={};!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),f=u("a6Xtg");var d=u("b40gr");function p(){return(0,c.jsx)("button",{onClick:h,id:"process-clipboard",children:"Generate Comment"})}u("b40gr");let m="";async function h(){console.log("clickboard checking");try{let e=await navigator.clipboard.readText();e&&e!==m&&/^https:\/\/www\.linkedin\.com\/posts\//.test(e.trim())&&(m=e,console.log("\uD83D\uDCCB Copied LinkedIn Post URL:",e),chrome.runtime.sendMessage({type:"OPEN_POST_TAB",url:e}))}catch(e){console.warn("Clipboard access error:",e)}}var d=u("b40gr");async function g(){return new Promise(e=>{chrome.runtime.sendMessage({type:"GET_TAB_URL_WHEN_FETCHING"},t=>{e(t?.url??null)})})}async function y(){let e=await g();if(console.log("current_url:"+e),!e)return null;let t=`comment-${e}`;return console.log("key:"+t),new Promise(e=>{chrome.storage.local.get([t],n=>{e(n[t]??null)})})}const v="http:localhost:8111";class b{async getAuthToken(){return new Promise(e=>{chrome.storage.local.get(["token"],t=>{e(t.token??null)})})}async getInstallId(){return new Promise(e=>{chrome.storage.local.get(["installId"],t=>{e(t.installId??null)})})}async generatePost(e){try{let t=await this.getAuthTokenAndInstallerId(),n=await fetch(v+"/linkedin/api/v1/create-post",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.token}`},body:JSON.stringify({payload:{idea:e},additionalMetadata:{installId:t.installId}})});if(!n.ok)throw Error(`Backend error: ${n.status}`);let r=await n.json();return console.log("✅ post received from backend:",r),r}catch(e){return console.error("❌ Failed to send post to backend:",e),null}}async getAuthTokenAndInstallerId(){let e=await this.getAuthToken(),t=await this.getInstallId();if(!e||!t)throw Error("Missing auth token or install ID");return{token:e,installId:t}}async sendPostToBackend(e,t){try{let n=await this.getAuthTokenAndInstallerId(),r=await fetch(v+"/linkedin/api/v1/create-comment",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n.token}`},body:JSON.stringify({payload:{scrappedPost:e,url:t},additionalMetadata:{installId:n.installId}})});if(!r.ok)throw Error(`Backend error: ${r.status}`);let l=await r.json();return console.log("✅ Comment received from backend:",l),l}catch(e){return console.error("❌ Failed to send post to backend:",e),null}}async sendJourneyInfo(e){try{let t=await this.getAuthTokenAndInstallerId(),n=await fetch(v+"/linkedin/api/v1/journey",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.token}`},body:JSON.stringify({payload:e,additionalMetadata:{installId:t.installId}})});if(!n.ok)throw Error(`Backend error: ${n.status}`);let r=await n.json();return console.log("✅ journey info sent to backend:",r),r}catch(e){return console.error("❌ Failed to send journey info to backend:",e),null}}async sendJourneyStepInfo(e){try{let t=await this.getAuthTokenAndInstallerId(),n=await fetch(v+"/linkedin/api/v1/journey/step",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t.token}`},body:JSON.stringify({payload:e,additionalMetadata:{installId:t.installId}})});if(!n.ok)throw Error(`Backend error: ${n.status}`);let r=await n.json();return console.log("✅ step info sent to backend:",r),r}catch(e){return console.error("❌ Failed to send step info to backend:",e),null}}}var k=((t={}).GENERATED="GENERATED",t.COPIED="COPIED",t.POSTED="POSTED",t),w=((n={}).POST="POST",n.COMMENT="COMMENT",n);const S=new b,x={generated(e){let t={journeyId:e.journeyId,stepNumber:1,stepType:k.GENERATED,contentType:w.COMMENT,inputContent:e.inputContent,outputContent:e.outputContent};S.sendJourneyStepInfo(t),console.log("comment generated step sent")},copied(e){let t={journeyId:e.journeyId,stepNumber:2,stepType:k.COPIED,contentType:w.COMMENT,inputContent:e.inputContent,outputContent:e.outputContent};S.sendJourneyStepInfo(t),console.log("comment copied step sent")},posted(e){let t={journeyId:e.journeyId,stepNumber:3,stepType:k.POSTED,contentType:w.COMMENT,inputContent:e.inputContent,outputContent:e.outputContent};S.sendJourneyStepInfo(t),console.log("comment post event ran"),console.log("comment posted step sent:",e.outputContent)}},E={generated(e){console.log("post generation info sent")},copied(e){console.log("post copied info sent")},posted(e){console.log("post posted info sent")}};var C=((r={}).COMMENT_CREATION="COMMENT_CREATION",r.POST_CREATION="POST_CREATION",r);async function P(e,t){let n=new TextEncoder,r=await crypto.subtle.importKey("raw",n.encode(e),{name:"HMAC",hash:"SHA-256"},!1,["sign"]);return[...new Uint8Array(await crypto.subtle.sign("HMAC",r,n.encode(t)))].map(e=>e.toString(16).padStart(2,"0")).join("")}async function _(e){let t=crypto.randomUUID(),n=await P("your-very-secret-key",t);e===C.COMMENT_CREATION?chrome.storage.local.set({commentCreationJourney:n},()=>{console.log("Comment creation token generated and saved:",n)}):e===C.POST_CREATION&&chrome.storage.local.set({postCreationJourney:n},()=>{console.log("post creatin token generated and saved:",n)})}async function T(e){return e===C.COMMENT_CREATION?new Promise(e=>{chrome.storage.local.get(["commentCreationJourney"],t=>{e(t.commentCreationJourney??null)})}):e===C.POST_CREATION?new Promise(e=>{chrome.storage.local.get(["postCreationJourney"],t=>{e(t.postCreationJourney??null)})}):""}function N(){let[e,t]=(0,d.useState)(""),[n,r]=(0,d.useState)(!1);async function l(){try{let n=await T(C.COMMENT_CREATION);await navigator.clipboard.writeText(e),x.copied({journeyId:n,inputContent:e,outputContent:e}),r(!0),setTimeout(()=>t(""),1500)}catch(e){console.error("❌ Failed to copy:",e)}}return((0,d.useEffect)(()=>{console.log("checking if comment is there"),y().then(e=>{e&&t(e)})},[]),e)?(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("textarea",{id:"comment-box",readOnly:!0,value:e,className:"w-full h-24 border p-2 rounded"}),(0,c.jsx)("button",{id:"copy-btn",onClick:l,disabled:!e||n,className:"mt-2 w-full bg-blue-500 text-white py-1 rounded disabled:opacity-50",children:n?"Copied!":"Copy Comment"})]}):null}var d=u("b40gr"),z=((l={})[l.default=0]="default",l[l.display_comment=1]="display_comment",l[l.display_post=2]="display_post",l[l.generate_comment=3]="generate_comment",l[l.generate_post=4]="generate_post",l);new b;const O={startJourney(e){},endJourney(e){}};function L({setState:e,setGeneratedPost:t}){let[n,r]=(0,d.useState)(""),[l,a]=(0,d.useState)(!1),o=async()=>{_(C.POST_CREATION);let r=await T(C.POST_CREATION);if(O.startJourney(r),console.log("user input fed"),!n.trim())return;a(!0),console.log("sending request");let l=await new b().generatePost(n);t?.(l.payload),e(z.display_post),a(!1);let o={journeyId:r,inputContent:n,outputContent:l.payload};E.generated(o)};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("textarea",{id:"input-box",placeholder:"Write your idea here...",value:n,onChange:e=>r(e.target.value)}),(0,c.jsx)("button",{onClick:o,disabled:!n.trim()||l,children:l?"Generating...":"Generate Post"})]})}var d=u("b40gr");function A({generatedPost:e}){let[t,n]=(0,d.useState)(!1),[r,l]=(0,d.useState)(e);(0,d.useEffect)(()=>{l(e)},[e]);let a=async()=>{try{await navigator.clipboard.writeText(r),n(!0),setTimeout(()=>l(""),1500);let e=await T(C.POST_CREATION);E.copied({journeyId:e,inputContent:r,outputContent:r})}catch(e){console.error("❌ Failed to copy:",e)}};return r?(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)("textarea",{id:"output-box",readOnly:!0,value:r,placeholder:"Generated post will appear here...",className:"w-full h-32 p-2 border border-gray-300 rounded"}),(0,c.jsx)("button",{onClick:a,className:"mt-2 w-full bg-blue-500 text-white py-1 rounded",disabled:!r||t,children:t?"Copied!":"Copy"})]}):null}const M=document.getElementById("app");(0,f.createRoot)(M).render((0,c.jsx)(function(){let[e,t]=(0,d.useState)(z.default),[n,r]=(0,d.useState)("");return(0,c.jsxs)("div",{children:[(0,c.jsxs)("section",{children:[(0,c.jsx)("h4",{children:"Comment Generator"}),(0,c.jsx)(p,{}),(0,c.jsx)(N,{})]}),(0,c.jsxs)("section",{children:[(0,c.jsx)("h2",{children:"Post Generator"}),(0,c.jsx)(L,{setState:t,setGeneratedPost:r}),e===z.display_post&&(0,c.jsx)(A,{generatedPost:n})]})]})},{}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJtYXBwaW5ncyI6IitGLEksRSx5ZSxJLEUsRSxFLEUsTyxHLEMsOEIsQyxRLEUsQyxDLEMsQyxDLEUsSSxFLEssRyxLLEksSSxFLEcsQyxDLEMsQSxLLEksRSxHLEcsQyxDLEcsRSxHLEEsRSxRLEUsSSxFLEUsSyxFLEMsRSxFLFEsSSxDLEMsRSxDLEMsQyxDLEMsQSxPLEUsRSxNLEMsUyxFLEssRSxJLEUsSSxLLEssQyxDLEUsRyxBLEUsRSxLLE0sQyxDLEMsRSxPLEcsQyxrQixFLEUsRSxPLGtKQ3M5RU0seUMsUyxFLEMsRSxJLEUsNEIsRSxHLEUsVSxNLEMsQyxHLFcsbUIsUyxDLEUsRSxJLEksRSxFLEUsVSxNLEMsSSxHLFcsbUIsUyxDLEUsQyxDLE0seUIsRSxXLEUsZ0gsQyxTLEUsQyxFLE0sQyxDLEMsRyxJLEUsUSxFLEksRSxRLEUsSyxFLFEsQSxDLEMsUyxFLEMsRSxJLEUsRSxFLEUsRyxFLFMsQyxLLEUsTSxFLEUsRSxNLEssQ0R0OUVOLEVBQUEsRSxHLEEsSSxFLEcsRyxDLEUsSyxBLEMsRyxFLEEsRSxNLEEsRSxFLEUsTSxPLEUsQSxDLE8sSSxFLEcsQyxFLElBUUMsQ0F3QkQsU0FBQSxFQUFBLENBQUEsRUFDQSxHQUFBLEtBQUEsRUFBQSxHQUFBLENBQUEsQ0F2QkEsSUFBQSxFQUFBLEVBQUEsYUFBQSxDQUtFLEdBSkUsT0FBQSxHQUdGLFFBREYsQ0FDRSxDQURPLEVBQUEsRUFBVCxJQUNFLEdBRE8sQUFBQSxJQUNQLEVBQUEsRUFBQSxhQUFBLEFBQUEsQ0FBQSxDQUNBLE9BQVcsRUFBYSxPQUFXLEVBQW5DLFVBQUEsQUFDQSxDQUNBLE9BQUksSUFDRixDQUNBLFNBQUEsRUFBUyxDQUFZLEVBRXZCLEdBQUEsRUFBQSxLQUFBLEVBQ0EsTUFBQSxNQUFTLEVBQVQsS0FDQSxDQ21ERSxJQUFBLEVBQUksT0FBQSxNQUFZLENBQ2hCLEVBQXNCLE9BQXRCLEdBQUEsQ0FBQSxpQkFDQSxFQUFjLE9BQVEsR0FBQSxDQUFBLDhCQUN0QixFQUFhLE9BQUEsR0FBYixDQUFBLGdCQUNFLEVBQVks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Q0FBQSxDQUFBLENBQUEsRUFDQSxHQUFBLFVBQUEsRUFBdUIsT0FBQSxHQUF2QixFQUNGLENBQ0EsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0YsR0FBQSxVQUFBLEdBQUEsV0FBQSxFQUNJLE9BQUEsR0FBQSxFQVNKLENBSUUsSUFBQSxHQUFBLFlBQUEsT0FBQSxPQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsQ0FIQSxFQUdBLE9BSEEsQUFBQSxDQUFBLENBQUEsQ0FBQSxFQUNBLE9BQUEsSUFBQSxJQUFBLENBQUEsR0FBQSxHQUFBLEVBQVUsR0FBQSxHQUFBLENBQUEsRUFBQSxHQUFBLEdBQUEsR0FBQSxDQUNWLEVBRUYsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsR0FBQSxHQUFTLEVBQUEsR0FBQSxNQUFBLENBQUEsRUFDUCxHQUNBLFVBQUEsT0FBQSxHQUNBLE9BQUEsR0FDQSxVQUFBLE9BQUEsR0FDQSxPQUFJLEVBRUosTUFBSSxDQUFBLEVBQ0osSUFBQSxFQUFBLE9BQUEsSUFBQSxDQUFBLEdBQ0EsRUFBQSxPQUFBLElBQUEsQ0FBQSxHQUNBLEdBQUEsRUFBSSxNQUFTLEdBQUssRUFBQSxNQUFBLENBQUEsTUFBQSxDQUFBLEVBQ2xCLElBQUEsRUFBUyxFQUFBLEVBQVQsRUFBQSxNQUFBLENBQUEsSUFBQSxDQUNFLElBQUEsRUFBSSxDQUFBLENBQUEsRUFBQSxDQUNKLEdBSUEsQ0FBQSxFQUFBLElBQUEsQ0FBQSxFQUF5QixJQUN6QixDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxFQUtBLE1BQUEsQ0FBQSxDQUNGLENBSUYsTUFBQSxDQUFBLENBQ0EsQ0FDRSxTQUFBLEdBQVMsQ0FBQSxFQUVYLEtBQUEsR0FBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEVBQUEsVUFBQSxDQUNBLE9BQVMsQ0FDUCxDQUtBLFNBQUEsR0FBMEIsQ0FBQSxDQUFBLENBQUEsRUFPNUIsSUFPUyxFQVBULEVBQUEsR0FBQSxHQU9BLElBTkEsQUFNQSxFQU5JLEVBTUssR0FBQSxDQUNQLEdBQUksSUFBQSxFQUFRLFFBQU0sQ0FBQSxDQUVsQixHQURBLEVBQUEsRUFBQSxFQUFBLFdBQUEsQ0FBQSxNQUFvQixDQUNkLEdBQU4sR0FBQSxHQUFBLEVBQ0YsTUFBQSxDQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsQ0FBQSxFQUNBLEVBQVMsQ0FDUCxDQUdBLEVBQUEsQ0FDQSxLQUFTLEdBQUEsQ0FDVCxHQUFBLEVBQUEsV0FBQSxDQUFBLENBQ0UsRUFBQSxFQUFBLFdBQUEsQ0FDRSxNQUFBLENBQ0EsQ0FDQSxFQUFBLEVBQUEsVUFBQSxBQUNGLENBQ0EsRUFBSyxLQUFMLENBQ0EsQ0FDRSxFQUFBLEdBQUEsRUFDQSxDQUNGLENBaUJBLFNBQUEsR0FBQSxDQUFBLEVBQ0UsRUFDQSxNQUFBLEdBVUEsTUFBQSxFQUFBLGFBQUEsRUFDQSxNQUFBLEVBQUEsYUFBQSxDQUFBLFdBQUEsQ0FDRixFQUFBLGFBQUEsQ0FBQSxXQUFBLENBQ0UsT0FDQSxJQUNGLElBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUNFLGFBQUEsRUFBQSxpQkFBQSxFQUlKLENBQ0MsR0FBQSxDQWVELElBQUEsRUFDRixVQUFBLE9BQUEsRUFBQSxhQUFBLENBQUEsUUFBQSxDQUFBLElBQUEsQUFDQSxDQUFBLE1BQVMsRUFBQSxDQUNQLEVBQUssQ0FBQSxDQUVELENBQ0EsR0FBQSxFQUFBLEVBQUEsRUFBQSxhQUFBLE1BQ0UsTUFDQSxFQUFBLEdBQUEsRUFBQSxRQUFBLENBQ0YsQ0FDQSxPQUFBLENBQ0UsQ0FDQSxTQUFBLEdBQUEsQ0FBQSxFQUNGLElBQUEsRUFBQSxHQUFBLEVBQUEsUUFBQSxFQUFBLEVBQUEsUUFBQSxDQUFBLFdBQUEsR0FDRSxPQUNKLElBQ0osUUFBQSxFQUFBLElBQ0EsUUFBQSxDQUFTLEVBQUEsSUFBQSxFQUNILFdBQVUsRUFBQSxJQUFBLEVBQ1YsUUFBQyxFQUFBLElBQUEsRUFDRCxRQUFNLEVBQVMsSUFBbkIsRUFFSyxhQUFBLEVBQWtCLElBQUEsQUFBQSxHQUNyQixhQUFLLEdBS0wsU0FBQSxFQUFBLGVBQUEsQUFBQSxDQUVGLENBQ0EsSUFBQSxHQUNBLElBQVcsaUJBQVgsVUFBQSxJQUFBLFNBQUEsWUFBQSxDQUNFLEdBQVEsS0FDUixHQUFRLEtBQ1IsR0FBSyxLQUNMLEdBQUEsQ0FBQSxFQUNFLFNBQUEsR0FBYyxDQUFkLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxJQUFBLEVBQ0UsRUFBSSxNQUFNLEdBQU0sRUFDZCxFQUFNLFFBQUEsQ0FDSixJQUFBLEVBQUksUUFBSixDQUNFLEVBQ0EsRUFBQSxhQUFBLENBQ0YsSUFDQSxNQUFBLElBQ0YsS0FBQSxHQUNXLEtBS2YsRUFERSxDLGtCLENBQVEsQyxFLEdBQU0sR0FBZCxHQUNGLENBQUEsTUFBQSxFQUFBLGNBQUEsQ0FBQSxJQUFBLEVBQUEsWUFBQSxBQUFBLEVBZU4sQ0FDQSxDQWZNLFVBQUEsQUFlTixHQWRJLENBQUEsRUFBQSxhQUFBLEVBQUEsRUFBQSxhQUFBLENBQUEsV0FBQSxFQUNGLE1BQUEsQ0FDRSxDQVVGLFlBQUEsRUFBQSxFQUVGLENBREEsU0FDQSxDQUNFLGFBQUEsRUFBQSxZQUFBLENBQ0EsVUFBQSxFQUFBLFNBQUEsQ0FDRixZQUFBLEVBQUEsV0FBQSxBQUNBLENBQVMsQ0FDUCxJQUFJLEdBQUosR0FBQSxLQUNBLEdBQUEsQUFBUyxFQVNYLEVBQUEsQ0FERSxFQUFBLEdBQUEsR0FBQSxXQUFBLEVBQ0YsTUFBQSxHQUNTLENBQUEsQ0FBQSxJQUFBLEdBQ1AsV0FDd0IsU0FDcEIsS0FDTixFQUNJLEdBSUYsRUFBQSxJQUFBLENBQUEsQ0FBQSxNQUFLLEVBQUEsVUFBQSxDQUFBLEdBQ0wsRUFBUSxNQUFhLENBQXJCLEVBQUEsQ0FBQSxDQUFBLENBQUEsQUFDRixDQUNBLFNBQVMsR0FBQSxDQUFBLENBQUEsQ0FBWSxFQUNuQixJQUFBLEVBQVEsQ0FBQSxFQUlSLE9BSEEsQ0FBQSxDQUFBLEVBQUEsV0FBQSxHQUFBLENBQUEsRUFBQSxXQUFBLEdBQ0YsQ0FBQSxDQUFBLFNBQUEsRUFBQSxDQUFBLFNBQUEsRUFDQSxDQUFTLENBQUEsTUFBQSxFQUFBLENBQUEsTUFBQSxFQUNQLENBQ0UsQ0FDQyxJQUFBLEdBQU8sQ0FNUixhQUFJLEdBQVcsWUFBZixnQkFDQSxtQkFBZ0IsR0FBaEIsWUFBQSxzQkFDRixlQUFBLEdBQUEsWUFBQSxrQkFDRixjQUFBLEdBQUEsYUFBQSxpQkFDQSxnQkFBUyxHQUFBLGFBQUEsbUJBTVAsaUJBQVksR0FBb0IsYUFBaEMsb0JBQ0EsY0FBUyxHQUFnQixhQUFTLGdCQUNsQyxFQUNFLEdBQVcsQ0FBQSxFQUNYLEdBQUEsQ0FBQSxFQVVRLFNBQUEsR0FBUyxDQUFlLEVBQ3hCLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsQ0FBQSxFQUFBLENBS0EsR0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxFQUNBLElBQ0YsRUFERSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBRUosSUFBQSxLQUFBLEVBQ0YsR0FBQSxFQUFBLGNBQUEsQ0FBQSxJQUFBLEtBQUEsR0FDRixPQUFBLEVBQXdCLENBQUEsRUFBeEIsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUNFLE9BQUEsQ0FDQSxDQXRCQSxLQUNBLEdBQUEsU0FBTyxhQUFLLENBQUEsSUFBWixHQUFBLEtBQUEsQ0FDQSxtQkFBVSxTQUNSLENBQUEsTUFBQSxHQUFJLFlBQUosQ0FBQSxTQUFBLENBQ0EsT0FBQSxHQUFBLGtCQUFBLENBQUEsU0FBQSxDQUNBLE9BQUEsR0FBUyxjQUFXLENBQUEsU0FBQSxBQUFTLEVBRXpCLG9CQUFBLFFBQ0EsT0FBQSxHQUFBLGFBQWtCLENBQUEsVUFBbEIsQUFBa0IsRUFleEIsSUFBQSxHQUFBLEdBQUEsZ0JBQ0EsR0FBTyxHQUFQLHNCQUNBLEdBQUEsR0FBZ0Msa0JBQ2hDLEdBQUEsR0FBQSxpQkFDQSxHQUFBLEdBQUEsbUJBQ0YsR0FBTyxHQUFQLG9CQUNBLEdBQUksR0FBOEIsaUJBRWhDLEdBQWlCLElBQUEsSUFDZixHQUNFLG1uQkFBQSxLQUFBLENBQ0EsS0FHRixTQUFBLEdBQWEsQ0FBYixDQUFBLENBQUEsRUFDRSxHQUFZLEdBQUcsQ0FBQSxFQUFnQixHQUMvQixHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQ0EsQ0FKRixHQUFRLElBQUEsQ0FBQSxhQUtSLElBQUEsR0FBQSxJQUFBLFFBQ0EsU0FBQSxHQUFzQixDQUF0QixDQUFBLENBQUEsRUFDRixHQUFBLFVBQUEsT0FBQSxHQUFBLE9BQUEsRUFBQSxDQUNGLElBQUEsRUFBQSxHQUFBLEdBQUEsQ0FBQSxVQUNGLEFBQUEsS0FBQSxJQUFBLEVBQUEsR0FDRixFQUFBLENBQ0EsRUFGRSxJQUVPLEVBTVAsT0FBVSxFQUNWLE1BQ00sR0FBeUIsRUFJN0IsRUFDRSxHQUFJLEdBQU8sQ0FBQSxFQUFPLEdBQ2IsRUFBd0MsQ0FDL0MsTUFBQSxDQUNFLE1BQUEsRUFDQSxPQUFBLEVBQ0EsTUFBQSxHQUFnQixFQUNoQixDQUNFLENBQ0EsSUFBQSxHQUFBLEVBQUEsQ0FDMEQsR0FBQSxFQUFRLEdBQUEsRUFDcEUsU0FBQSxLQUNGLElBQ0UsSUFBQSxFQUFBLEdBQ0EsRUFBQSxHQUFhLEdBQTJCLEVBQ3hDLEVBQUEsR0FJd0MsQ0FDMUMsSUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQ0EsRUFBUyxDQUFBLElBQU8sQ0FBQSxLQUNsQixJQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FDQSxFQUFTLENBQUEsSUFDUCxDQUFBLEtBTUYsSUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEFBQ0YsR0FBQSxDQUFBLElBQUEsQ0FBQSxLQUNBLElBQUEsRUFBUyxFQUFBLENBQUEsRUFBQSxDQU1MLEdBTEYsRUFDRSxDQUFBLElBQUEsQ0FBQSxLQUlBLE9BQ0csR0FBQSxPQUFBLEVBQUEsQ0FNSCxJQUFBLEVBQUEsRUFBQSxPQUNGLEFBRHdCLFFBQ3hCLEVBQ08sRUFBUCxJQUFBLENBQUEsR0FDRixFQUFBLElBQUEsQUFBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxDQUNBLEVBQVMsT0FBQSxDQUFBLENBQ1AsQ0FDQSxJQUFBLEdBQUEsR0FBQSxFQUFBLEVBQUEsRUFDQSxDQUNBLENBQ0YsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxFQUFTLENBQUEsS0FBWSxDQUFBLEVBQ25CLEVBQU8sQ0FBQSxLQUFBLENBQUEsRUFDVCxFQUFBLENBQUEsS0FBQSxDQUFBLEVBQ0EsRUFBUyxDQUFBLEtBQUEsQ0FBQSxFQUNQLElBQVMsRUFDVCxFQUFBLEtBQU8sRUFBQSxFQUVULFFBREEsQ0FDUyxDQURULEVBQUEsTUFDUyxHQURULEFBQUEsSUFDUyxFQUFBLEtBQUEsRUFBQSxDQUFBLENBQUEsQUFDUCxDQUNBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQThCLE9BQWxCLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FBa0IsR0FBQSxFQUFzQixDQUFXLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUU3RCxPQURGLEdBQWEsRUFBQSxLQUFBLEtBQUEsR0FDWCxHQUF1QixFQUN2QixDQUNBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBMEIsRUFBQSxLQUFPLEVBQVAsRUFBVSxJQUFBLEVBQUEsRUFBQSxTQUFBLEFBQXNCLFFBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxBQUFBLENBQUEsQ0FBQSxDQUMxRCxJQUFBLElBQUEsRUFBYyxDQUFBLEVBQUksRUFBbEIsRUFBQSxNQUFBLENBQUEsT0FBQSxHQUNGLEVBQU8sVUFBQSxFQUFBLEVBRVQsUUFERSxDQUNGLENBREUsRUFBQSxTQUFBLEFBQUEsQ0FDRixHQUFBLEVBQUEsVUFBQSxFQUFBLENBQUEsQ0FBQSxDQUNJLEtBQUEsRUFBQSxHQUFBLEdBSVUsQUFFQSxDQUZBLFFBRVMsQ0FEWCxFQUFBLFNBQUEsQUFBZSxHQUNiLEVBQUEsRUFBQSxDQUFBLFVBQUEsR0FBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBLENBQ0EsRUFBQSxFQUNFLEVBQUEsRUFBVSxNQUFWLENBQ0YsT0FBQSxJQUFBLEVBQUEsR0FBQSxFQUNGLENBQUEsQ0FBQSxFQUFBLFNBQUEsQ0FDRixHQUNFLE9BQU8sSUFDUCxFQUFVLEdBQVEsQ0FBbEIsRUFBa0IsR0FHcEIsUUFERSxDQUNGLENBREUsQ0FERSxFQUFBLEVBQUEsYUFBQSxBQUFBLENBQ0YsQ0FBQSxFQUFBLEFBQUEsRUFHVixDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxDQUdFLEVBQUEsSUFBQSxDQUFBLEdBQ0EsRUFBQSxJQUFBLENBQUEsV0FBQSxDQUFBLENBQUEsQ0FDQSxDQUFBLENBQUEsQ0FDQSxJQUNBLENBQ0EsU0FBQSxHQUFBLENBQUEsRUFDRixHQUFBLEdBQUEsR0FDRixNQUNFLEdBQUEsRUFDRSxHQUFBLEtBQ0EsTUFBQSxFQUFBLE1BRUYsSUFBQSxJQUFBLEVBQUEsRUFBQSxNQUFBLENBQUEsT0FBQSxHQUNGLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLENBQ0EsT0FBUyxJQUFBLEVBQUEsR0FBQSxDQUFBLEVBQWEsU0FBdEIsQ0FBQSxJQUNFLENBQ0EsSUFBQSxHQUFvQixDQUFBLEVBRWhCLFNBQUEsR0FBTSxDQUFBLENBQVUsQ0FBaEIsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNGLElBQUEsQ0FBQSxHQUFBLENBQUEsRUFDSixJQUFBLENBQUEsR0FBQSxDQUFBLEVBQ0EsSUFBSSxDQUFBLE9BQUEsQ0FJSixJQUFBLENBQVMsS0FBQSxDQUNQLElBQUksQ0FBQSxNQUFBLENBQ0YsSUFBQSxDQUFBLFNBQUksQ0FDSixJQUFBLENBQUEsSUFBQSxDQUNBLElBQUEsQ0FBQSxXQUFBLENBQ0EsS0FDRSxJQUFBLENBQUEsS0FBQSxDQUFBLEVBQ0EsSUFBQSxDQUFBLFVBQUEsQ0FBTyxJQUFLLENBQVosR0FBQSxDQUFBLEtBQ0EsSUFBQSxDQUFBLFlBQU0sQ0FBQSxFQUNKLElBQUEsQ0FBQSxZQUFBLENBQ0YsSUFBQSxDQUFBLGFBQUEsQ0FDRixJQUFBLENBQUEsV0FBQSxDQUNGLElBQUEsQ0FBQSxhQUFBLENBQ0EsS0FDQSxJQUFBLENBQUEsSUFBQSxDQUFTLEVBQ1QsSUFBQSxDQUFBLFlBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQSxDQUFBLEVBQ0YsSUFBQSxDQUFBLFNBQUEsQ0FBQSxLQUNBLElBQUEsQ0FBQSxVQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUNFLElBQUEsQ0FBQSxTQUNVLENBQUEsSUFHUixDQUVBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsT0FBQSxJQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFDQSxDQUNBLFNBQUEsR0FBQSxDQUFBLEVBRUYsTUFBQSxDQUFBLENBQUEsQ0FBQSxDQURFLEVBQUssRUFBVyxTQUFBLEFBQUksR0FDdEIsQ0FBQSxFQUFBLGdCQUFBLEFBQUEsQ0FDRixDQUNBLFNBQVMsR0FBQSxDQUFBLENBQUEsQ0FBbUIsRUFDMUIsSUFBQSxFQUFrQixFQUNoQixTQUFBLENBOENGLE9BN0NJLE9BQUEsR0FPSixDQU5JLEVBQUEsR0FDQSxFQUFRLEdBQVIsQ0FDQSxFQUZBLEFBR0UsRUFBQSxHQUFBLENBQ0YsRUFBQSxLQUFBLEVBRUosV0FBQSxDQUFBLEVBQUEsV0FBQSxDQUVJLEVBQUEsSUFBQSxDQUFxQixFQUFNLElBQTNCLENBQ0EsRUFBQSxTQUFxQixDQUFLLEVBQTFCLFNBQUEsQ0FDQSxFQUFhLFNBQU8sQ0FBQSxFQUV0QixFQUFBLFNBREEsQ0FBQSxDQUFBLENBQUEsRUFFRSxFQUFBLEFBQUEsWUFBMkIsQ0FBRyxFQUM5QixFQUFBLElBQUEsQ0FBcUIsRUFBTSxJQUEzQixDQUNBLEVBQWEsS0FBRyxDQUFBLEVBRWxCLEVBQUEsWUFBQSxDQUFBLEVBRUYsRUFBQSxTQUFBLENBQUEsSUFBQSxDQUFBLENBQ0YsRUFBQSxLQUFBLENBQUEsVUFBQSxFQUFBLEtBQUEsQ0FDQSxFQUFJLFVBQUEsQ0FBQSxFQUFBLFVBQUEsQ0FDSixFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FDRSxFQUFhLEtBQUEsQ0FBTyxFQUFBLEtBQUEsQ0FJcEIsRUFBUyxhQUFBLENBQUEsRUFBQSxhQUFBLENBRVgsRUFBQSxhQUFBLENBQUEsRUFBQSxhQUFBLENBQ0EsRUFBSSxXQUFBLENBQUEsRUFBQSxXQUFlLENBQ25CLEVBQUEsRUFBQSxZQUFBLENBQ0UsRUFBSSxZQUFBLENBQ0osT0FBTyxFQUdULEtBQ0EsQ0FBUyxNQUFBLEVBQUEsS0FBQSxDQUFBLGFBQWUsRUFBQSxZQUF5QixBQUFBLEVBQy9DLEVBQVMsT0FBQSxDQUFBLEVBQ0wsT0FBQSxDQUVOLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUNBLEVBQUEsR0FBQSxDQUFBLEVBQUEsR0FBQSxDQUNFLEVBQUksVUFBSixDQUFBLEVBQUEsVUFBQSxDQUNBLENBRU0sQ0FBb0MsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQW9CLEVBQUEsS0FBQSxFQUFBLFVBQ2hFLElBQUEsRUFBQSxFQUFBLFNBQUEsQ0FxQ2MsT0FwQ2QsT0FBSSxHQUc4QixFQUFBLEtBQUEsS0FBQSxDQUFBLEVBQXFCLEVBQUEsS0FBQSxDQUFBLEVBQ3ZELEVBQVMsS0FBQSxDQUFBLEtBQ1AsRUFBVyxZQUFYLENBQUEsRUFDQSxFQUFPLGFBQWdCLENBQUEsS0FDekIsRUFBQSxhQUFBLENBQUEsS0FDQSxFQUFTLFdBQUEsQ0FBQSxLQUNULEVBQVMsWUFBQSxDQUFBLEtBQ1AsRUFBUSxTQUFjLENBQXRCLElBQUEsQ0FBQSxFQUNBLEVBQUEsQUFDSSxVQUFBLENBQUEsRUFBbUIsVUFDbkIsQ0FDSixFQUFpQixLQUFqQixDQUFBLEVBQUEsS0FBQSxDQUNFLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUNFLEVBQU8sWUFBUCxDQUFBLEVBQ0YsRUFBQSxTQUFBLENBQUEsS0FDRSxFQUNJLGFBQWdCLENBQUEsRUFBUyxhQUMzQixDQUdKLEVBQUEsYUFBQSxDQUFBLEVBQUEsYUFBQSxDQUNFLEVBQUksV0FBYSxDQUFPLEVBQUEsV0FBaUIsQ0FDcEMsRUFBQSxJQUFBLENBQUEsRUFBQSxJQUFBLENBRUgsRUFBSSxZQUFTLENBRWIsT0FIQSxFQUdBLENBSEEsRUFBQSxZQUFBLEFBQUEsRUFJQSxLQUNBLENBRUksTUFBQSxFQUFJLEtBQWMsQ0FDaEIsYUFBSSxFQUFBLFlBQUosQ0FDQSxDQUFBLENBQ0EsQ0FDRixDQUNGLFNBQUEsR0FFRSxDQUFBLENBQ0UsQ0FBQSxDQUNBLENBQUEsQ0FDQSxDQUFBLENBQ0YsQ0FBQSxDQUNGLENBQUEsRUFHSixJQUFBLEVBQUEsRUFFSSxHQURGLEVBQUEsRUFDRSxZQUFBLE9BQU8sRUFBQSxHQUFQLEtBQUEsR0FBQSxDQUFBLEFBQUEsTUFDRixHQUFBLFVBQUEsT0FBQSxFQUNFLEVBQUEsQyxTLEEsQyxDLEMsQyxDLEUsRyxJLEcsTSxFLFEsQyxNLEMsRSxPLEcsSSxPLEksUSxNLEMsQyxLLFEsRyxVLE8sRSxVLEUsVSxPLEUsSSxFLEssRSxJLEMsTSxNLEMsQyxLLE8sRyxVLE8sRSxHLEUsVSxPLEUsSSxFLEssRSxJLEUsRSxNLEUsRSxPLEMsTSxHLGUsRSxHLEMsTyxFLEUsUSxDLFUsTyxFLFUsRSxNLEUsTSxDLEMsSyxTLEcsRSxLLEUsWSxPLEUsSyxFLFUsTyxFLEssRSxDLEUsTSxFLEMsRSxPLEUsRSxHLEUsVSxPLEUsRyxDLE0sQyxDLEMsTSxDLEMsRUFLSixFQUNBLEVBQ0EsRUFBQSxPQUFBLEVBR0YsU0FBQSxHQUFBLFNBQUEsR0FBb0IsU0FBeEIsRUFDQSxHQUNNLEVBSE4sUUFLRSxFQUFBLE9BQUEsR0FDQSxLQUFPLEVBQ1QsTUFHSSxDQUZLLEVBQUEsR0FBQSxHQUFBLEVBQUEsRUFBOEIsRUFBQSxFQUVuQyxXQUFtQixDQUFBLEVBSXZCLEVBQUEsS0FBQSxDQUFBLEVBQ0ksQ0FFRixNQUFNLEVBQ0osT0FBQSxHQUFBLEVBQUEsUUFBQSxDQUFBLEVBQUEsRUFBQSxFQUNBLE1BQUEsRUFDQSxFQUFBLEVBQ0EsR0FBUSxHQUFFLEtBQWUsTUFBQSxFQUFVLE1BQ25DLENBRHlELEVBQUEsR0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFDekQsV0FBQSxDQUFBLEVBQ0YsRUFBQSxLQUFBLENBQUEsRUFDRixDQUVFLE1B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QSxFQUFBLENBQ0YsS0FBQSxFQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsU0FBQSxDQUFBLEVBQ0EsT0FBQSxFQUFBLEtBQUEsRUFDTSxHQUVBLE1BQUEsQ0FDRixDQUFBLENBQUEsQUFDQSxDQURBLEFBb0JGLEdBbEJFLE1BQUEsSUFBQSxFQUFBLENBQUEsS0FFSSxDQUZKLENBRUksQ0FBQSxNQUFBLEVBQUEsQ0FBQSxDQUVKLE9BQUEsSUFFQSxFQUFBLEtBQ0EsR0FBSSxDQURKLFVBQ0ksQ0FBQSxDQUFBLENBQ0QsQ0FDSCxFQUFBLFNBQUEsQ0FBQSxFQVNGLEtBQUEsS0FSQSxDQVFRLENBUEwsRUFBQSxJQUFBLENBQUEsRUFBQSxNQUEyQixBQUFBLEVBUWhDLElBQ0EsRUFBQSxFQUFBLElBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBLE1BQUEsR0FBQSxFQUFBLEVBQ0EsRUFBQSxFQUNBLElBRUUsQ0FBSSxDQUFBLEVBQUosQ0FBQSxFQUVBLE9BREEsRUFBQSxLQUFLLEdBQ0wsQ0FDRSxDQUNBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNBLE1BQUEsWUFBQSxPQUFBLEVBQUEsRUFBQSxHQUFBLENBQ0EsQ0FDQSxTQUFBLEdBQUEsQ0FBQSxFQUVGLE9BQUEsR0FEQSxLQUNBLEdBQUEsRUFDQSxDQU1BLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxJQUFBLEVBQUEsQ0FSQSxDQVFBLEtBQUEsQ0FBUSxHQUFBLE9BQUEsRUFBQSxNQUFBLE1BQUEsRUFBQSxNQUFhLEVBQUEsbUJBQUEsQ0FBQSxFQUFLLElBQUEsRUFBQSxFQUFBLFNBQUEsQ0FDNUIsRUFBQSxFQUFBLE9BQUEsQ0FDQSxHQUFBLE9BQUEsRUFBQSxDQUNBLEdBQUEsT0FBQSxFQUFBLENBQ0UsSUFBQSxFQUFRLEVBQUEsSUFBQSxDQUlWLEVBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxDQUVGLEVBQUEsSUFBQSxDQUFBLENBQ0UsQ0FDQSxFQUFBLFNBQUEsQ0FBQSxFQUFBLEVBQ0EsRUFBQSxPQUFhLENB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LEdBQUEsRUFBQSxZQUNFLENBQUEsQ0FLRixJQUFBLEVBQWEsRUFBYixDQUFBLENBQ0UsRUFBYSxDQUFBLENBUWIsR0FBQSxDQUFBLENBQUEsRUFDQSxHQUFBLENBQ0YsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQ2EsRUFDWCxDQWFGLEFBYkcsUUFhSCxHQUVJLEVBQW1CLEVBQW5CLEdBQ0YsR0FBQSxFQUFBLEVBQUEsRUFDRixDQUFBLE1BQUEsRUFBQSxDQUNBLEdBQUEsRUFBQSxFQUFBLEVBQ0YsUUFBQSxDQUNBLEVBQVMsQ0FBQSxDQUFBLENBTVAsQ0FLQSxNQUNFLEdBQUEsQ0FDRSxFQUFBLEVBQUEsRUFBQSxHQUNFLEdBQUEsRUFBQSxFQUFBLEVBQ0UsQ0FBQSxNQUFBLEVBQUEsQ0FDRSxHQUFBLEVBQUksRUFBQSxFQUNGLENBQ0EsQ0FDRSxTQUFBLEdBQUEsQ0FBSSxDQUFNLENBQUEsQ0FBQSxDQUFBLEVBQ1IsT0FBQSxHQUlBLFVBQUEsT0FBQSxHQUlBLFlBQUEsT0FBQSxFQUFBLElBQUEsQ0FDQSxFQUFBLElBQUEsQ0FDQSxTQUFBLENBQUEsRUFDRixHQUFBLEVBQUEsRUFBQSxFQUFBLEVBUUEsU0FBQSxDQUFBLEVBSUEsT0FBQSxHQUFBLEVBQVEsRUFBQSxFQUNSLEdBRUEsR0FBQSxFQUFBLEVBQUEsRUFDQSxDQUNGLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxFQUFBLE1BQUEsQ0FBQSxZQUNBLEVBQUEsS0FBQSxDQUFBLEVBQ0YsR0FBQSxHQUNBLEVBQUEsS0FBQSxDQUFBLEVBRUYsUUFEQSxDQUNBLENBREEsRUFBQSxPQUFBLEFBQUEsR0FxQkYsQ0FBQSxBQUNBLEdBREEsRUFBQSxJQUFBLEFBQUEsSUFDQSxFQUNGLEVBQUssT0FBTCxDQUFBLE1BQ0UsQ0FBQSxDQUFBLEVBQUEsSUFBQSxDQUNFLEVBQUEsSUFBQSxDQUFBLEVBQ0UsR0FBQSxFQUFJLEVBQUEsQ0FBa0IsQ0FBQSxBQUNwQixDQU9FLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFB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LEVBQ0YsSUFBQSxFQUFBLEVBQ0UsR0FBQSxRQUFBLEVBR0EsSUFBQSxJQUFBLENBSEEsSUFFRixFQUFBLENBQUEsRUFDRSxFQUNBLFFBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQUFBQSxFQUVBLEdBQUEsRUFBQSxFQUFBLFlBQUEsQ0FNQSxDQU5BLEdBTUEsSUFBQSxLQURBLElBQUEsSUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsQUFBQSxDQUFBLENBQ0EsRUFDQSxLQUFBLElBQUksQ0FBUyxDQUFiLEVBQUEsR0FDRSxDQUFBLEFBQUEsQ0FBQSxFQUFJLENBQUEsQ0FBQSxDQUFBLEVBQUEsQUFBQSxFQVFGLE9BQUEsQ0FDRSxDQUtGLElBQUEsR0FFQSxZQUFBLE9BQUEsWUFDRSxZQUNGLFNBQUEsQ0FBRSxFQUNBLEdBS0YsVUFBQSxPQUFBLFEsWSxPLE8sVSxDQUNKLENBQ0YsSUFBQSxFQUFBLElBQUEsT0FBQSxVQUFBLENBQUEsUUFBQSxDQUNFLFFBQVMsQ0FBQSxFQWFULFdBQUEsQ0FBQSxFQUNGLFFBQ0UsVUFBQSxPQUFBLEdBQ0EsT0FBQSxHQUNBLFVBQUEsT0FBQSxFQUFBLE9BQWEsQ0FDYixPQUFBLEVBQUEsT0FBQSxFQUNBLE9BQUEsR0FLQSxNQUFBLENBQ0EsR0FDQSxHQUFBLENBQUEsT0FBQSxhQUFBLENBQUEsR0FBQSxNQUNGLENBYUUsUUFBQSxLQUFBLENBQUEsRUFDRixFQUNFLFNBQUEsR0FBQSxDQUFBLEVBU0EsR0FBQSxFQUtBLENBQ0YsU0FBQSxHQUFBLENBQUEsRUFDRSxRQUFBLEtBQUEsQ0FBQSxFQUtBLENBQ0YsU0FBQSxHQUFBLENBQUEsRUFDRSxHQUFBLEVBR0EsQ0FLQSxTQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxHQUFBLENBRUEsR0FERixFQUFBLGVBQUEsQUFBQSxFQUNFLEVBQUEsS0FBQSxDQUFBLENBQUEsZUFBQSxFQUFBLEtBQ0UsQUFBQSxFQUlOLENBQUEsTUFBQSxFQUFBLENBQ0YsV0FBQSxXQUNBLE1BQVMsQ0FDUCxFQVNJLENBQ0YsQ0FDRSxTQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0YsR0FBQSxDQUVKLEdBREEsRUFBQSxhQUFBLEFBQUEsRUFDUyxFQUFBLEtBQUEsQ0FBQSxDQUNQLGVBQVEsRUFBUixLQUFBLENBQ0UsY0FBQSxJQUFBLEVBQUEsR0FBQSxDQUFBLEVBQUEsU0FBQSxDQUFBLElBQ0EsRUFDRSxDQUFBLE1BQUEsRUFBSSxDQUNKLFdBQUEsV0FFQSxNQUFBLENBQ0YsRUFDRSxDQU9GLENBQ0UsU0FBQSxHQUFZLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQU9kLE1BTEosQ0FERSxFQUFBLEdBQUEsRUFBQSxFQUNGLEdBQUEsQ0FBQSxFQUNBLEVBQUEsT0FBUyxDQUFBLENBQUEsUUFBQSxJQUFBLEVBQ1AsRUFBQSxRQUFJLENBQUEsV0FDSixHQUFpQixFQUFDLEVBQ2hCLEVBQ0EsQ0FFRixDQUNGLFNBQUEsR0FBQSxDQUFBLEVBR0UsTUFEQSxDQURGLEVBQVMsR0FBQSxFQUFBLEVBQ1AsR0FBSSxDQUFBLEVBQ0EsQ0FFQSxDQUlBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0UsSUFBQSxFQUFBLEVBQUEsSUFBQSxDQUFBLHdCQUFBLENBQ0UsR0FBQSxZQUFLLE9BQUwsRUFBQSxDQUNFLElBQUEsRUFBQSxFQUFJLEtBQUEsQ0FDRixFQUFBLE9BQUEsQ0FBQSxXQUNBLE9BQUEsRUFBQSxFQUNBLEVBQ0YsRUFBQSxRQUFBLENBQUEsV0FDQSxHQUFBLEVBQUEsRUFBQSxFQUNGLENBQ0UsQ0FDQSxJQUFBLEVBQUEsRUFBQSxTQUFBLEFBQ0EsUUFBQSxHQUNGLFlBQUEsT0FBQSxFQUFBLGlCQUFBLEdBQ0EsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxXQUNFLEdBQUEsRUFBQSxFQUFBLEdBQ0EsWUFBQSxPQUFBLElBQ0EsT0FBQSxHQUNKLEdBQUEsSUFBQSxJQUFBLENBQUEsRUFESSxFQUNKLENBQUEsRUFDQSxHQUFBLEdBQUEsQ0FBQSxLQUFBLENBQUEsQ0FDRixJQUFBLEVBQUEsRUFBQSxLQUFBLENBQ0EsSUFBQSxDQUFBLGlCQUFhLENBQUEsRUFBQSxLQUFBLENBQUEsQ0FDYixlQUFBLE9BQUEsRUFBQSxFQUFBLEVBQ0EsRUFDQSxDQUFBLENBQ0EsQ0EwU0EsSUFBQSxHQUFBLE1BQUEsRUFBMkIsTUFDM0IsR0FBQSxDQUFBLEVBQ0EsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxFQUFBLEtBQUEsQ0FDQSxPQUFBLEVBQ0EsR0FBQSxFQUFBLEtBQUEsRUFBQSxHQUNBLEdBaUJJLEVBQ0UsRUFBQSxLQUFBLENBQ0UsRUFDQSxFQU1PLENBQ0gsU0FBQSxHQUNBLENBQUEsQ0FPQSxDQUFBLENBSUYsQ0FBQSxDQUNGLENBQUEsQ0FDRSxDQUFBLEVBRUosRUFBQSxFQUFBLE1BQUEsQ0FBQSxJQUFBLEVBQUEsRUFDUyxHQUFBLENBQ1QsR0FBQSxRQUFBLEVBQUksQ0FDRixJQUFBLEVBQUEsQ0FBQSxFQUNBLElBQUEsSUFBQSxLQUFBLEVBQ0UsUUFBQSxHQUFBLEVBQVUsQ0FBQSxDQUFWLENBQVUsQ0FBUyxDQUFDLENBQVMsRUFBRyxBQUFILENBRy9CLE1BQUEsRUFBRSxRQWdCSixDQWZJLEdBQUEsR0FDRixFQUFBLEdBQ0YsRUFBQSxFQU9BLEVBQ0EsRUFDQSxFQUNGLEdBRUEsRUFBQSxLQUNFLE9BQUEsR0FBSSxLQUtOLEdBTE0sQ0FLTixHQUFLLEdBQXNCLEdBQzNCLEVBQUEsS0FBQSxFQUFPLEVBQ1QsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQU5JLENBT04sRUFBUSxLQUNKLEdBUEUsR0FBQSxFQUFPLEVBQVAsR0FDRixHQUFBLEVBQUEsRUFBQSxFQUFBLENBWUosQ0FDRixTQUFBLEdBQ0UsQ0FBQSxDQUNBLENBQUEsQ0FDQSxDQUFBLENBS0EsQ0FBQSxDQUNGLENBQUssRUFFTCxHQUFBLE9BQUEsRUFBQSxDQUNFLElBQUEsRUFBQSxFQUFBLElBQUEsT0FDRixBQUNFLFlBQUEsT0FBQSxHQUVKLEdBQUEsRUFBQSxFQUNGLEtBQUEsSUFBQSxFQUFBLFlBQUEsRUFDQSxPQUFTLEVBQUEsT0FBQSxFQUVQLEFBeUJRLENBVkYsRUFBQSxHQUNFLEVBQUEsSUFBQSxDQUVBLEtBQ0EsRUFDRixFQUNFLEVBQUEsSUFBSSxDQUNKLEVBQUEsRUFHQSxHQUFBLENBQUEsRUFBQSxHQUFBLENBQ0EsRUFBQSxNQUFBLENBQUEsRUFDRixFQUFBLEtBQUEsQ0FBQSxJQTFCSixFQUFBLEdBQUEsQ0FBQSxHQUNFLEVBQ00sSUFBQSxDQUFBLEVBSUosR0FDRSxFQUNBLEVBQ0YsRUFDQSxFQUNGLEVBQUEsQ0FnQkUsQ0FHRSxHQUZBLEVBQUEsRUFBQSxLQUFBLENBRUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUtBLElBQUEsRUFBQSxFQUFBLGFBQUEsQ0FHSixHQUFBLENBREksRUFBQSxRQURGLENBQ0UsQ0FERixFQUFBLE9BQUEsQUFBQSxFQUNjLEVBQUEsRUFBQSxFQUNoQixFQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQSxHQUFBLENBQ0YsT0FBRSxHQUFGLEVBQUEsRUFBQSxFQUNFLENBS04sT0FKSSxFQUFBLEtBQUEsRUFBQSxFQUNBLEFBQ0YsR0FERSxHQUFBLEVBQUEsRUFBQSxFQUNGLEdBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FDQSxFQUFBLE1BQVEsQ0FBQSxFQUNWLEVBQUEsS0FBQSxDQUFBLENBQ0EsQ0FDRSxTQUFJLEdBRUEsQ0FBQSxDQUNBLENBQUEsQ0FDQSxDQUFBLENBQ0EsQ0FBQSxDQUNGLENBQUEsRUFFSixHQUFBLE9BQVMsRUFBQSxDQUNQLElBQUksRUFBWSxFQUFBLGFBQ2QsQ0FHSixHQUNBLEdBQVMsRUFBQSxJQUNQLEVBQUssR0FBQSxHQUFjLEVBQVksR0FBSyxDQUVsQyxHQUNFLEdBQUEsQ0FBQSxFQUNBLEVBQUEsWUFBQSxDQUFBLEVBQUEsR0FDQSxHQUFBLEVBQUEsR0FJRSxPQUNGLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUNFLEdBQUEsRUFBQSxFQUFnQixRQUpoQixJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQUFBQSxDQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FNQSxBQU5BLENBWUEsT0FBQSxHQUNBLEVBQ0YsRUFDRSxFQUNGLEVBQ0EsRUFFRSxDQUNBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDRixJQUFBLEVBQUEsRUFBQSxZQUFBLENBQ0UsRUFBQSxFQUFTLFFBQUEsQ0FFVCxFQUFBLE9BQUEsRUFBQSxFQUFBLGFBQUEsQ0FBQSxLQUNGLEdBQUEsV0FBQSxFQUFBLElBQUEsQ0FBQSxDQUNFLEdBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEFBQUEsQ0FBQSxDQUFBLENBR0EsR0FGQSxFQUNGLE9BQUEsRUFBQSxFQUFBLFNBQUEsQ0FBQSxFQUFBLEVBQ0UsT0FBQSxFQUFBLENBRUosSUFBQSxFQUFjLEVBRGQsRUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FDYyxPQUFZLEdBQzVCLEVBQ0YsRUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLFVBQUEsQ0FDUyxFQUFBLEVBQUEsT0FBQSxDQUtQLEVBQUEsVUFBQSxDQUNFLEVBQUEsQ0FBQSxDQUNGLE1BQUssRUFBYyxVQUFpQixDQUFFLEVBQUEsRUFBUyxLQUEvQyxDQUFBLEtBQ0UsT0FBSSxHQUlKLEVBQ0UsRUFDQSxFQUNBLEVBTUUsQ0FDQSxHQUFBLElBQUEsRUFBQSxTQUFBLENBQUEsQ0FBQSxDQWlCQSxPQUNFLEVBQUksS0FBQSxDQUFBLEVBQW1CLFVBQXZCLENBQUEsV0FDQSxHQUNFLEVBQ0EsRUFPRixPQUFBLEVBQVMsRUFBVCxTQUFBLENBQUEsRUFBQSxFQUNFLEdBNUJOLEVBQUEsYUFBQSxDQUFBLENBQUEsVUFBQSxFQUFBLFVBQUEsSUFBQSxFQUNFLE9BQUEsR0FLQSxHQUNBLEVBQ0EsT0FBSSxFQUFBLEVBQXNCLFNBQUEsQ0FBYSxNQUdyQyxPQUFBLEVBQ0UsR0FBQSxFQUFBLEdBQ0YsS0FDRixHQUFBLEVBaUJBLE1BR0EsT0FBQSxHQUNBLEdBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUNGLEdBQUEsRUFBQSxHQUNFLEdBQUEsR0FDRixFQUFBLGFBQUEsQ0FBQSxJQUFBLENBQUEsRUFDQSxFQUFBLEtBQUEsR0FBQSxHQUFBLEVBQUEsTUFDRSxLQUtBLEdBQUEsRUFBQSxDQUNFLENBSUYsT0FEQSxHQUFBLEVBQUEsRUFBQSxFQUFnQixHQUNoQixFQUFBLEtBQUEsQUFDRixDQUNFLFNBQUEsR0FLQSxDQUFBLENBQ0YsQ0FBQSxDQUNFLENBQUEsQ0FLQSxDQUFBLEVBSUYsSUFBQSxFQUFBLEtBdUJKLE9BYk0sRUFBQSxhQUFBLENBQUEsQ0FDRixVQUFBLEVBQ0UsVUFYQSxDQVdBLENBTEEsT0FBQSxFQUNBLEtBQ0YsQ0FBQSxPQUFBLEdBQUEsYUFBQSxDQUFBLEtBQUEsQ0FBQSxDQVFGLEVBQ0EsT0FBQSxHQUFjLEdBQVksRUFBMUIsTUFDRixLQUNGLEdBQUEsR0FDQSxPQUFTLEdBQ1AsR0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEdBQ0EsSUFJQSxDQUNBLFNBQUEsR0FBUyxDQUFBLENBQWEsQ0FBYSxFQUduQyxJQUFBLEVBQUEsRUFBWSxHQUFBLENBR2QsR0FBQSxPQUFBLEVBQ0EsT0FBUyxHQUNQLE9BQUEsRUFBQSxHQUFBLEVBQ0EsRUFBQSxDQUFTLEtBQWEsRUFBQSxPQUFBLENBQVMsS0FFL0IsQ0FDQSxHQUFBLFlBQWlCLE9BQUEsR0FDZCxVQUFhLE9BQVEsRUFDMUIsTUFBQSxNQUFBLEVBQUEsT0FDQSxPQUFTLEdBQUEsRUFBQSxHQUFBLEdBQUEsQ0FBQSxJQU1QLEVBQWdCLEtBQUEsRUFBQSxPQUFBLENBU2xCLENBQ0EsQ0FNRSxTQUFJLEdBQ0osQ0FBQSxDQUNFLENBQUEsQ0FDQSxDQUFBLENBQ0EsQ0FBQSxDQUNFLENBQUEsUUFrQ0UsQ0EzQkYsR0FBQSxHQUNGLEVBQUEsR0FDRSxFQU1BLEVBQ0YsRUFDRSxFQU1BLEtBQUEsRUFRQSxHQUVBLEVBQUEsS0FDRSxPQUFBLEdBQUEsS0FrQkEsR0FsQkEsQ0FrQkEsR0FBUyxHQUFULEdBQ0UsRUFBQSxLQUFBLEVBQUEsRUFDRixHQUFBLEVBQUEsRUFBQSxFQUFBLEVBZEEsQ0FlRixFQUNFLEtBQUEsR0FmQSxHQUFBLEVBQUEsRUFBQSxHQUNFLEdBQUksRUFBQSxFQUF5QixFQUFBLENBb0JqQyxDQUNGLFNBQUEsR0FDRSxDQUFBLENBTUEsQ0FBQSxDQUNGLENBQUEsQ0FDRSxDQUFBLENBQ0YsQ0FBQSxDQUNFLENBQUEsUUE4Q04sQ0E1Q00sR0FBUyxHQXdCVCxFQUFBLFdBQWdCLENBQUEsS0FDaEIsRUFBQSxHQUNGLEVBQ0UsRUFNQSxFQUVBLEdBRUEsR0FBQSxHQU1KLEVBQUEsS0FDRixPQUFBLEdBQUEsS0FnQkksR0FoQkosQ0FnQlksR0FBYSxHQUFyQixHQUNFLEVBQUssS0FBTCxFQUFBLEVBQ0EsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQWpCTixDQWtCTSxFQUFBLEtBQUEsR0FYSixHQUFBLEVBQUEsRUFDRSxHQUNGLEdBQStCLEVBQU8sRUFBUyxFQUFBLENBVXpDLENBT0EsU0FBQSxHQUNBLENBQUEsQ0FDRixDQUFBLENBQ0UsQ0FBQSxDQUNGLENBQUEsQ0FDRSxDQUFBLEVBNEJBLEdBTkEsR0FBQSxHQU1BLE9BQUEsRUFBQSxTQUFBLENBQUEsQ0FDRixJQUFBLEVBQUEsR0FDRSxFQUFBLEVBQUEsV0FBQSxDQU9BLFVBQUEsT0FBQSxHQUdBLE9BQUEsSUFDRixFQUFBLEdBQUEsRUFBQSxDQUFBLENBUUYsRUFSRSxBQVFGLGFBQUEsQ0FDQSxPQUFBLENBUkksRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBUVUsS0FBQSxFQUFBLEtBQVksSUFBMUIsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsS0FDRixFQUFBLE9BQUEsQ0FBQSxHQUNGLEVBQUEsU0FBQSxDQUFBLEVBQ0EsRUFBUyxlQUFBLENBQUEsRUFNSCxDQUZKLEVBQUksRUFBWSxTQUFBLEFBQWUsRUFFdkIsS0FBQSxDQUFBLEVBR0osRUFBQSxLQUFRLENBQUEsRUFBUixhQUFBLENBQ0UsRUFBQSxJQUFBLENBQUEsQ0FBQSxFQUNFLEdBQUEsR0FDQSxFQUFBLEVBQVEsV0FDTixDQUlGLEVBQUEsT0FBQSxDQUNGLFVBQUEsT0FBQSxHQUFBLE9BQUEsRUFDRSxHQUFBLEdBQ0EsR0FFQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUEsQ0FFQSxZQUFBLE9BREYsQUFDRSxFQURGLEVBQUEsV0FFRixhQUZFLEFBQUEsSUFFRixHQUNBLEVBQ0YsRUFDSixFQUNJLEdBRUYsRUFBSSxLQUFZLENBQUEsRUFBZSxhQUFBLEFBQUEsRUFJakMsWUFBQSxPQUFBLEVBQUEsd0JBQUEsRUFDQSxZQUFTLE9BQUEsRUFBQSx1QkFBQSxFQUNQLFlBQUEsT0FBQSxFQUFBLHlCQUFBLEVBQ0UsWUFBQSxPQUFBLEVBQUEsa0JBQUEsR0FDRSxDQUFBLENBQUEsRUFBQSxLQUFBLENBQ0EsWUFBTSxPQUFRLEVBQUEsa0JBQUEsRUFPZCxFQUFBLGtCQUFBLEdBQ0YsWUFBQSxPQUFBLEVBQUEseUJBQUEsRUFDRSxFQUFBLHlCQUFBLEdBQ0EsSUFBQSxFQUFBLEtBQUEsRUFDRixHQUFBLG1CQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsQ0FBQSxNQUNBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FDRSxLQUNBLEVBQUEsS0FBQSxDQUFBLEVBQUEsYUFBQSxBQUFBLEVBQ0EsWUFBQSxPQUFBLEVBQUEsaUJBQUEsR0FDQSxDQUFBLENBQUEsS0FBQSxFQUFBLE9BQUEsQ0FBQSxDQUNBLEVBQUEsQ0FBQSxDQUNGLE1BQUEsR0FBSyxPQUFMLEVBQUEsQ0FDRSxFQUFBLEVBQWUsU0FBQSxDQVNmLElBQUEsRUFBQSxFQUFBLGFBQUEsQ0FDRixFQUFBLEdBQUEsRUFBQSxHQUNFLEVBQUEsS0FBQSxDQUFBLEVBQ0osSUFBQSxFQUFBLEVBQUEsT0FBQSxDQUNGLEVBQUEsRUFBQSxXQUFBLENBQ0EsRUFBUyxHQUNQLFVBQUksT0FBZ0IsR0FDcEIsT0FDRSxJQUdBLEVBQUEsR0FBQSxFQUFBLENBQUEsQ0FDQSxJQUFBLEVBQ21CLEVBQVksR0FGL0IscUJBR3dCLENBRWpCLEVBQ1QsWUFBQSxPQUFBLEdBQ0YsWUFBQSxPQUFBLEVBQUEsdUJBQUEsQ0FDQSxFQUFTLEVBQUEsWUFBQSxHQUFBLEVBQ1AsR0FDQSxZQUFXLE9BQVksRUFBUyxnQ0FBaEMsRUFDRSxZQUFhLE9BQUEsRUFDTix5QkFBeUIsRUFDNUIsSUFBSSxJQUFKLENBQUEsQ0FBQSxFQUNBLEdBQ0EsRUFJRixFQUNGLEVBQ0YsR0FLRixHQUFBLENBQUEsRUFDQSxJQUFBLEVBQVMsRUFBQSxhQUFBLENBQ1AsRUFBUSxLQUFBLENBQUEsRUFDTixHQUFBLEVBQUEsRUFBQSxFQUFBLEdBQ0EsS0FDQSxFQUFBLEVBQUEsYUFBQSxDQUNFLEdBQUEsSUFBQSxHQUFBLElBQ0EsWUFBQSxPQUFrQixJQUVsQixHQUNGLEVBQ0UsRUFDQSxFQUNGLEdBTkUsQUFRQSxFQUFBLEVBQUEsUUFOQSxLQU1BLEFBQUEsRUFDRixDQUFBLEVBQ0UsSUFDQSxHQU1BLEVBQ0YsRUFDRSxFQUNKLEVBQ0YsRUFDUyxFQUNILEVBQUEsQ0FDQSxFQUNFLEVBQUEsQ0FFQSxZQUFJLE9BQWdCLEVBQXBCLHlCQUFBLEVBQ0EsWUFBQSxPQUFBLEVBQUEsa0JBQUEsR0FDQSxDQUFBLFdBQUEsT0FBQSxFQUFBLGtCQUFBLEVBSUYsRUFBQSxrQkFBQSxHQUNGLFlBQUEsT0FBQSxFQUFBLHlCQUFBLEVBQ0YsRUFBQSx5QkFBQSxFQUFBLENBQUEsQ0FDSyxZQUFjLE9BQVksRUFBTyxpQkFBUyxHQUM3QyxDQUFBLENBQUEsS0FBQSxFQUFBLE9BQUEsQ0FBQSxDQUFBLENBQ0EsR0FBQSxVQUFxQixPQUFyQixFQUFBLGlCQUFBLEdBQ0UsQ0FBQSxDQUFBLEtBQUEsRUFBQSxPQUFBLENBQUEsQ0FDQSxFQUFBLGFBQUEsQ0FBQSxFQUNBLEVBQUEsYUFBQSxDQUFBLENBQUEsQ0FBQSxDQUNFLEVBQUEsS0FBQSxDQUFBLEVBQ0EsRUFBQSxLQUFBLENBQUEsRUFDQSxFQUFBLE9BQUEsQ0FBQSxFQUNGLEVBQUEsQ0FBQSxDQUFBLEVBQ0UsRUFBQSxVQUFJLE9BQVUsRUFBUyxpQkFBdkIsRUFDQSxFQUFBLENBQUUsS0FBVyxFQUFHLE9BQUEsQ0FDVixDQUVOLEVBQUEsRUFBQSxDQUFBLEFBQ0YsS0FBQSxDQUNFLEVBQUEsRUFBQSxTQUFBLENBQ0osR0FBQSxFQUFBLEdBRUYsRUFBQSxHQUFBLEVBREUsRUFBQSxFQUFjLEtBQ2hCLFFBREUsRUFFSixFQUFBLEtBQUEsQ0FBQSxFQUNBLEVBQVMsRUFBQSxZQUFBLENBSVAsRUFBTyxFQUFTLE9BQUEsQ0FDZCxFQUFJLEVBQUosV0FBQSxDQUNBLEVBQVEsR0FDTixVQUFLLE9BQUwsR0FDQSxPQUFBLElBQ0EsRUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUVFLENBRkYsQUFFRSxFQUNGLFlBQUEsT0FGRSxBQUVGLEVBRkUsRUFBQSx3QkFBQSxBQUFBLEdBR0YsWUFBQSxPQUFBLEVBQUEsdUJBQUEsQUFBQSxHQUNFLFlBQ0UsT0FBUyxFQUFNLGdDQUNBLEVBRWYsWUFBQSxPQUFJLEVBQWMseUJBQXdCLEVBQzFDLENBQUEsSUFBQSxHQUFBLElBQUEsQ0FBQSxDQUFBLEVBQ0YsR0FDQSxFQUNGLEVBQ0UsRUFDSixHQUVBLEdBQWEsQ0FBQSxFQUVYLEVBQUEsRUFBZ0IsYUFBQSxDQUNkLEVBQUEsS0FBQSxDQUFRLEVBQ1IsR0FBSSxFQUF1QixFQUN6QixFQUFjLEdBQ2hCLEtBQ0EsSUFBQSxFQUFJLEVBQUosYUFBQSxDQUNFLElBQUEsR0FDQSxJQUFBLEdBQ0YsSUFDQSxPQUFBLEdBQ0UsT0FBQSxFQUFBLFlBQUEsRUFDQSxHQUFBLEVBQUEsWUFBQSxHQUNBLENBQUEsV0FBQSxPQUFBLElBQ0YsR0FDQSxFQUNGLEVBQ0osRUFDRixHQUVJLEVBQWlCLEVBQVUsRUFOdkIsV0FNdUIsQUFBM0IsRUFDRSxDQUFBLEVBRUEsSUFHQSxHQUNGLEVBRUYsRUFpQ0YsRUFDTSxFQUVBLEVBQ0UsRUFDSixJQUVLLE9BQVAsR0FDRixPQUFBLEVBQUEsWUFBQSxFQUNBLEdBQUEsRUFBQSxhQUFBLENBQUEsRUFDUSxFQUFBLENBS0YsWUFBa0IsT0FBQSxFQUFBLDBCQUFBLEVBQ2IsWUFBQSxPQUFvQixFQUFBLG1CQUE3QixHQUNBLENBQUEsV0FBQSxPQUFBLEVBQUEsbUJBQUEsRUFDRixFQUFBLG1CQUFBLENBQUEsRUFBQSxFQUFBLEdBQ1MsWUFBQSxPQUFBLEVBQUEsMEJBQXVDLEVBRTNDLEVBQVMsMEJBQUEsQ0FZWixFQUNXLEVBWWIsRUFBQSxDQUNTLENBQ0gsWUFBTyxPQUFBLEVBQUEsa0JBQXVCLEdBQzlCLENBQUEsQ0FDRSxLQUFBLEdBQUEsQ0FBQSxDQVFOLFlBQUEsT0FBQSxFQUFBLHVCQUFBLEdBQ00sQ0FBQSxDQUFrQixLQUF0QixFQUFBLElBQUEsQ0FBQSxDQUFBLEVBQ0UsRUFBQSxVQUFBLE9BQUEsRUFBQSxrQkFBQSxFQUdBLElBQUEsRUFBQSxhQUFBLEVBQ0YsSUFBQSxFQUFBLGFBQUEsR0FDRSxDQUFBLENBQVksS0FBQSxHQUFjLENBQUEsQ0FDMUIsWUFDRSxPQUFBLEVBQ0MsdUJBQUEsRUFFRCxJQUFhLEVBQUEsYUFBQSxFQUNiLElBQUEsRUFBQSxhQUFBLEdBQ0EsQ0FBQSxDQUFBLEtBQUEsRUFBQSxJQUFBLENBQUEsQ0FDRixFQUFBLGFBQUEsQ0FBQSxFQUNBLEVBQVUsYUFBVixDQUFBLENBQUEsQ0FBQSxDQUNFLEVBQUEsS0FBQSxDQUFBLEVBQ0EsRUFBQSxLQUFJLENBQUEsRUFHRixFQUFBLE9BQUMsQ0FBQSxFQU9ILEVBQUksQ0FBQSxDQUFNLENBQ1IsR0FBQSxVQUFBLE9BQUEsRUFBQSxrQkFBQSxFQUNBLElBQUEsRUFBQSxhQUFBLEVBQ0UsSUFBQSxFQUFJLGFBQUosR0FDQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsRUFDQSxZQUFBLE9BQUksRUFBQSx1QkFBaUMsRUFDckMsSUFBQSxFQUFBLGFBQ0csRUFDSCxJQUFBLEVBQUEsYUFBQSxHQUtBLENBQUEsQ0FBQSxLQUFJLEVBQU0sSUFBQSxDQUFBLENBQ1IsRUFBQSxFQUFBLENBQUEsQUFJRSxDQTRDTixPQTNDTSxFQUFBLEVBRUEsR0FBQSxFQUFBLEdBQ0EsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsQUFBQSxDQUFBLENBQ0YsR0FBQSxHQUNBLEVBQUEsRUFBQSxLQUFBLElBQUEsQ0FDQSxFQUNBLEdBQUEsWUFBQSxPQUFTLEVBQUEsd0JBQ0csQ0FNZCxLQUNBLEVBQUEsTUFBQSxHQUNGLEVBQUEsS0FBQSxFQUFBLEVBQ0EsT0FBQSxHQUFBLEdBQ0EsRUFBSSxLQUFNLENBQUEsQ0FBVixFQUNGLEVBQ0YsRUFBQSxLQUFBLENBQ0EsS0FDRSxHQUVBLEVBQUEsS0FBQSxDQUFBLEdBQ0YsRUFDQSxLQUNFLEVBQ0EsRUFBQSxDQUNBLENBQ0UsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUNBLEVBQUEsYUFBQSxDQUFBLEVBQUEsS0FBQSxDQUNFLEVBQUEsRUFBTSxLQUFBLEFBQU0sRUFDZCxFQUFBLEdBQ0UsRUFDRixFQUNFLEdBT0YsQ0FDRSxDQUNBLFNBQUEsR0FDRixDQUFBLENBQ0EsQ0FBQSxDQUNFLENBQUEsQ0FDRixDQUFBLEVBY0EsT0FaRixLQUNBLEVBQUEsS0FDRyxFQUFBLElBSUQsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQU1BLEVBQUksS0FBQSxBQUNKLENBb0JBLElBQUEsR0FBQSxDQUNGLFdBQUEsS0FDQSxZQUFBLEtBZ0JGLFVBQUEsRUFDRixnQkFBQSxJQUNBLEVBQ0YsU0FBQSxHQUFBLENBQUEsRUFDQSxNQUFBLENBQUEsVUFBQSxFQUFBLFVBQUEsSUFBQSxDQUNGLENBQ0EsU0FBUyxHQWdCUCxDQUFLLENBQ0wsQ0FBQSxDQUNBLENBQ0UsRUFJb0QsT0FBN0IsRUFBQSxPQUFBLEVBQUEsRUFBQSxVQUFBLENBQUEsQ0FBQSxFQUFBLEVBQW1CLElBQUEsR0FBQSxFQUFBLENBQUEsQ0FBVSxDQUFnQixDQUtsRSxTQUFBLENBTHdDLEVBS25DLENBQXNCLENBQUEsQ0FBQSxDQUFBLENBQ3pCLEVBaUJGLElBRUYsRUFGRSxFQUFBLEVBQUEsWUFBQSxDQUNBLEVBQUEsQ0FBQSxFQUNGLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEFBQUEsQ0FBQSxDQTBCSSxHQXpCTixDQUFBLEVBQUEsQ0FBQSxDQUFBLEdBV0YsRUFBQSxDQUNBLE9BQVMsR0FBQSxPQUFBLEVBQUEsYUFBQSxBQUFBLEdBQ0YsQUFDSCxDQURHLEtBQ0MsR0FBSixPQUFBLEFBQUEsQ0FBQSxDQUFBLENBQ0EsSUFDUyxFQUFjLENBQUEsRUFBTyxFQUM1QixLQUFLLEVBQVEsQ0FETixHQUNNLENBQUEsQ0FLWCxFQUFJLElBQVcsQUFDQyxFQURELEdBQ2IsS0FBYyxBQUFBLENBQUEsQ0FDaEIsRUFBQSxLQUFRLEVBQU0sSUFDZCxPQUFBLEVBQUEsQ0FDRSxHQUFBLEdBQUssQ0FJVCxHQUhFLEVBQ0UsR0FBQSxHQUNGLEdBQUEsR0FDRixHQUFBLENBQ0YsSUFDQSxFQURBLEVBQUEsR0FHSyxHQUFBLEVBQUEsRUFBQSxDQUNILEVBQUEsQ0FFRSxJQURGLEVBQTRCLEVBRTFCLEVBQVksR0FDZCxJQUFBLEVBQUEsUUFBQSxFQUVBLEFBQ0YsR0FBQSxDQUFBLEdBWUcsUUFSRSxDQVFnQixDQVJoQixHQU1QLEVBQUEsWUFBQSxFQVZFLENBQ0YsRUFBQSxHQVdBLEVBVkEsTUFBQSxDQUNGLENBY1EsRUFBZSxDQUVuQixDQUNBLE9BQUEsR0FDRixFQUFBLFVBQUEsR0FBQSxDQUFBLENBQ00sV0FDSixFQUNKLFlBQ0EsT0FBQSxHQUNnQixDQUFBLEdBQUEsR0FBQSxTQUFBLEVBQ1QsRUFFUCxLQUNBLFVBQUEsV0FDTSxnQkFBUyxJQUNQLEVBZ0JGLENBYkMsRUFBa0IsR0FNZCxHQUdQLEtBQ0YsS0FDRixFQUFBLEVBRTJCLFNBQXpCLENBQUEsRUFDTyxFQUNFLE1BQUEsQ0FBYSxFQUN0QixFQUFxQixLQUFBLENBQUEsRUFDWixHQUNBLEVBQ1QsR0FBQSxLQUNBLEVBQUEsRUFBQSxDQUFBLENBQ0EsRUFBQSxDQUFpQixDQUNqQixDQUNBLEdBQUEsR0FBQSxFQUNBLENBRUEsR0FDQSxRQUZBLENBRUEsQ0FGQSxFQUFBLGFBQUEsQUFBQSxBQUdBLEdBQUEsUUFBQSxDQUFBLENBQUEsRUFBQSxTQUNFLENBREYsQUFBQSxFQVNBLE9BQ08sR0FBd0IsR0FDM0IsRUFBb0IsS0FBSyxDQUFBLEdBQ25CLEVBQUEsS0FDUixDQUNFLFdBSUEsS0FHQSxHQUFBLEVBQ0YsT0FHRixDQUZBLEVBQUEsRUFBQSxRQUFBLENBQ0EsRUFBQSxFQUFBLFFBQUEsQ0FDQSxJQUVGLEdBQVMsR0FFUCxFQUFBLEVBSEYsQ0FJRSxDQUFBLEtBQUEsU0FBZ0IsU0FBQSxDQUFBLEVBRmhCLENBZ0JBLENBaEJBLEVBQUEsSUFBQSxFQXVCRixFQUFBLEdBQ0EsRUFDTSxFQUNKLEVBQ0EsTUFFTyxFQUFULE1BQUEsQ0FBQSxFQUNNLEVBQUEsTUFBQSxDQUFBLEVBQ0osRUFBQSxPQUFBLENBQUEsRUFDQSxFQUFBLEtBQUEsQ0FBQSxFQUVPLENBRFQsRUFBQSxFQUFBLEtBQUEsQUFBQSxFQUNBLGFBQUEsQ0FBQSxHQUFBLEdBQ0UsRUFBQSxVQUFBLENBQUEsR0FDQSxFQUtRLEVBU1YsR0FFTSxFQUFBLGFBQUosQ0FBQSxHQUNBLENBQUEsR0FHQSxHQUFJLEdBRUosR0FBQSxFQUFBLEdBQ0EsQ0FHSSxHQUNFLFFBSE4sQ0FHTSxDQUhOLEVBQUEsYUFBQSxBQUFBLEdBTVEsUUFERixDQUFBLEFBQ0UsQ0FERixFQUFBLFNBQ0UsQ0FERixBQUFBLEVBRUksQ0FDQSxHQUFBLEVBQ0EsSUFBQSxFQUFBLEFBQ0YsS0FEUSxFQUNSLEdBQUEsR0FDQSxFQUFBLEtBQUEsRUFBQSxLQUNBLEVBQUEsR0FDQSxFQUNFLEVBQ0EsRUFBQSxDQUNBLENBQ0EsT0FBQSxFQUFBLGFBQUEsRUFDQSxDQUFBLEVBQUEsR0FDQSxFQUNFLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FHQSxFQUFBLEtBQUEsRUFBYSxJQUNiLEVBQU0sSUFBQSxDQUFOLEVBQ0YsRUFBQSxDQUFBLEdBQ0EsRUFBQSxFQUFBLFFBQUEsQ0FDRixFQUFBLEVBQUEsSUFBQSxDQUNHLEVBQUEsR0FJTCxDQUFBLEtBQUEsVUFBQSxTQUFBLEVBQUEsUUFBQSxBQUFBLEVBQ0YsR0FFQSxFQUFBLEdBQ0EsRUFDTyxFQUNQLEVBQ0YsTUFFTyxFQUFLLEtBQUEsRUFBQSxFQUNkLEVBQUEsTUFBQSxDQUFBLEVBQ0EsRUFBQSxNQUFBLENBQUEsRUFDQSxFQUFBLE9BQUEsQ0FBQSxFQUNBLEVBQUEsS0FBQSxDQUFBLEVBQ0EsR0FJQSxFQUNGLEVBQUEsS0FBQSxDQUNBLEtBQ1MsR0FHSCxDQURHLEVBQUEsRUFBQSxLQUFBLEFBQUEsRUFDSCxhQUFKLENBQ0EsR0FBQSxHQUNJLEVBQUEsVUFBaUIsQ0FBQSxHQUVyQixFQVNNLEVBQ0UsR0FFRixFQUFJLGFBQUosQ0FBQSxHQUNBLEVBQUEsQ0FBQSxDQUFBLE1BQ0UsR0FDRSxHQUFBLEdBQ0EsR0FBQSxHQUNBLENBR0YsR0FGRSxDQUVGLENBREEsRUFBSyxXQUFMLEVBQUEsRUFBQSxXQUFBLENBQUEsT0FBQSxDQUNBLElBQUEsRUFBQSxFQUFBLElBQUEsQ0FDRSxFQUFJLEVBRUYsQ0FEQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQ0EsS0FBQSxDQUFBLEdBQ0EsRUFBQSxNQUFBLENBQUEsRUFDQSxHQUFBLENBQUEsTUFBQSxFQUFBLE9BQUEsS0FBQSxNQUFBLElBQUEsR0FDRixFQUFBLEdBQ0EsRUFDRyxFQUlELEVBRUYsTUFBQSxHQUNBLElBQ0YsR0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEdBQ0UsRUFBQSxJQUFBLEVBQUEsQUFBQSxFQUFBLFVBQUEsQUFBQSxFQUNBLElBQU0sRUFDUixDQUVFLEdBQ0YsT0FGRSxFQUVGLENBRkUsRUFBQSxHQWtCSSxLQUpGLENBSUUsQ0FIQSxJQUFBLENBTEosQ0FQQSxBQVlJLENBSk4sSUFBQSxBQUFBLEVBQUEsQ0FSRSxFQVlJLENBWkosRUFBQSxDQUFBLENBQUEsQ0FRRixDQUFBLENBQ0UsRUFDQSxHQUFRLEVBQUEsR0FFSixFQUFXLGNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUNiLEVBQ0EsQ0FBQSxHQUNFLElBQUksRUFBSixTQUFBLENBRUUsTUFDQSxFQUFBLFNBQUEsQ0FBQSxFQUNBLEdBQUksRUFBVSxHQUNkLEdBQUEsRUFBYSxFQUFTLEdBQ2pCLEdBRUgsT0FBQSxFQUFBLElBQUEsRUFBQSxLQUlGLEVBQUEsR0FDQSxFQUNGLEVBQ0osRUFFQSxLQUNBLE9BQUEsRUFBQSxJQUFBLEVBQ0EsQ0FBQSxDQUFBLEtBQUEsRUFBQSxJQUNGLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUNFLEVBQUEsSUFBQSxDQUFBLEVBQ0EsRUFBQSxBQUFBLEVBQUEsV0FBQSxDQUNBLEdBQUEsR0FDQSxFQUFBLFdBQUEsRUFFQSxHQUFBLEVBQ0EsR0FBQSxDQUFBLEVBQ0EsR0FBQSxLQUNGLEdBQUEsQ0FBQSxFQUNFLE9BQUEsSUFDSixFQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FDRixFQUFBLENBQUEsS0FBQSxDQUFBLEdBQ0EsRUFBQSxDQUFBLEtBQUEsQ0FBQSxHQUNBLEdBQUEsRUFBQSxFQUFBLENBQ08sR0FBVCxFQUFBLFFBQUEsQ0FDRSxHQUFBLENBQUEsQ0FBQSxDQUNGLEVBQUEsR0FDSyxFQUNQLEVBQUEsUUFBQSxFQUVBLEVBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxDQUNBLE9BQUEsQ0FDQSxRQUNBLEFBQUEsR0FFQSxHQUFBLEdBQ0EsRUFBQSxFQUFBLENBRkEsT0FFQSxDQUNGLEVBQUEsRUFBQSxJQUFBLENBRUUsRUFBTyxDQURULEVBQUEsRUFBQSxLQUFBLEFBQUEsRUFDa0IsT0FBQSxDQU1oQixDQUpGLEVBQUEsR0FBQSxFQUFBLENBQ0EsS0FBUyxTQUNILFNBQU8sRUFBQSxRQUFBLEFBQ1gsRUFBQSxFQUNTLFlBQU8sQ0FDbEIsQUFBQSxZQUFBLFlBQUEsQ0FDQSxPQUFTLEVBQ0gsRUFBSixHQUFBLEVBQUEsSUFDSSxFQUFlLEdBQ1gsRUFDTixFQUNBLEVBQ0UsQ0FKQSxLQWFGLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFDRSxFQUFPLE1BQUEsQ0FBQSxFQVFQLEVBQUEsTUFBQSxDQUFBLEVBQ0YsRUFBQSxPQUFBLENBQUEsRUFDRSxFQUFBLEtBQUEsQ0FBQSxFQUNGLEVBQUEsRUFDRSxFQUFBLEVBQUEsS0FBQSxDQUtKLFFBREEsQ0FDVyxDQURYLEVB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QUEsQ0FBQSxDQUNBLEdBQ0EsRUFDRSxFQUNGLEVBQVMsWUFBVCxDQUFBLFFBQUEsQ0FDRSxHQUVGLEdBQUEsRUFBTSxHQUNOLE9BQUEsSUFBQSxFQUFBLEtBQUEsQUFBQSxFQUFBLE9BQUEsQ0FBQSxDQUNGLEVBQUEsS0FBQSxBQUVOLE1BQUEsRUErRVEsT0E5RVYsT0FBQSxHQUFBLE1BQ1MsRUFBQSxFQUFBLEVBQUEsSUFXSCxRQVZBLENBVUEsQyxBQVZBLFMsQSxBQUZOLEMsQyxDLEMsQyxDLEFBYUUsQyxFLEssSSxFLFEsRSxDLEcsRSxRLEMsVyxLLEUsVyxJLEEsRyxDLEksVSxFLEssRyxFLFcsRSxJLEEsRSxLLE0sRyxDLEUsRyxDLEMsQyxHLEMsTyxHLEksTyxHLEMsRSxZLEMsWSxNLE8sQyxLLE8sRyxnQixDLEMsRSxZLEMsTSxHLEUsWSxDLG9CLEksRSxHLEUsRSxZLEMsVyxDLEssRSxJLEUsSyxBLEUsSSxDLEssRSxJLEEsRyxFLFksQyxpQixFLEssRSxXLEMsSyxFLFcsQSxHLEUsWSxDLFksQyxLLEUsSyxDLEssRSxLLEEsRSxDLEssTyxDLEssUSxHLEUsWSxDLG1CLE0sTyxDLEssUyxHLEMsQyxFLEUsSSxRLEMsTSxJLE8sRSxHLEMsSyxFLEcsQSxHLEUsWSxDLFcsQyxLLEUsSSxDLEssRSxJLEEsRyxFLFksQyxrQixDLEssRSxXLEMsSyxFLFcsQyxDLEUsRyxFLFksQyxVLEMsRSxZLEMsWSxNLE8sQyxTLE8sRSxLLEMsRyxVLEcsVyxFLEksQyxPLEUsSSxFLE0sRSxJLEMsSyxHLEUsSSxDLEcsVyxFLEksRSxFLFksQyxVLEUsTyxDLEMsRyxRLEMsQyxHLEUsWSxFLEssQyxPLEksRUFWSyxFQUdELEVBQWlCLElBQUEsQ0FDckIsRUFBQSxZQUE2QixDQUcvQixHQUFBLEdBR0UsRUFBMkIsU0FBQSxDQUFBLEVBQzNCLEdBQUEsRUFNRixHQUFBLEdBQ0ksRUFBQSxVQUFBLEVBRUcsR0FBcUIsQ0FBQSxFQUN4QixFQUFBLEVBQUEsQ0FBQSxDQUNBLEVBQUEsRUFBQSxFQUNFLEdBQUEsR0FB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UUMsRUFDRixDQUFBLEVBQUEsQ0FFQSxDQUFBLENBUUYsR0FJRSxFQU1BLEVBQ0YsRUFBQSxZQUFBLENBQUEsUUFBQSxDQUNBLEdBTUYsRUFBQSxLQUFBLEFBRUEsTUFBQSxHQUNFLE1BQUEsRUFBQSxZQUFBLEFBQ0UsQ0FPQSxNQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUNGLENBQ0UsU0FBQSxHQUFBLENBQUEsRUFDQSxFQUFBLEtBQUEsRUFBQSxDQUNGLENBQ0UsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsR0FBQSxlQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLE9BQUEsRUFDRixFQUFBLEtBQUEsRUFBQSxnQkFDQSxHQUFBLEVBQUEsS0FBQSxFQUFBLFVBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FFRSxHQUNBLFFBRkYsQ0FFRSxDQUZGLEdBQUEsT0FBQSxBQUFBLENBR0UsRUFBQSxFQUFBLFFBQUEsRUFBQSxDQUFBLEdBQ0YsR0FDRSxPQUFBLEdBQ0YsQ0FBQSxVQUFBLEVBQUEsQ0FBQSxHQUNBLElBQ0UsSUFBQSxFQUFBLFNBQUEsRUFBQSxDQUFBLEVBQ0osSUFBQSxFQUFBLENBQUEsQ0FFQSxNQUVJLEdBQUEsR0FDRSxHQUVFLEVBQUEsS0FBQSxFQUFBLElBQ0YsQ0FDRSxDQUNBLFNBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNGLE9BQUEsSUFBQSxFQUFBLEtBQUEsR0FBQSxBQUFBLENBQUEsQ0FDRSxNQUFBLEVBQUEsQ0FDQSxJQURBLEdBQ0EsRUFDSixLQUFBLEVBQUEsR0FBQSxDQUFBLEtBQUEsV0FDQSxFQUFBLEtBQUEsRUFBWSxFQUNkLElBQUEsQ0FBQSxDQUFBLEFBRUEsQ0FNRixTQUFBLEdBQ0csQ0FBQSxDQUFBLENBQUEsRUFrQnNCLEdBQUEsQ0FBQSxHQUFrQixPQUFBLEVBQUEsUUFBQSxFQUEyQixJQUFBLFNBS3RFLEVBQ2tCLEVBQUEsSUFBQSxDQWNWLElBQUEsSUFBQSxFQUFBLEtBQUEsT0FBQSxHQUNBLE9BQUEs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Q0FDQSxDQUFBLENBQUEsQ0FBQSxDQUFZLEVBR2pCLEdBQUEsQ0FDRSxJQUFBLEVBQUksRUFBWSxTQUFRLENBQ3RCLEMsUyxBLEMsQyxDLEMsQyxDLEMsRSxPLEcsSSxNLEksTyxJLE0sSSxPLEksSSxJLEksSSxJLEksSyxLLEssUSxJLEUsSyxFLEssRSxLLEUsSyxFLEssRSxLLEUsSyxJLEssRSxDLEksRSxDLEMsRSxDLEcsRSxjLEMsSSxNLEUsTyxHLEksVSxJLFEsSyxLLGUsRSxDLFMsRSxjLEMsSSxHLEUsRSxFLEssRSxFLEMsQyxJLEksSyxFLEMsSSxFLEMsQyxFLEMsRyxFLEMsQyxFLEMsRSxjLEMsSyxNLEcsRSxJLEMsQyxDLE8sRyxJLE8sRSxFLEssSyxPLEUsRSxLLEssVSxFLEUsSyxLLGlCLEUsRSxLLEssUSxFLEUsSyxLLGUsRSxFLEssSyxXLEksMEIsRyxNLEUsTSxNLEUsSSxJLEssUyxJLEcsRyxFLEUsRSxFLEUsRSxDLEMsRyxFLEUsRSxFLEUsRSxFLEcsTSxLLFMsSSxLLEUsRSxFLEUsSyxFLEcsRSxDLEMsRSxDLEUsYyxDLEksTSxFLE8sRyxJLFEsSyxLLFcsRSxDLFMsRSxjLEMsSSxHLEUsRSxFLEssRSxFLEMsSSxLLEUsRyxFLEMsQyxFLEMsRSxDLEMsRSxDLEUsYyxDLEssSSxFLEcsTSxDLEMsQyxPLEcsSSxRLEUsRSxLLEssZSxFLEUsSyxLLFcsRSxDLFMsSSxHLEcsRSxFLEUsRSxFLEUsQyxFLEUsRSxFLEUsRSxNLEUsRyxFLEMsQyxFLEUsQyxHLEMsQyxHLEMsQyxJLE0sRSxDLEUsRSxDLEMsRSxFLEMsRyxHLEUsQyxDLEUsRSxFLEMsRyxDLEUsQyxDLE0sSyxXLEksSyxFLEUsSyxFLEcsRSxDLEMsRSxDLEUsYyxDLEksTSxHLEMsRSxjLEMsRyxPLEcsSSxRLEksVyxLLFMsRyxFLEUsRSxLLEUsRSxDLEksSyxFLEcsRSxDLEMsRSxDLEUsQyxDLEUsQyxFLGMsQyxLLEssQyxHLE0sQyxDLEMsTyxHLEksUSxFLEUsSyxLLGUsRSxFLEssSyxXLEssSywwQixHLE0sRSxNLE0sRSxLLEssUyxJLEcsRyxFLEUsRSxFLEUsRSxDLEcsRSxFLEcsTSxLLFMsSSxJLEssSSxDLEMsRSxDLEEsQyxDLGMsQyxJLE0sRyxDLEUsYyxDLEssUyxJLEUsRSxRLEMsQyxFLEcsRSxFLEUsSyxFLEksSSxLLEUsRSxDLEMsRSxDLEMsQyxDLEMsRSxDLEUsYyxDLEksSSxJLE0sQyxFLE0sQyxDLEcsQSxhLEUsRSxRLEMsRyxZLE8sRyxVLE8sRSxHLEUsRSxFLEUsRSxJLE0sSyxNLEksTyxJLE8sSSxPLEksSyxJLE0sSSxRLEksSyxJLFMsSSxPLEksUSxJLFMsSSxRLEksTSxJLFcsSSxJLEssRSxFLEMsQyxFLEMsRSxjLEMsSSxNLEcsQyxFLGMsQyxJLEcsRSxFLEUsSyxFLEcsSSxLLEUsRyxFLEMsQyxFLEMsRSxDLEMsRSxDLEUsYyxDLEksSSxJLE0sQyxFLE0sQyxDLEMsTyxHLEksVyxJLDBCLEcsTSxFLE0sTSxFLEksSSxLLFMsRyxFLEUsRSxFLEUsRSxDLE0sUyxHLEcsRyxDLEksSSxLLEUsRSxDLEMsRSxDLEUsYyxDLEksSyxJLEcsQyxFLGMsQyxJLEcsRSxFLEUsSyxFLEUsRyxJLEssRSxFLEMsQyxFLEMsRSxDLEMsRSxDLEEsRSxjLEMsSSxJLEksSyxJLEcsSyxJLEMsRyxHLEUsRSxFLEUsRSxHLE0sQyxDLEksSSxLLEUsRSxDLEMsRSxDLEUsYyxDLEksTSxHLEMsRSxjLEMsSSxHLEUsRSxFLEssRSxHLEksSyxFLEUsQyxDLEUsQyxFLEMsQyxFLEMsQSxFLGMsQyxJLEksSSxNLEcsTSxDLEcsRyxFLEUsRSxFLEUsRSxHQUFJLEVBQU8sRUFBaUIsSUFBSSxDQUFHLEVBQU8sR0FDMUMsQ0FBQSxDQUFBLEdBQ0UsQ0FBYSxDQUlqQixDQUFBLE1BQUEsRUFBQSxDQUNHLEdBQWEsRUFBQyxFQUFBLE1BQUEsQ0FBQSxFQUVmLENBQ0UsQ0FDQSxTQUFBLEdBQUEsQ0FBQSxFQUNGLE9BQ0UsSUFBQSxFQUFBLEdBQUEsRUFDQSxJQUFBLEVBQUEsR0FBQSxFQUVLLEtBQUEsRUFBQSxHQUFBLEVBWUwsS0FB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QVksRUFBekIsRUFBQSxDQUFBLEVBQ0EsR0FBQSxHQUNLLElBQUksSUFBTSxDQUFWLENBQVAsRUFBQSxFQUFBLEVBQUEsTUFBQSxDQUFBLElBQ00sR0FLQyxDQURMLEVBQUEsQ0FBQSxDQUFBLEVBQUEsQUFBQSxFQUN3QixZQUFlLENBQUEsV0FDM0MsQ0FBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLENBQ0YsS0FDQSxFQUFBLElBQUEsQUFBQSxHQUNBLEVBQUEsWUFBQSxDQUFBLFNBQ0YsRUFBQSxLQUFBLEVBQUEsR0FBQSxDQUFBLEtBQUEsRUFBQSxHQUFBLEFBQUEsR0FDUyxFQUFBLFlBQWlCLENBQUEsWUFDeEIsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEFBQUEsR0FDRSxFQUFBLFlBQUEsQ0FBQSxrQkFDQSxDQUFBLEtBQUEsRUFBQSxXQUFBLENBQ0EsS0FDQSxFQUFBLFdBQUEsQUFBQSxFQUNBLENBQ0EsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBLE1BQUEsRUFDQSxDQUVBLEdBREEsRUFBQSxFQUFBLGFBQUEsQ0FBQSxHQUNBLEVBQUEsR0FDQSxFQUFBLElBQUEsQ0FBQSxPQURBLElBQ0EsQ0FBQSxHQUNBLEtBQ0EsS0FBQSxPQUNBLEdBQ0EsRUFBQSxHQUNBLE9BQ0EsVUFDQSxHQUNBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxJQUFBLEVBQUEsRUFBQSxDQUFBLEdBRUEsQ0FBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsTUFBQSxDQUFBLElBQ0EsR0FDQSxBQUNBLEdBREEsQ0FBQSxDQUFBLEVBQUEsQUFBQSxFQUNBLFlBQUEsQ0FBQSxjQUNBLENBQUEsS0FBQSxFQUFBLE9BQUEsQ0FDQSxLQUNBLEdBQUEsRUFBQSxPQUFBLEFBQUEsR0FDQSxFQUFBLFlBQUEsQ0FBQSxXQUNBLENBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxLQUFBLEVBQUEsSUFBQSxBQUFBLEdBQ0EsRUFBQSxZQUFBLENBQUEsZUFDQSxDQUFBLEtBQUEsRUFBQSxRQUFBLENBQ0EsS0FDQSxFQUFBLFFBQUEsQUFBQSxHQUNBLEVBQUEsWUFBQSxDQUFBLGlCQUNBLENBQUEsS0FBQSxFQUFBLFNBQUEsQ0FDQSxLQUNBLEVBQUEsU0FBQSxBQUFBLEdBQ0EsRUFBQSxZQUFBLENBQUEsY0FDQSxDQUFBLEtBQUEsRUFBQSxPQUFBLENBQ0EsS0FDQSxFQUFBLE9BQUEsQUFBQSxFQUNBLENBQ0EsRUFBQSxNQUFBLENBQUEsRUFBQSxHQUNBLE1BQUEsQ0FDQSxFQUVBLEdBREEsRUFBQSxFQUFBLGFBQUEsQ0FBQSxHQUNBLEVBQUEsR0FDQSxFQUFBLElBQUEsQ0FBQSxPQURBLElBQ0EsQ0FBQSxHQUNBLEtBQ0EsU0FDQSxNQUFBLE1BQUEsRUFBQSxJQUFBLEdBQ0EsQ0FDQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQ0UsR0FBQSxHQUNGLEVBQUEsQ0FDQSxDQUNBLEVBQUEsU0FBQSxDQUFBLENBQ0EsTUFDQSxHQUNBLEVBQ0EsRUFBQSxJQUFBLENBQ0EsRUFBQSxTQUFBLE9BR0EsRUFBQSxTQUFBLENBQUEsR0FDQSxFQUNBLEVBQ0EsRUFBQSxhQUFBLE9BR0EsSUFBQSxHQUNBLEtBQUEsRUFBQSxFQUNFLE9BQUEsRUFBQSxTQUFBLEVBRUEsQ0FERixDQUFBLENBQUEsRUFBQSxTQUFBLEFBQUEsRUFDRSxVQUFBLENBQUEsV0FBQSxDQUFBLEdBQ0UsRUFBQSxHQURGLEVBQ0UsR0FDRSxPQUFBLEVBQ0YsR0FDRSxFQUNGLEVBQUEsSUFBQSxDQUNBLEVBQUEsU0FBQSxFQUVBLEdBQ0UsRUFDRixFQUNFLEVBQUEsY0FBQSxDQUNKLENBQ0YsT0FBQSxHQUNFLE9BQUEsRUFBQSxTQUFBLEVBQ0osR0FDRixFQUNJLEVBQUEsYUFBQSxDQVdLLEVBQUEsYUFBQSxDQUVMLENBQ0EsS0FDRSxNQUFBLEdBQ0EsR0FBQSxFQUFBLEdBQ0YsR0FBQSxHQUNBLElBQUEsR0FDRSxDQUFBLElBQ0EsT0FBQSxHQUNGLEdBQUEsRUFBQSxFQUFBLE9BQUEsQ0FBQSxDQUNBLE9BQUEsR0FDRSxFQUFBLEdBQ0Es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QUNBLE1BQUEsR0FBQSxFQUFBLEVBQUEsTUFBQSxHQUNBLE1BQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxBQUNBLENBQ0EsU0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsRUFBQSxLQUNFLE9BQUssRUFBTCxTQUFBLEdBQ0YsQ0FBQSxDQUFBLEVBQUEsU0FBQSxDQUFBLGFBQUEsQ0FBQSxLQUFBLEFBQUEsRUFFRSxDQURGLEVBQUEsRUFBQSxhQUFBLENBQWtDLEtBQUEsQUFBQSxJQUNyQixJQUtiLEVBQUEsS0FBQSxHQUFBLEdBQUEsTUFBQSxHQUFBLEdBQUEsRUFBQSxDQUFBLEFBQ0EsQ0FDRSxTQUFBLEdBQ0YsQ0FBQSxDQUNBLENBQUEsQ0FDRSxDQUFBLENBQ0UsQ0FBQSxFQUVBLEdBQUEsTUFBQSxFQUFBLFlBQUEsQ0FDRSxJQUFBLEVBQUksRUFBSixLQUFBLENBQUEsT0FBQSxHQUNBLEdBQ0YsRUFDRSxFQUNKLEVBQ0ksR0FFSixFQUFBLEVBQUEsT0FBQSxBQUNFLENBQ0YsU0FBQSxHQUNFLENBQUEsQ0FDRixDQUFBLENBQ0YsQ0FBQSxDQUNBLENBQUEsRUFFQSxJQUFBLEVBQUEsRUFBQSxLQUFBLENBQ0EsT0FBQSxFQUFBLEdBQUEsRUFDRSxLQUFBLEVBQ0UsS0FBQSxHQUNBLEtBQUEsR0FDQSxHQUNBLEVBQ0EsRUFDRSxFQUNGLEdBRUYsS0FBQSxHQUFBLEdBQUEsRUFBQSxHQUNBLEtBQ0EsTUFBQSxFLEssRyxRQUNBLEdBQ0UsRUFDRixFQUNFLEVBQ0YsR0FFRixLQUtFLE1BQUksRUFDSixHQU9BLEVBQ0UsRUFDRSxFQUNBLEdBRUEsS0FBQSxHQUNBLENBQUEsRUFBQSxLQUNGLE9BQUEsRUFBQSxTQUFBLEdBQ0UsQ0FBQSxDQUFBLEVBQUEsU0FBQSxDQUFBLGFBQUEsQ0FBQSxLQUFBLEFBQUEsRUFFRixDQURFLEVBQUEsRUFBQSxhQUFBLENBQUEsS0FBQSxBQUFBLElBQ0YsSUFDRSxFQUFBLFFBQUEsRUFBQSxDQUNBLE1BQUEsR0FBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQ0YsS0FD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QSxDQUFBLElBRUYsT0FFTixFQUFBLGFBRk0sRUFJTixBLFMsQSxDLEMsQyxDLEMsRSxHLE8sRyxNLE0sRSxNLEksRSxHLEcsZSxFLEksRyxDLFMsTyxFLEssRSxDLEksVyxFLEssRSxPLEEsRyxJLEMsQyxFLEssQyxPLEUsQyxHLE8sRSxRLEMsQyxJLEUsRyxFLEksRSxFLEUsYSxDLEcsSSxHLEUsQyxRLEMsQyxFLEUsQSxHLFUsTyxHLFksTyxFLEksRyxDLEMsSyxHLEUsRyxJLEMsRyxFLEksQyxFLEUsQyxDLEUsSyxDLE8sRSxFLEUsUSxDLEUsRyxHLE0sQyxFLEUsYSxFLEUsRSxHLEcsQyxFLEcsRyxDLEUsQyxFLEcsRSxHLEcsRSxFLGEsQyxTLEksRSxFLEUsRSxBLEMsSSxRLFMsQyxDLEMsRSxFLE0sQyxFLEUsTyxDLEMsRyxHLEUsTyxHLEUsUSxDLEMsQyxPLEUsVyxHLEMsQyxXLEMsSSxHLEMsQyxFLFcsQyxHLEMsRSxHLEcsRSxLLEMsTyxBLEcsSSxDLEMsRSxFLEcsQyxPLEksRSxLLEcsRSxHLEksQyxHLEUsZ0IsQyxPLEcsRSxnQixDLFEsRSxDLEEsQyxFQUNFLEdBQ0YsRUFBQSxhQUFBLENBQ0UsRUFBQSxhQUFNLEVBRWQsS0FDQSxNQUFBLEVBK0JNLFFBOUJSLEdBQUEsR0FDQSxLQUNFLE1BQUksRUFDSixLQUFJLEVBQ0osSUFBSSxFQUFKLEdBQ0EsR0FBdUIsR0FBdkIsRUFBQSxTQUFBLENBQUEsYUFBQSxFQUVFLEdBQUEsR0FDRSxHQUFBLEVBQ0EsS0FDQSxNQUFBLEdBQ0UsT0FBQSxFQUFBLGFBQUEsR0FFRixDQURFLE9BQUEsQ0FDRixDQURFLEVBQUEsU0FBQSxBQUFBLEdBRUEsT0FBQSxFQUFBLGFBQUEsRUFDRSxDQUFBLENBQUEsR0FDQSxHQUFBLFVBQ0UsR0FBQSxHQUNBLEdBQUEsQ0FBQSxDQUFBLENBQ0YsR0FBQSxFQUFBLENBQUEsQUFhUixDQVdVLENBQ0YsU0FBQyxHQUVBLENBQUEsRUFnQlQsSUFBQSxFQUFBLEVBQUEsU0FBQSxDQUNBLEdBQ0EsT0FBSSxHQVdXLFFB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QUssR0FBTCxHQUFBLElBR0EsTUFBQSxFQW9CRSxPQW5CQSxFQUFBLEVBQUEsU0FBQSxDQUNBLEVBQUEsS0FDRixPQUFBLElBQUEsRUFBQSxFQUFBLEdBQUEsVUFBQSxDQUFBLEtBQUEsQUFBQSxFQUNBLEVBQUEsYUFBQSxDQUFBLEtBQUEsR0FBQSxJQUNBLEVBQUEsS0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQ0EsR0FBQSxJQUNBLElBQ0UsRUFBQSxjQUFBLEdBQ0EsQ0FBQSxDQUFBLE9BQUEsQ0FBQSxFQUFBLGNBQUEsQ0FDRixFQUFBLGNBQUEsQ0FBQSxJQUFBLENBQUEsRUFDRSxPQUFBLEdBQUEsT0FBQSxFQUFBLEtBQUEsQUFBa0IsSUFDbEIsR0FBQSxHQUNGLEdBQUEsR0FDRSxPQUFJLEdBQ0YsRUFBQSxhQUFBLENBQUEsWUFBQSxFQUNBLElBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxBQUFBLENBQUEsRUFDRixHQUFBLEFBQUEsS0FBQSxFQUFBLEtBQ0YsSUFBQSxDQUFBLEVBQ0EsR0FBQSxHQUNFLElBQ0UsTUFBQSxHQUNBLE9BQ0YsRUFBQSxFQUFBLGFBQUEsQ0FDQSxPQUNFLEdBS0EsR0FBQSxHQUNBLENBREEsTUFDQSxFQUNGLElBQUEsR0FDQSxHQUFRLEVBRFIsQUFDQSxFQUFBLENBQUEsRUFDQSxFQUFBLENBQVcsR0FDWCxFQUFBLEtBQUEsRUFBQSxVQUFBLENBQUEsQ0FBQSxDQUNGLEVBQ0EsSUFBQSxFQUFBLGFBQUEsRUFDTSxDQUFBLEVBQUEsR0FDRixHQUFXLEdBSVgsR0FBQSxFQUFBLEVBQUEsQ0FBQSxFQUNGLEVBQUEsQ0FDaUIsR0FnQ2YsRUFBUSxLQUNSLEVBQUEsVUFBQSxDQUFhLENBR2IsR0FBQSxBQUFBLGFBQVcsR0FBQSxHQUFYLEdBQUEsR0FDQSxHQUFBLEdBQ0YsRUFBQSxLQUFBLEVBQUEsVUFBQSxDQUFBLENBQ0EsSUFFQSxNQUFBLEdBQ0YsRUFBQSxHQUNFLEVBQVEsRUFBcUIsT0FBVSxDQUN2QyxJQUFBLEVBQUEsRUFBQSxJQUFBLENBQ0YsR0FBQSxPQUFBLEdBQUEsTUFBQSxFQUFBLFNBQUEsQ0FDRSxFQUFBLGFBQWlCLEdBQUEsR0FBQSxHQUFBLE9BQ2pCLENBQ0YsR0FBQSxDQUFLLEVBQUwsQ0FDRSxHQUFBLE9BQVEsRUFBUyxTQUFBLENBQ2pCLE1BQUEsTUFBQSxFQUFBLE1BRUEsT0FERixHQUFBLEdBQ00sSUFDRixDQUVBLEVBQUEsRUFBQSxPQUFBLENBQ0EsR0FBSSxHQUNGLEdBQWtCLEVBQWdCLElBQ2xDLEVBQUEsR0FBQSxFQUFBLEFBQUEsRUFBQSxHQUNGLEVBQUEsU0FBQSxDQUFBLEVBQ0YsR0FBQSxFQUFBLENBQUEsQUFDQSxDQUVBLE9BREYsR0FBQSxHQUNFLElBRUEsTUFBQSxFQUlBLEdBSEYsRUFBQSxHQUNFLEVBQUEsRUFDRSxJQUFBLENBQ0YsT0FBQSxHQUFBLE1BQUEsRUFBQSxTQUFBLENBQ0YsRUFBQSxhQUFBLEdBQUEsR0FBQSxHQUFBLE9BQ0EsQ0FDQSxHQUFBLENBQUssRUFBTCxDQUNBLEdBQUEsT0FBQSxFQUFBLFNBQUEsQ0FDQSxNQUFBLE1BQUEsRUFBQSxNQUVFLE9BREYsR0FBQSxHQUNFLElBQ0YsQ0FFQSxHQURFLEVBQUEsRUFBQSxPQUFBLENBQ0YsR0FBQSxHQUNFLEdBRUUsRUFBc0IsT0FJdEIsQ0FJRixPQUhFLEVBQUEsR0FDRixFQUFBLE9BQUEsRUFFQSxHQUtBLEtBQUEsRUFDRixFQUFBLEVBQUEsZUFBQSxDQUNBLDZCQUNBLEdBRUEsS0FDQSxNQUFBLEVBQ0EsRUFBQSxFQUFBLGVBQUEsQ0FDQSxxQ0FDRSxHQUlGLEtBQ0EsU0FDQSxPQUFBLEdBQ0EsSUFBQSxNQUNBLEVBQUEsRUFBQSxlQUFBLENBQ0EsNkJBQ0EsR0FFQSxLQUNBLEtBQUEsT0FDQSxFQUFBLEVBQUEsZUFBQSxDQUNBLHFDQUNBLEdBRUEsS0FDQSxLQUFBLFNBRUEsQ0FEQSxFQUFBLEVBQUEsYUFBQSxDQUFBLE1BQUEsRUFDQSxTQUFBLENBQUEscUJBQ0EsRUFBQSxFQUFBLFdBQUEsQ0FBQSxFQUFBLFVBQUEsRUFDQSxLQUNBLEtBQUEsU0FDQSxFQUNBLFVBQUEsT0FBQSxFQUFBLEVBQUEsQ0FDVyxFQUFBLGFBQWUsQ0FBTyxTQUFTLENBQUEsR0FBQSxFQUFhLEVBQUEsQUFBQSxHQUdyRCxFQUFBLGFBQUEsQ0FBQSxVQUNGLEVBQUEsUUFBQSxDQUNBLEVBQUEsUUFBQSxDQUFBLENBQUEsRUFDUyxFQUNILElBQUEsRUFBVyxFQUFBLENBQUEsSUFBYSxDQUFBLEVBQ3ZCLElBQUEsQUFBQSxFQU1MLEtBQ0YsU0FDQSxFQUNBLFVBQUEsT0FBQSxFQUFBLEVBQUEsQ0FDQSxFQUFBLGFBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEVBQUEsQUFBQSxHQUNVLEVBQ1IsYUFBQSxDQUFBLEVBTUEsQ0FDRixDQUNBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFDRSxDQUFBLENBQUEsR0FDQSxDQUFBLEVBS0EsRUFBQSxJQUFBLEVBQUEsRUFBQSxLQUFBLENBQUEsT0FBQSxHQUFBLENBQ0YsR0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLENBQ0UsRUFBQSxXQUFBLENBQUEsRUFBQSxTQUFBLE9BQ0EsR0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsT0FBMEIsRUFBMUIsS0FBQSxDQUFBLENBQ0EsRUFBQSxLQUFBLENBQUEsTUFBQSxDQUFBLEVBQ0EsRUFBQSxFQUFBLEtBQUEsQ0FDRixRQUNFLENBTUEsR0FBQSxJQUFBLEVBQUEsTUFBQSxBQUNGLEtBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxDQUNFLEdBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLE1BQUEsR0FBQSxFQU1BLE1BQUEsRUFDRixFQUFBLEVBQUEsTUFDRSxBQURGLENBT0UsRUFBQSxPQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsTUFBQSxDQUNGLEVBQUEsRUFBQSxPQUFBLEFBQ0UsQ0FPRyxPQURILEVBQUEsU0FBQSxDQUFBLEVBRUEsR0FBQSxFQUFBLEVBQUEsR0FDRSxHQU1KLElBQUEsU0FDRSxJQUFBLFFBTUEsSUFBQSxTQUNGLElB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QUFBLGFBQUEsQ0FBQSxTQUFBLEdBQ0EsQ0FBQSxDQUFJLEVBQWdCLGFBQVUsQ0FBQSxTQUFZLENBQUEsSUFBQSxBQUFBLEVBRzFDLElBQUssSUFBVSxFQUNULEVBRFMsR0FDSCxFQUFBLElBQUEsQ0FBQSxBQUNSLENBT00sT0FOTixJQUFJLEdBRUEsSUFDRSxFQUFBLEtBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQSxJQUFBLENBQUEsQ0FDQSxHQUFBLEVBQUEsRUFBQSxXQUFBLEVBQ0YsR0FBQSxHQUNFLElBQ0EsTUFBQSxFQUNGLE9BQ0UsSUFDQSxPQUFBLEdBQ0YsR0FBQSxFQUFBLFNBQUEsQ0FBQSxhQUFBLEVBQ0UsR0FBQSxHQUNBLElBRUEsTUFBQSxHQUNBLE9BQ0YsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsSUFFRSxNQUFBLEdBR0EsR0FGRixFQUFBLElBRUUsUUFERixDQUNFLENBREYsRUFBQSxhQUFBLEFBQUEsRUFDRSxPQUFJLEdBQVEsR0FDRSxLQUdkLEdBRkEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsQUFBQSxDQUFBLENBRUEsUUFERixDQUNFLENBREYsRUFBQSxTQUFBLEFBQUEsRUFFRixHQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsT0FDSixDQUNGLEdBVUEsSUFBQSxJQUNBLE9BQUEsR0FBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsQUFBQSxDQUFBLENBRUEsSUFBQSxFQUFBLEVBQUEsS0FBQSxDQUFBLE9BQUEsR0FBMEIsQ0FFMUIsR0FBSyxRQURMLENBQ0ssQ0FESSxHQUFULEVBQUEsRUFFRSxDQVlNLElBUEYsRUFBQSxLQUFBLEVBQUEsSUFDRSxHQUFBLEVBQUEsQ0FBQSxHQUNBLEVBQUEsRUFBQSxXQUFBLENBQ0YsRUFBQSxXQUFBLENBQUEsRUFDRSxHQUFBLEVBQUEsR0FDQSxFQUFBLFlBQUEsQ0FBQSxFQUNGLEVBQUEsRUFDRSxFQUFBLEVBQUEsS0FBQSxDQUFBLE9BQUEsR0FDRixHQUFBLEVBQUEsR0FDRSxFQUFBLEVBQUEsT0FBUSxDQUtoQixPQUpJLEVBQ0UsR0FDTixFQUFBLEdBQUEsT0FBQSxDQUFBLEdBRVEsRUFDSixLQUFBLEFBRUosQ0FDRixFQUFBLEVBQUEsT0FBQSxBQUNFLENBQ0EsT0FBQSxFQUFVLElBQUEsRUFDVixLQUFLLElBTUMsR0FBQSxLQUFBLEVBQUEsSUFDRSxFQUFBLENBQUEsRUFDQSxHQUFBLEVBQUEsQ0FBQSxHQUNGLEVBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxBQUNFLEtBQ0EsQ0FDRixHQUFBLENBQUEsRUFDRSxBQVBGLEdBT0UsUUFBQSxDQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQUFDQSxHQUNGLEVBQUEsS0FBQSxFQUFBLElBQ0UsRUFBSSxDQUFBLEVBQ0osRUFBQSxFQUFBLFdBQUEsQ0FDRixFQUFBLFdBQUEsQ0FBQSxFQUNFLEdBQUEsRUFBUSxHQUNaLEdBQUEsRUFBQSxDQUFBLEdBQ0osT0FBQSxFQUFBLElBQUEsRUFDQSxXQUFBLEVBQUEsUUFBQSxFQUNBLENBQUEsRUFBQSxTQUFBLEVBQ0YsQ0FBQSxHQU9RLE9BQUssR0FBTCxHQUFBLElBQUEsTUFLRSxFQUFBLEtBQUEsRUFBQSxrQkFBQSxDQUNGLElBQ0UsYUFBQSxJQUNKLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFDSixFQUFBLENBQUEsRUFDRixHQUFBLEVBQUEsQ0FBQSxHQUNFLEVBQUEsS0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUNBLEVBQUEsV0FBQSxFQUNBLENBQUEsQ0FBQSxPQUFBLENBQUEsRUFBQSxLQUFBLENBQ0EsRUFBQSxLQUFBLENBQUEsQ0FBQSxDQUFBLEVBRUYsRUFERSxNQUFBLENBQ0YsQ0FERSxFQUFBLElBQUEsQUFBQSxFQUVGLEVBQUEsT0FBQSxDQUFBLEVBQ0UsRUFBQSxLQUFBLENBQUEsRUFDQSxFQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsQUFDRixDQUNBLEdBQUEsT0FBQSxFQUFBLElBQUEsQ0FDRSxPQUVBLEVBQUEsRUFBQSxJQUFBLENBQ0YsRUFBQSxTQUFBLENBQUEsRUFDRSxFQUFBLElBQUEsQ0FBQSxFQUFBLE9BQUEsQ0FDQSxFQUFBLGtCQUFBLENBQUEsS0FDQSxFQUFBLE9BQUEsQ0FBQSxLQUNGLEVBQUEsR0FBQSxPQUFBLENBQ0UsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUEwQixFQUExQixFQUEwQixHQUMxQixFQUdGLE9BREEsR0FBQSxHQUNLLElBQ0gsTUFBQSxHQUVGLEtBQUEsR0FDQSxPQUNBLEdBQUEsR0FDQSxLQUNBLEVBQUEsT0FBQSxFQUFBLGFBQUEsQ0FDQSxPQUFBLEVBQ0ssT0FBTCxFQUFBLGFBQUEsR0FBQSxJQUNLLEVBQUwsS0FBQSxDQUFLLENBQUwsSUFBQSxDQUFBLENBQ0EsSUFBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxDQUNBLEVBQ0EsSUFBQSxFQUFBLFNBQUEsQ0FBQSxDQUFBLEVBQ0UsR0FBSyxDQUNILEVBREcsSUFBa0IsS0FBQSxBQUNyQixDQUNFLEdBSUUsRUFBQSxDQUFBLEdBQ0EsRUFBQSxFQUFBLENBQUEsV0FBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsQ0FBQSxDQUFBLENBQ0UsR0FBTSxHQUVOLFFBREYsQ0FDRSxDQURGLEVBQUEsV0FBQSxBQUFBLEdBRUYsR0FBQSxFQUFBLEVBQUEsVUFBQSxFQUNKLEVBQUEsS0FDRixPQUFBLEdBQ0UsT0FBSSxFQUFBLGFBQUEsRUFDRixPQUFBLEVBQUssYUFBaUIsQ0FBQSxTQUNkLEVBV1IsRUFBQSxDQUFBLEVBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLEFBQUEsRUFDRixFQUFBLEtBQ0osT0FBQSxFQUFBLGFBQUEsRUFDSyxPQUFBLEVBQ0gsYUFBTSxDQUFBLFNBQWUsR0FJekIsQ0FBQSxDQUFBLEVBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLEFBQUEsRUFDQSxJQUFTLElBQUEsRUFBaUIsS0FBQSxFQUFZLEVBQTdCLEVBQTZCLENBQUcsQ0FDdkMsT0FBQSxHQUFBLEVBQUEsSUFDRSxJQUVBLE1BQUEsR0FDQSxPQUNBLEVBQUEsS0FDQSxPQUFBLElBQUEsRUFBQSxFQUFBLEdBQUEsVUFBQSxDQUFBLEtBQUEsQUFBQSxFQUNBLEVBQUEsYUFBQSxDQUFBLEtBQUEsR0FBQSxJQUNBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLENBQ0UsR0FBQSxJQUNGLEdBQUEsR0FDRSxJQVFFLE1BQUEsR0FHSSxLQUFBLEdBRkosT0FBQSxJQUlJLENBQ0UsTUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFDRixFcUJ0eVpJLEVBQUEsU0FBVyxDQUNWLEUsSSxHLE8sRSxDQUlqQixHQUFBLEUsTSxDLEcsUSxDLEMsRSxPLEEsRSxDLEcsRSxNLEMsRyxFLENJdkRPLE9BQVMsT0FBQSxFQUFBLEFBRVosSUFBQSxLQUE0QixHQUE1QixDQUFBLENBQ0EsQ0FFQSxTQUFBLEdBQVUsQ0FBVixDQUFBLENBQUEsRUFDSSxFQUFBLENBQ0osSUFBQSxFQUFBLEF6QmsxWlUsU0FBQSxBQUFBLENBQUEsQ0FBQSxDQUFtQixFQUVuQixHeUJ6MVprQixJekJ3MVpwQixHQUFBLEdBQ0UsRUFBQSxHQUFBLEVBRUosS0FBQSxFQUNKLE9BRUUsQUFBQSxPQURGLENBRUUsQ0FGRyxFQUFJLEtBQUEsQUFBZSxHQUV0QixFQUFXLEtBQUEsQ0FBVSxPQUFBLEVBQXJCLElBQUEsQ0FBQSxDQUFBLENBQ0EsSUFNTSxNQUFBLEVBQ0EsT0FDRixHQUFBLElBQ0UsSUFFRixJQUFBLEFBQUssRUFBTCxLQURFLEVBQUEsRUFBQSxLQUFBLEFBQUEsQ0FDRyxDQUFMLEVBQUEsSUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQ0UsRUFBQSxBQUFBLEtBQVUsQ0FBVixPQUFBLEVBQUEsSUFBQSxDQUFBLENBQUEsQ0FDQSxJQUVBLE1BQUEsR0FDQSxLQUFBLEdBQ0YsS0FBQSxFQUNFLE9BQUEsRUFBQSxHQUFBLElBQ0EsTUFBQSxHQUdBLEdBRkYsR0FBSyxHQUVILFFBREEsQ0FDQSxDQURBLEVBQUEsYUFBQSxBQUFBLEdBQ0EsT0FBQSxFQUFBLFVBQUEsQ0FBQSxDQUNGLEdBQUEsT0FBQSxFQUFBLFNBQUEsQ0FDQSxNQUFBLE1BQUEsRUFBQSxNQUNFLElBRUEsQ0FFQSxPQUFBLEFBQUEsT0FERixDQVVGLENBVkUsRUFBQSxLQUFBLEFBQUEsR0FVRixFQUFBLEtBQUEsQ0FBQSxBQUFBLFNBQUEsSUFBQSxDQUFBLENBQUEsQ0FDSixJQUNBLE1BQUEsR0FVQSxPQUFBLEVBQUEsSUFBQSxJQUNGLE1BQUEsRUFDRSxPQUFBLElBQWtCLElBQ2xCLE1BQUEsR0FNTSxPQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFDRSxNQUFBLEdBQ0YsS0FBQSxHQUNFLE9BQ0YsR0FBQSxHQUNFLEtBU0osT0FBQSxHQUFBLEVBQUEsSUFTRSxBQUFBLE9BUk4sQ0FTUSxDQVRILEVBQ0gsS0FDSSxBQURKLEdBUU0sRUFBQSxLQUFjLENBQWQsT0FBQSxFQUFBLElBQUEsQ0FBQSxDQUFBLENBQ0EsSUFFQSxNQUFBLEdBQ0EsT0FBQSxHQUFBLElBQUEsSUFDRixLQUFBLElBQ0UsT0FBQSxJQVdKLENBQ0osRXlCaDhaRixFQUFBLFNBQUEsQ0FBQSxHQUFJLEdBQUEsT0FBQSxFQUFBLENBQWMsRUFBQSxLQUFBLEVBQUEsTUFFbEIsR0FBbUIsRUFDZixNQUNJLENBTUEsR0FIQSxRQUZBLENBRUEsQ0FGQSxFQUFVLEtBSVYsQ0FKQSxBQUFVLElBSVYsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFlBQUEsQ0FBQSxFQUFBLEVBQUEsU0FBQSxDQUFBLElBQUEsQ0FBQSxDQUVBLENBQUEsR0FDSSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxBQUFBLEFBQUEsRUFDQSxDQUNBLEdBQUEsRUFDSixNQUNBLENBR0osR0FBUyxFQUFULENBQ0ksT0FBQSxPQUFRLEVBQU0sQUFDbEIsR0FBQSxFQUNKLEdBQUEsSUFFQSxDQUVBLFNBQUEsRyxDLENBRVEsQ0FBQSxDQUNJLENBQUEsQ0FDQSxDQUFBLENBQ0EsQ0FBQSxDQUNBLENBQVksQ0FDWixDQUFBLEMsQyxDQUVKLENBQUEsRUFFSSxFQUFBLG1CQUFBLENBQUEsS0FDQSxHQUFBLFdBRUMsSUFBQSxHQUFTLEEsRyxNLEUsQyxDLE0sTSxFLE0sRyxPLEUsQyxHLEksRSxPLEMsTSxNLEUsTSxJLEF6QnVnQnRCLFNBQUEsQUFDRixDQUFBLENBQ0YsQ0FBQSxDQUNBLENBQVMsQ0FDUCxDQUFBLENBQ0UsQ0FBQSxDQUNFLENBQUEsRUFFRixJQUFBLEVBQUEsRUFBQSxZQUFBLENBQ0UsRUFBQSxZQUFPLENBQVAsRUFDQSxFQUFBLGNBQUEsQ0FBQSxFQUNGLEVBQUEsV0FBQSxDQUFBLEVBQ0UsRUFBQSxTQUFBLENBQU8sRUFDUCxFQUFBLFlBQUEsRUFBQSxFQUNGLEVBQUEsY0FBQSxFQUFBLEVBQ0EsRUFBQSwwQkFBQSxFQUFBLEVBQ0EsRUFBQSxtQkFBQSxDQUFBLEVBQ0EsSUFBQSxFQUFBLEVBQUEsYUFBQSxDQUNBLEVBQUEsRUFBQSxlQUFBLENBQ0EsRUFBQSxFQUFBLGFBQUEsQ0FDQSxJQUNBLEVBQUEsRUFBQSxDQUFBLEVBQ0EsRUFBQSxHQUVBLENBQ0EsSUFBQSxFQUFBLEdBQUEsR0FBQSxHQUNBLEVBQUssR0FBTCxDQUNBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFDQSxDQUFBLENBQUEsRUFBQSxDQUFBLEdBQ0EsSUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQ0EsR0FBQSxPQUFBLEVBQ0EsSUFDRSxDQUFBLENBQUEsRUFBQSxDQUFBLEtBQUEsRUFBQSxFQUNBLEVBQUEsRUFBQSxNQUFBLENBQ0YsSUFDRSxDQUNBLElBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxBQUNGLFFBQUEsSUFBQSxFQUFBLElBQUEsQUFBQSxFQUFBLFdBQUEsQ0FBQSxBQUNFLENBQ0osR0FBQSxDQUFBLENBQ0EsQ0FDRixJQUFBLEdBQUEsR0FBQSxFQUFBLEVBQUEsR0FDQSxJQUFBLEdBQ0UsSUFBQSxHQUNBLElBQUEsRUFBVyxHQUFBLEVBT2IsRUFBQSxDQUFBLGNBQUEsRUFDQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQUFDRSxFLEVVeG1CSyxFLEVlaURQLEVBQUEsQ2YvQ0UsSWUrQ0YsQ0FBQSxFQUFBLFVBQUEsQyxHZjdDRSxFQUVBLEUsRyxJLEtBSU0sR0FBQSxHQUFBLEtBQUksSUFBQSxDQUFBLEMsRyxFQUNKLEdBQUEsRUFFQSxHQUFBLEUsRyxFLEVBSEEsQyxFQU9GLEdBQUEsRSxJLEUsSSxFLFksQSxDLEVBQ0UsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEFBQUEsQ0FBQSxFQUFJLEVBQUEsQUFBQSxZQUFBLENBQUEsSyxFLGdCLEMsRSxDQUNKLENBQUEsR0FBQSxXQUFrQyxPQUFwQixHQUFBLENBQUEsR0FBb0IsSSxFLEMsRUFFakMsRSxBQUFBLEFBQUEsWUFBQSxDQUFVLEUsR0FBQSxFQUFBLGdCQUFBLEVBQUEsQ0FBQSxDQUNhLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEFBQUEsQ0FBQSxDLEcsQyxFLE0sWSxBLEMsRSxFLEMsRSxFLEMsQyxFLEMsQyxLLEUsRSxDLEMsRSxDLEMsRUFNaEMsRUFBQSxHLEksRSxHLEVIbENNLEFQNjhhSixTQUFBLEFBQUEsQ0FBQSxDQUFBLENBQUEsRUFJQSxHQUhBLEVBQUEsRUFBQSxhQUFBLENBQ0YsR0FBQSxHQUVFLEdBREYsRUFBUyxHQUFULElBQzZCLENBRTNCLEdBQUEsbUJBQU8sRUFDVCxJQUFBLEVBQUEsQ0FDQSxHQUo2QixHQUlwQixFQUFBLGNBQUEsQ0FDSCxJQUFBLEVBQUEsWUFBVyxBQUNmLE9BSUUsRUFBQSxDQU1BLElBQUEsRUFFQSxDQVBKLEVBQ00sQ0FBQSxFQUFKLEVBQUEsYUFBQSxBQUFBLEdBQ0ksRUFBaUIsV0FBYSxFQUNoQyxNQUFBLEVBSWEsWUFBTyxFQUFBLEVBQ2pCLFlBQXNCLEdBQ3pCLEdBQUEsR0FBQSxJQUFBLEVBQUEsVUFBbUIsQ0FBQSxDQUVSLEVBQUEsRUFBQSxVQUFBLENBQVUsSUFvQmpCLEVBcEJpQixFQUFBLEVBQUEsQ0FxQm5CLFdBckJtQixDQUEwQixFQUFBLEVBQUEsU0FBQSxDQUFXLEVBQy9DLEVBQUEsV0FBYyxDQUszQixHQUFBLENBQ0YsRUFBQSxRQUFBLENBQUEsRUFBQSxRQUFBLEFBQ1MsQ0FBQSxNQUFBLEVBQUEsQ0FDUCxFQUFBLEtBQ0EsTUFBQSxDQUNGLENBQ1MsSUFBQSxFQUFBLEVBQ1AsRUFBQSxHQUNBLEVBQUEsR0FDRixFQUFBLEVBQ1MsRUFBQSxFQUNQLEVBQUEsRUFDSSxFQUFKLEtBQ0ksRUFBQSxPQUFBLENBQ0UsSUFBQSxDQUlKLElBQVksR0F1QlIsSUFBSixHQUFBLElBQUEsRUFBQSxRQUFBLEdBQ0EsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQ0UsSUFBQSxHQUNFLElBQU0sR0FBQSxJQUFBLEVBQUEsUUFBQSxHQUNOLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUNGLElBQUEsRUFBQSxRQUFBLEdBQUEsQ0FBQSxFQUFBLEVBQUEsU0FBQSxDQUFBLE1BQUEsQUFBQSxFQUNFLFFBQU0sQ0FBQSxDQUFBLEVBQUEsVUFBQSxBQUFBLEdBQ1YsQUFEVSxFQUNWLEVBQ0EsRUFBQSxFQUlNLE9BQ0UsQ0FDRixHQUFBLElBQUEsRUFBQSxNQUFBLEVBbUJKLEdBakJFLElBRUYsR0FVSixFQUFBLElBQUEsR0FDRixHQUFBLENBQUEsQ0FBQSxDQUNTLElBQUEsR0FEVCxBQUVFLEVBQUEsSUFBQSxJQUNJLEVBQUEsQ0FBQSxDQUFKLENBQ0ksSUFEQSxJQUNpQixDQUFBLENBQXJCLEVBQUEsV0FBQSxBQUFBLEVBQUEsTUFTRSxFQUFBLENBUkksRUFBSyxDQUFBLEVBUVQsVUFBQSxBQUNFLENBQ0EsRUFBQSxDQUNBLENBQ0EsRUFDQSxLQUFBLEdBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxDQUFBLENBQ0EsTUFBQSxFQUFBLElBQ0UsQ0FDSixFQUFBLEdBQUEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxDQUFBLENBQ0EsTUFBQSxFQUNHLEtBQ2tELElBQWpDLEdBQUEsQ0FBQSxZQUFBLEVBQUEsZUFBQSxDQUFBLEVBQXNCLEdBQUEsQ0FBQSxFQUFXLEdBQUcsRUFDdEQsT0FBQSxJQUdBLEdBRUUsRUFBQSxDQURBLEVBQUssRUFBQSxFQUNMLEtBQUEsQ0FDQSxJQUFBLEVBQUEsR0FBQSxFQUFBLFlBQUEsQUFBQSxDQUFBLEVBQUEsT0FBQSxFQUVBLEVBQUEsTUFBQSxDQUFLLEVBQUwsR0FBQSxPQUVFLEtBQUEsT0FBQSxJQUFJLENBS1IsT0FGQSxFQUFLLENBREwsRUFBQSxFQUFBLEVBQ21CLFNBQUEsQ0FDbkIsRUFBQSxFQUFBLEtBQUEsQ0FDQSxFQUFBLEdBQUEsRUFDQSxLQUFBLEVBRUosS0FBQSxHQUNGLEtBQUEsR0FtREUsS0FBQSxFQUNJLEtBQUEsR0FDQSxLQUFBLEdBQ0YsS0FBSSxFQUdKLEtBQUEsRUFHcUIsS0FBQSxHQTlEckIsS0FJRixNQUFBLEVBQ0ksR0FBQSxJQUFKLEVBQUksR0FBQSxDQUFKLENBQUEsRUFBQSxPQUFBLEVBQUEsQ0FDSSxFQUFBLEtBQWlCLEVBQ2YsRUFBUyxFQUViLEVBQWEsRUFBYixhQUFBLENBQ0ksRUFBVyxFQUFmLGFBQUEsQ0FDSyxFQUFMLEVBQUEsU0FBQSxDQUNFLEdBQUksQ0FBVSxJQUFBLEVBQUEsR0FBWSxFQUFBLElBQUEsQ0FBYyxFQUVyQyxFQUFXLFdBQWMsR0FBQSxFQUN4QixJQUFBLEVBS0YsRUFBTyxFQUFBLHVCQUFQLENBQ0ksRUFBbUIsR0FBMEMsRUFBQSxtQ0FBQSxDQUFBLENBR2hFLENBQUEsTUFBQSxFQUFVLENBRVgsR0FDQSxFQUNBLEVBQUEsTUFBQSxDQUNBLEVBRUUsQ0FDRixDQUNBLEtBQ0UsTUFBQSxFQUNGLEdBQUEsSUFBQSxFQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQ0EsQ0FBQSxFQUdBLEtBREEsQ0FDTSxDQUROLENBREUsRUFBQSxFQUFhLFNBQWIsQ0FBQSxhQUFBLEFBQUEsRUFDRixRQUFBLEFBQUEsRUFHRixHQUFBLFFBQ0EsR0FBVyxJQUFYLEVBQ0UsT0FBQSxFQUFBLFFBQUEsRUFDQSxJQUFBLE9BQ0EsSUFBTyxPQUNQLElBQU8sT0FDVCxHQUFBLEdBQ08sS0FDVCxTQUNGLEVBQUEsV0FBQSxDQUFBLEdBQ0YsQ0FDUyxLQVVvQyxTQVFyQyxHQUFBLElBQUEsRUFBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLE1BQUEsTUFBQSxFQUFBLEtBQ0EsQ0FFQSxHQUFBLFFBREEsQ0FDQSxDQURBLEVBQUEsT0FBQSxBQUFBLEVBQ0EsQ0FDRixFQUNBLE1BQVEsQ0FBSSxFQUFLLE1BRGpCLENBRUosR0FBQSxFQUNGLEtBQ0EsQ0FDRSxHQUFBLEVBQUEsTUFBQSxBQUNBLENBQ0EsRU85cWJJLEVBQVksRUFBUyxFQUNyQixRQUFBLENBQ04sR0FBSyxFLEUsQyxDLEUsRSxDLEMsQyxDLEMsRyxFLEssSyxJLEMsQyxTLEssRyxJLEcsQyxHLEUsSSxFLEcsRSxHLEUsSSxFLEksRSxLLEEsQyxDLEcsSSxFLEksRSxZLEEsQyxFLEUsQyxFLEUsQyxDLEUsQyxDLEssSSxFLEUsQyxDLEUsQyxDLEUsSSxFLEcsSSxFLEcsQyxHLEUsRyxJLEUsRyxFLEcsRSxhLEUsRSxFLFcsQyxFLEUsYyxDLEcsSSxHLEcsRSxhLEUsQVAybkZELFNBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxFQUNFLFFBQUEsS0FBSyxHQUVMLEtBQUEsS0FFQSxHQUFBLElBREYsQUFDRSxDQURGLENBQ0UsUUFBQSxBQUFBLEdBQ0EsQ0FBQSxBQUNGLEdBQUEsSUFBQSxFQUFBLFFBQUEsQ0FDQSxFQUFBLEVBQUEsRUFBQSxVQUFBLEVBQ0EsYUFBQSxFQUNFLEVBQUEsUUFBQSxDQUFBLEtBQ0EsRUFBQSx1QkFBQSxFQUNBLENBQUEsQ0FBQSxDQUFBLEtBQUEsdUJBQUEsQ0FBQSxFQUFBLENBQUEsQ0FDRixDQUVFLEVBRkYsQSxDQUNFLEMsQUFBQSxhLEMsZSxDLEcsQyxHLE8sRyxHLEcsQyxJLEUsRSxLLEMsRSxFLEcsQyxHLEssSSxHLEcsQyxBLEMsQyxtQixFLEUsYyxDLEUsRSxZLEMsSyxHLEMsRSxFLEssQyxNLE0sQyxJLEUsRSxhLEUsUyxFLEcsRSxXLEUsTyxHLEUsWSxDLEMsSSxFLEUsWSxHLEUsRSxXLEMsTSxDLEUsSyxHLEMsRSxLLEMsRyxFLEssSSxFLEcsQyxFLEssRyxDLEUsRyxDLEUsRSxFLE0sRSxFLEksRSxFLEUsRSxFLEMsQyxBLEMsSSxFLEcsRSxHLEUsRyxFLEcsRyxHLEksSSxFLEcsTyxFLEUsVSxHLEUsSSxFLEUsWSxHLEUsTSxFLEUsUyxHLEUsSSxFLEUsVyxHLEUsTSxBLEUsQyxJLEUsRSxXLEcsRSxRLEMsRSxJLEMsRSxNLEUsRSxlLEcsRSxHLEUsUSxDLEMsRSxFLE0sQyxFLEksQyxFLE8sQyxFLEUsQSxNLEMsRSxJLEMsRSxNLEUsRSxRLEMsRSxDLEEsQyxDLEMsQyxJLEUsRSxDLEUsRSxFLEUsVSxFLEksRSxRLEUsRSxJLEMsQyxRLEUsSyxFLFUsQyxJLEUsUyxBLEcsSSxZLE8sRSxLLEUsRSxLLEcsRSxFLEUsRSxNLEMsSSxDLEksRSxDLEMsRSxDLEUsTyxDLFUsQyxFLEksQyxFLE8sQyxTLEMsRSxHLEEsQyxDLEcsQyxDLEcsRyxHLEksUSxDLEcsRSxFLEMsQyxFLEUsQyxDLEMsQyxDLEUsTyxDLEUsRyxDLEMsQyxTLEssRyxJLEcsQyxHLEUsSSxFLEcsRSxHLEUsRyxDLEUsSyxLLEEsQyxDLEcsSSxFLEcsRSxZLEEsQyxFLEUsQyxFLEUsQyxDLEUsQyxDLEssSSxFLEUsQyxBLEcsQyxDLEUsSSxFLEcsSSxFLEcsQyxHLEUsRSxTLEMsRSxRLEMsRyxFLEUsQyxDLEUsRSxDLEMsQyxDLEMsRyxDLEMsQyxTLEssRyxJLEksSSxHLEMsRyxFLEssSSxFLEcsRSxHLEUsRyxFLEcsSSxFLEksRSxZLEEsQyxFLEksRSxJLEUsSyxBLEMsQyxHLEcsQyxFLEUsRyxHLEssRyxFLEUsYSxDLEMsSSxFLEUsWSxDLEcsSSxJLEcsSSxDLEMsRyxFLEMsRSxFLFMsQyxJLFksTyxHLGlCLEMsRyxDLEcsaUIsQyxHLEUsSyxFLE0sRSxFLEUsTyxDLEssQSxDLEMsQyxNLEUsQyxDLEcsTyxFLEMsRSxFLEMsQyxFLEUsQyxDLEUsQyxDLEUsRSxDLEMsSyxHLEMsSSxJLEUsRSxrQixDLEUsRSxFLEUsTSxDLEksQyxJLEUsQyxDLEUsQyxFLEUsSyxDLEMsZSxFLEssQSxFLEMsUSxDLEUsQyxDLEUsRSxDLEMsQyxDLEMsTSxFLEMsRSxLLEcsRyxFLEUsWSxDLEcsQyxFLE8sQyxFLEksRSxDLEMsQyxDLEksRyxNLEcsRSxHLEMsQyxDLEcsRSxHLEUsQyxFLEMsQyxTLEcsQSxDLEMsQyxFLEksRSxBLGdCLEUsQyxDLEUsRyxJLEMsQyxFLFcsQSxJLEEsRSxXLEMsSyxHLEUsQyxBLEMsQSxTLEcsQyxFLE8sSyxLLEssRyxFLEMsUyxLLEcsSSxHLE0sQyxFLEksRSxHLEUsRyxHLEUsSSxFLEcsSSxFLEUsQyxDLEUsRSxDLEMsRyxDLEUsQyxDLEcsRSxHLEUsRSxDLEMsSyxFLEcsRyxLLEksRSxHLEUsRyxHLEcsRSxHLEcsSyxHLEUsTSxFLEMsQyxNLE0sRSxNLEksRSxHLEcsSSxFLEcsRSxPLEUsRyxFLEUsTyxDLEUsRyxHLEUsRyxFLEMsRyxJLFksTyxHLHFCLEMsRyxDLEcscUIsQyxHLEUsQyxNLEUsQyxDLE0sQyxDLFEsQyxFLEMsQyxFLEUsQyxDLEUsRyxFLEUsQyxDLFMsRyxDLEMsQyxDLEMsRSxFLEcsRSxHLEUsRyxFLFMsQyxFLEcsUSxDLEMsRyxFLEUsRSxHLEMsRyxFLEcsRyxFLEMsQSxDLFMsRyxDLEMsQyxDLEMsRSxHLEksRSxHLEMsRyxFLEUsUSxLLE8sRyxDLEcsSSxFLEcsQyxDLEcsRSxFLEcsSyxDLEcsSSxFLEcsQyxDLEksRSxFLFMsQyxHLFksTyxFLEksQyx3QixFLFksTyxFLGlCLEcsQyxNLEksQyxHLEcsQyxFLEMsQyxDLEUsRyxFLEcsUSxDLEMsRyxFLEUsRyxDLEUsRSxHLEksRSxFLEMsQyxHLEcsRSxHLEcsRSxDLEMsSyxDLEMsRSxFLE0sQSxDLEMsUyxHLEMsQyxDLEMsQyxFLEksRSxFLFMsQyxHLE8sRSxDLEUsRSxTLEMsSSxHLEksRSxJLEksRSxHLEMsRSxFLE0sQSxLLE0sQyxFLEcsQyxFLEksQSxFLEksSSxFLEcsQyxFLEUsQyxDLEUsRyxDLEssRyxDLEMsQyxFLEcsQyxHLEUsRyxJLEMsSyxFLEUsRyxFLEksQyxFLEUsQyxBLEMsUyxHLEMsQyxDLEMsQyxFLEksRSxFLFMsQSxRLEcsRSxNLEMsRyxFLFcsRSxFLGMsQyxFLEUsUyxFLEMsRSxLLEcsQyxHLEMsQyxHLEksSSxJLEcsQyxJLEMsVSxFLEMsRyxJLEksSyxHLE0sRSxDLEUsRyxFLEcsSSxFLEssSyxJLEMsQyxDLEcsRSxDLFMsRyxDLEMsQyxFLEksSSxFLEksQyxDLEMsRyxJLEMsQyxHLEUsRSxJLEcsRSxBLEcsRyxFLEMsQSxDLFMsRyxDLEUsSSxFLEUsYSxDLEUsQyxRLEcsRyxFLFMsQSxBLEUsRyxFLEUsQyxTLEcsQyxDLEMsRSxJLEUsRSxPLEUsRyxFLEssRyxJLEUsRSxTLEMsRSxFLGEsQSxRLEksRSxFLFMsQSxBLEUsSyxNLEcsRSxFLFMsQyxLLE0sRyxFLEUsUyxDLFcsQyxLLFMsTSxNLEUsSyxDLE8sRyxFLE0sQyxHLEcsRSxFLEMsSSxHLEssRyxLLEcsQyxFLEcsQyxFLEcsQyxFLEcsRSxTLEcsQyxFLEksSSxPLEUsSSxHLEMsTSxHLEcsRyxFLEcsRyxJLEMsQyxDLEMsRyxDLEUsSyxHLEMsRSxDLEUsVyxJLEMsQyxJLEUsRyxJLEUsRSxFLEMsQSxDLFMsRyxDLEMsQyxFLEcsQyxJLEcsQyxHLEMsRSxHLEEsSSxJLEUsQyxFLEUsRyxPLEcsQyxHLEMsRSxHLEksRSxDLEksRSxFLFksQyxHLEksRSxJLEUsTSxDLEksRSxFLGMsQyxFLEUsVyxDLEUsQSxXLEcsRyxHLEcsRyxJLEMsQyxHLEUsQyxDLEUsQyxDLEUsRSxVLEUsRSxFLEUsRSxDLEMsSSxJLEUsQyxFLEcsRSxFLEMsQSxNLEUsRyxBLEksQSxDLEMsQyxFLEcsRSxJLEcsRSxFLE8sRSxtQixFLEssRSxjLEksRyxFLEssRSxDLEUsRyxFLEUsQyxDLEUsRSxJLEEsRSxLLEUsQSxHLEMsQyxDLEMsUyxLLEksQyxTLEssRyxHLEMsRSxNLEUsRSxJLEksRSxBLEMsRSxPLEssRyxhLEUsSSxDLEEsQyxHLEksQyxHLEUsRSxFLEcsSyxFLEcsRyxFLEMsQyxJLEMsQyxJLEksRSxJLEMsRSxJLEMsQSxFLEcsTyxHLEMsSSxFLEUsSSxDLEUsRyxFLEcsSSxFLEcsSSxDLEssTyxFLEcsRSxFLEksQyxFLE8sSSxHLEMsQSxDLEssRSxDLEksRyxNLEMsSyxHLEUsQyxFLEUsQyxDLEcsRSxDLEUsQyxTLEcsQyxDLEMsRSxJLEksRSxFLGMsQyxFLEUsVyxDLEUsRSxlLEMsRSxXLEUsWSxDLEUsRyxDLEksRSxHLEcsRyxFLEcsRSxFLEMsQyxFLEMsSyxHLEksRSxBLEMsQyxFLEcsQyxFLEEsQyxDLEksQyxDLEUsQ0E3cUVBLEEsU0FBQSxBQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0YsT0FBQSxHQUNFLEtBQUEsRUFDSixLQUFBLEVBQ0YsS0FBQSxFQUNBLEtBQVMsRUFDUCxLQUFJLEdBQ0osT0FBQSxFQUFBLEdBQ0EsTUFBQSxHQUNBLEtBQUEsR0FDRixLQUFBLElBQ0EsS0FBUyxJQUNQLEtBQUksSUFDSixLQUFBLEtBQ0EsS0FBQSxLQUNBLEtBQUEsS0FDRixLQUFBLEtBQ0EsS0FBUyxNQUNQLEtBQUssTUFDTCxLQUFBLE1BQ0YsS0FBQSxPQUNBLEtBQVMsT0FDUCxLQUFLLE9BQ0wsS0FBQSxRQUVGLEtBQUEsUUFDQSxPQUFTLEVBQUEsR0FRUCxLQUFJLElBSUosT0FBSyxFQWdCSCxDQUNBLEUsRSxFLEUsRyxHLEcsUyxHLEUsQyxDLEMsRyxDLEMsQyxHLEUsRyxFLEcsRSxHLEUsSSxFLEUsRSxPLEUsbUIsRSxLLEUsYSxFLEUsRSxZLEMsSSxHLEksSSxJLEksRyxDLEUsQyxFLE8sRSxtQixDLE8sTyxHLE8sRyxFLEcsRSxZLEMsSyxFLGdCLEMsRSxHLEksRSxDLEMsRSxHLEUsRyxDLEcsQyxFLEUsQyxDLEksRSxnQixDLE8sRSxPLE8sRyxFLEcsRyxJLEssRSxLLEUsRSxHLEssTSxHLFEsRSxHLEssTSxXLEUsRSxDLE8sRSxFLEUsRSxHLEksQyxJLEMsSSxFLGdCLEMsRSxFLFksQyxFLEMsQyxPLE8sRyxPLEcsRSxHLEUsZ0IsQyxFLEUsWSxDLEssQyxDLFMsRyxDLEMsQyxFLEcsSSxJLEksRyxPLEUsWSxDLEssRSxnQixDLEUsSyxJLEUsRSxZLEMsRyxHLEMsSSxFLFksRyxFLE8sSyxJLEUsVSxBLEssQyxDLEcsRSxJLEcsRSxFLE8sRSxjLEssRSxLLEUsYyxFLE0sRyxFLEUsRyxHLEUsTSxNLEUsWSxFLEUsWSxHLEUsRyxJLEMsSyxHLEssQyxTLEcsQyxDLEMsRSxHLEssTyxLLEcsRSxFLEMsRSxDLFMsSyxPLEksSSxJLEksQyxDLEUsQyxTLEcsQyxFLE8sTSxHLEksTSxPLEcsVyxPLEUsSyxZLE8sRSxFLEcsRyxFLEMsUyxHLEMsQyxDLEUsSSxFLEUsYSxDLGEsQyxTLE8sRSxJLEMsRSxJLEMsRSxLLEMsRSxLLEMsRSxFLEUsRSxZLEMsTyxFLEUsRSxFLFUsQyxZLEMsRSxHLEUsSSxTLEcsRSxVLEMsVyxDLEcsQyxDLEksSSxHLEUsRyxHLE0sQyxLLEMsSSxHLEUsQyxHLEMsQyxFLEcsVyxHLEMsSyxDLEMsQyxFLEMsVSxDLEcsRyxLLEMsRSxFLEMsRyxHLGtCLEcsRyx3QixHLEcsb0IsRyxXLGlCLEcsVSxXLEcsVyxVLEcsRyxtQixHLEcscUIsRyxHLHNCLEcsRyxtQixHLGUsQyxXLFksRSxHLGUsQyxXLFksRSxHLGlCLEMsYSxjLEUsRyxpQixDLGEsYyxFLEcsVyxvRSxLLEMsTSxHLFcsdUYsSyxDLE0sRyxnQixDLGlCLFcsWSxRLEUsRyxtQiwyRCxLLEMsTSxHLHFCLDZELEssQyxNLEcsc0IsOEQsSyxDLE0sSSxHLDZOLEssQyxLLEcsSSxJLGlFLEssQyxLLE0sQyxLLFMsRyxDLEMsQyxFLEUsTSxDLEMsQyxJLEksRSxFLEUsRSxNLEMsSSxDLEksRSxDLEMsRSxDLEUsRSxLLEMsRSxFLFMsQyxFLEMsSSxFLEssRSxHLEUsSSxJLEUsRSxNLEMsRSxHLEUsSSxDLEksRSxDLEMsRSxDLEUsRSxRLEMsRSxFLGEsQyxHLEUsRSxRLEMsSSxHLEUsb0IsRyxNLEUsRSxFLEUsYSxDLEUsRyxDLEUsRSxDLE0sRSxDLEcsRSxDLEUsYSxDLEssRSxDLE0sSSxFLEUsRSxFLE0sQyxJLEMsRyxFLEMsRSxDLEMsRSxBLEUsUSxDLEUsRSxhLEMsRSxFLFEsQyxJLEcsRSxvQixHLE0sRSxFLEUsRSxhLEMsRSxHLEMsRSxFLEMsTSxFLEMsRyxFLEMsRSxhLEMsSyxFLEMsQyxDLEMsQyxTLEcsQyxDLEMsRSxJLEUsQyxDLEcsQSxNLEksSSxFLEMsQyxHLEMsSSxHLEMsQyxJLEUsQyxDLFcsRSxHLEMsSyxHLEUsRSxFLEMsRyxDLEMsRyxDLEUsQyxBLEMsUyxHLEMsQyxDLEMsQyxFLEksRSxFLEksSSxDLEMsRyxFLEUsRSxFLEMsSSxBLEcsa0IsSyxNLEcsUSxDLEksSyxDLEcsUyxHLEMsRSxHLEMsQyxDLEcsQyxDLEMsQyxHLEMsQyxFLEcsTyxDLFMsQyxFLG9CLEksRyxHLEMsSSxDLEUsRSxDLEUsRyxHLEUsQyxFLEUsQyxBLEcsSSxFLEksRSxRLEMsRSxFLGEsQSxRLEcsQyxDLEcsRSxFLEEsQyxHLEMsQyxFLEcsa0IsQyxFLEUsQyxBLEMsQyxTLEcsQyxDLEMsQyxDLEMsQyxFLE8sRyxJLEssRSxJLEUsRyxLLE0sRSxFLEcsSyxTLEUsRSxDLEUsRSxJLEMsSyxFLEUsRyxFLEssRSxBLEssZSxHLGMsRyxVLEMsSSxDLEMsRSxDLEMsRSxLLEksRSxFLGdCLEMsRSxFLEMsUSxDLEUsUSxDLEcsRSxnQixDLEUsRSxDLEcsSyxJLEUsRSxnQixDLEUsRSxDLFEsQyxHLEUsZ0IsQyxFLEUsQyxFLEMsUyxHLEMsQyxDLEMsQyxDLEMsQyxDLEUsSSxFLEUsRyxNLEMsQyxFLEksRSxDLEMsRSxPLEUsRSxPLEMsRyxPLEUsTyxJLEUsRSxHLEMsRyxJLEcsSSxFLEMsSSxFLEUsUyxDLGEsQyxHLEksRSxNLEcsSSxFLEksRSxFLE0sQyxPLEcsQyxJLEUsRSxHLEMsRyxDLEksRyxJLEMsQyxFLEUsUyxDLGEsRyxFLE8sRSxFLE0sQSxDLEssTyxHLEMsRyxRLEMsQyxHLEUsRSxPLEcsSyxDLEMsRSxHLEEsRyxJLEcsSyxHLEssRSxDLEUsRSxFLFMsQyxDLEUsRSxVLEEsQyxDLEUsRSxNLEEsQyxHLFcsSSxFLEUsRSxHLEcsRSxFLEMsRSxDLEksRSxHLEcsQyxHLEcsSyxJLEUsQyxJLEUsRyxFLEUsTyxHLEksVyxHLEksRyxHLE0sQyxLLFUsSSxRLEUsRyxLLEssVSxFLFEsRSxHLEssSyxXLEUsTyxFLEcsSyxLLGEsSSxZLEUsRyxLLEssUSxHLEksRSxNLEMsTSxDLEssVyxJLFcsSSxZLEksWSxJLFUsSSxXLEksWSxJLGMsRSxHLEssSyxPLEksVSxJLFksSSxXLEksWSxJLFcsSSxZLEksTyxFLEcsSyxLLGMsSSxXLEksWSxJLGEsRSxHLEssTSxHLEssRyxLLEcsRSxHLEssTSxHLEUsRyxLLEssUyxJLFksRSxHLEssSyxRLEUsRyxLLEssTyxJLE0sSSxRLEUsRyxLLEssb0IsSSxxQixJLGdCLEksYyxJLGMsSSxhLEksYyxJLFksRSxHLEssSyxTLEksZSxFLEUsQyxJLEUsTSxDLEMsQyxFLEMsSSxXLEcsQSxjLEMsQyxDLEUsRSxPLEUsRSxVLEssRSxFLEUsQyxJLEksRSxFLEUsTyxHLEMsSSxFLEUsRyxFLEUsUyxDLEssQyxDLEUsRyxBLEcsSyxHLEssRyxPLEcsTyxHLE8sQyxDLEcsRSxDLEMsRyxFLEksQyxHLEUsRSxJLEUsTSxFLEUsRyxHLEEsQyxFLEUsTSxFLEUsQyxJLEUsRSxFLEssRSxHLEUsSSxDLEMsTSxFLFUsQyxFLEMsQSxDLEMsRyxJLEMsQyxHLEMsRyxDLEUsYyxHLGdCLEUsRSxhLEcsZSxJLEcsSSxLLEUsRSxhLEUsRSxXLEEsSSxDLEUsRyxDLEMsQyxHLEMsRyxFLEcsQyxBLEcsQyxFLEUsTSxHLEUsRSxDLEUsRSxhLEEsRSxFLFcsRSxFLFksQyxPLEcsRSxFLGEsQSxFLEUsUyxDLEUsRSxRLEMsQyxFLEcsRyxJLEksQyxDLEUsRyxFLEUsRyxDLEksRyxJLEcsSyxHLEksQyxJLEUsSSxDLEcsRSxLLEUsQyxFLEksRyxDLEcsRSxHLEUsZSxFLGUsRSxTLGUsRyxnQixDLEksRSxHLEUsaUIsRSxpQixFLFMsRSxFLE0sRSxFLEcsRyxFLE0sRSxFLEcsRyxDLEUsSSxFLEUsRSxRLEUsRSxFLEUsTSxDLEUsRSxhLEMsRSxFLEssRyxLLEksQyxFLEksRSxDLEMsRSxRLEUsRSxFLEUsTSxDLEUsRSxhLEMsRSxFLEMsQyxDLEUsRSxHLEUsRSxDLEksRSxFLEUsRSxFLEUsRSxFLEUsRSxHLEcsSSxJLEUsRSxFLEUsRSxFLEcsRyxJLEssRSxFLEcsRSxHLEcsSSxLLEUsRSxHLEUsRyxHLEksSyxLLEMsRyxJLEcsTyxHLEksRSxTLEMsTSxFLEUsRyxHLEUsRyxFLEMsRSxJLE0sRSxJLFEsRyxHLEUsRSxFLEUsQyxHLE8sRyxPLEcsRyxFLEUsRSxFLEMsRSxDLEUsQyxHLFksQyxDLEMsRSxFLEcsRyxNLEUsUSxFLEUsUSxDLFcsRSxHLFUsRyxTLEUsSSxDLEksRSxFLFEsRyxHLEcsRyxHLEUsTyxDLEUsRyxJLEUsRSxLLEMsQSxFLEUsUSxBLEcsVSxFLFcsSyxhLEUsSSxFLFUsRSxJLEEsRSxFLEcsRyxHLEUsVyxJLEMsQyxFLEMsQyxHLEksRSxFLEUsRSxDLEMsQyxHLEUsQyxDLEUsRyxNLEMsQyxHLEUsRSxFLEcsYSxHLEcsVyxFLEksRSxNLEUsYSxDLEssRSxHLEUsUyxFLEssQyxDLE8sRSxFLEcsRyxPLEcsSSxXLEcsSSxTLEUsZSxBLEcsSSxFLEcsRSxHLEksRSxLLEssVyxHLEcsRyxLLEssSyxZLEcsQyxFLEssSyxjLEksVSxJLFUsRyxDLEUsRyxFLEUsRyxLLEssa0IsRyxHLEssSyxVLEksUSxHLEUsRSxFLEMsRyxHLEUsQyxPLEcsSSxtQixJLEUscUIsTSxDLEssaUIsRSxtQixNLEMsSyxvQixFLHNCLE0sQyxDLEUsSyxDLE0sRyxHLEUsSyxFLFMsUyxDLEMsWSxHLE0sRSxPLEcsQyxDLG9CLEMsQyxJLEksSyxFLEUsTSxHLEMsRyx1QixFLHFCLEcsSyxFLEksQyxFLEUsQyxVLEMsRSxDLEUsRyxDLEksQyxHLFcsQyxHLEUsQyxDLEMsRSxDLEUsRyxFLEUsRSxNLEUsRSxDLEksRyxFLEUsSyxFLEcsRSxJLEMsQyxNLEUsVSxDLEcsRSxFLEksQyxFLFEsQyxDLEcsQSxFLEksRSxJLEEsQyxDLEMsQSxDLEMsRSxFLEcsQUFpdkRBLFNBQUEsQUFBQSxDQUFpQixDQUFBLENBQWpCLEVBQ0EsT0FBQSxHQUNBLElBQUEsaUJBQ0EsT0FBSSxHQUFrQixFQUNwQixLQUFBLFdBQ0EsR0FBQSxLQUFBLEVBQVMsS0FDSixDQUFBLE9BQVcsS0FHbEIsT0FBQSxBQURFLEdBQWEsQ0FBQSxLQUVmLEtBQUEsWUFDRixNQUVGLEFBM0NhLE9BMENiLEFBMUNtQixFQTBDbkIsRUFBQSxJQUFBLEFBQUEsRUFDUyxDQUFBLENBM0NvQixDQUFBLENBMkNVLEtBQU0sQ0FFM0MsU0FDQSxPQUFBLElBQ0EsQ0FDQSxFLEUsRyxBQUNBLFNBQUEsQUFBQSxDQUFBLENBQUEsQ0FBQSxFQUNBLEdBQUEsR0FDQSxNQUFBLG1CQUF5QixHQUMzQixDQUFBLElBQ0EsR0FBUyxFQUFBLElBQ1AsRUFBQSxLQUNBLEdBQU8sQ0FEUCxFQUNPLEdBQUEsS0FDVCxHQUFBLENBQUEsRUFDQSxDQUFBLENBQVMsQ0FDUCxLQUNBLE9BQUEsR0FDRixJQUFBLFFBd0NBLFFBdkNBLE9BQVMsSUFDUCxLQUFBLFdBQ0EsR0FDQSxDQUFBLENBQUEsRUFBUyxPQUFjLEVBQUEsRUFBZSxNQUF0QyxFQUFBLEVBQUEsT0FBQSxBQUFBLEdBQ0ssRUFBSSxPQUFlLEVBQUEsRUFBUyxNQUFZLENBUzdDLENBUW9DLEdBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsQ0FBQSxNQUFBLENBQzFCLE9BQUEsRUFBZSxJQUNsQixDQUdULEdBQUEsRUFBQSxLQUFBLENBQUEsT0FBQSxPQUFBLFlBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FDQSxDQUNFLE9BQVMsSUFNVCxLQUFLLGlCQUVMLE9BQU8sSUFBd0IsT0FBWSxFQUEzQyxNQUFBLENBQ0YsS0FDSSxFQUFBLElBR0YsQUFIRSxDQUlGLEUsRSxFLEcsRSxDLEUsRyxFLGdCLEUsTSxFLEUsQyxJLEcsZ0IsYyxLLEUsRyxFLEksQyxDLE0sRSxVLEMsRyxFLEksQyxDLEMsSyxFLEUsRyxLLEUsSSxNLEEsRSxHLEUsRyxDLEssQSxDLEMsRSxDLEUsRyxDLEMsQyxHLEUsRyxDLEMsQyxNLEUsRSxFLFMsQyxHLFEsQyxDLEEsQyxFLEMsQyxHLEUsSSxDLEEsQyxHLEUsVSxFLEUsWSxDLGEsRyxHLEUsRSxJLEMsQyxBLEksRSxJLEcsUyxTLEssQyxJLEEsRSxJLEMsQyxDLEssRSxVLEMsQyxTLEssUyxXLEcsRSxnQixFLEcsSSxHLEMsSSxFLEUsSyxHLEksUyxHLEssQyxRLEMsRSxLLEUsRSxLLEUsTSxDLEUsSyxDLEUsSyxHLEssWSxPLEksRSxJLFUsRyxLLEMsUSxDLEUsSyxDLEMsRSxLLEcsSSxJLEssRyxPLEEsRSxNLEMsTyxDLEUsQSxFLEUsQyxBLEUsZSxBLEUsQSxFLEMsQyxHLEUsRSxFLEMsUyxHLEMsQyxDLEMsQyxFLE0sQyxTLEUsUyxFLGMsQyxDLEMsUyxHLEMsQyxDLEUsSSxJLEUsRSxVLEUsRSxDLE8sRyxDLEksRSxFLEUsRSxTLEMsRyxLLEMsQyxFLEcsQSxHLEssRyxLLEcsTyxHLEMsUSxDLEEsRyxFLEUsRyxFLE8sQyxHLEUsRSxJLE8sQyxDLEcsRSxFLEcsRSxJLEMsRyxFLEUsRyxDLEMsSSxFLEcsQyxPLEUsRSxFLE0sQSxDLE0sRSxBLEMsUyxHLEMsRSxHLE8sRSxPLEssRyxFLEUsTSxPLEcsSSxFLEcsRSxLLEUsRyxDLEEsTyxHLEksQSxDLFMsRyxDLEMsQyxDLEMsQyxDLEMsQyxFLEksSSxFLEUsVSxDLEUsRSxDLE8sRyxJLEcsQyxJLEUsRSxFLEUsUyxDLEUsRSxTLEMsRyxFLEUsRyxDLE8sRyxJLEUsTSxJLEcsSyxHLEssRyxPLEksRSxFLEUsRyxJLEMsQyxHLEUsQyxDLEcsRSxPLEMsRyxFLEUsSSxHLEksRyxDLEMsRyxFLEMsQyxHLEUsSSxDLEcsRSxFLEcsQyxDLEUsRSxNLEEsQyxJLEUsTSxFLEUsSSxDLEMsTSxFLFUsQyxFLEMsSSxHLFMsRyxpQixTLEcsQyxFLE0sQyxVLE8sRSxFLEcsQyxDLEMsTyxDLEcsTSxPLEMsRyxHLEMsUyxHLEMsQyxDLEUsTyxFLEcsRyxHLEssQyxDLFMsRSxDLEUsQyxDLEMsTyxHLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxFLE8sRyxJLFcsVSxPLEUsUyxHLGEsRyxLLEcsRyxFLEcsQyxVLE8sRyxVLE8sQyxDLEUsUyxHLEcsRSxHLEcsSyxLLFksRyxFLFEsRyxLLEssVyxHLEUsVyxHLEssSyxNLEksTyxJLFUsSSxRLEksUyxHLEUsRSxHLEssSyxRLEcsRSxFLEcsSyxLLE8sRyxXLEUsQyxHLEUsTyxHLEssQyxJLE0sSSxPLEcsSyxJLEssQyxHLFMsQyxDLEUsTSxHLFksTyxHLFUsTyxHLFcsTyxFLEMsRSxFLGEsQyxHLEssQyxFLEcsRyxHLEUsWSxDLEUsRyxLLEssUyxJLGEsRyxZLE8sRSxDLEUsWSxDLEUsd1IsSyxDLEcsWSxPLEksUyxNLEcsRyxPLEcsRyxFLEUsTyxFLEksQyxFLE0sRyxFLEUsYyxFLFcsQyxFLE0sRyxFLEUsYSxFLFUsQyxFLE0sRyxFLEUsYSxFLFUsQyxFLEssQyxFLEUsQyxFLEUsVSxFLE8sQyxFLE0sRyxFLEUsUyxFLE0sQyxFLE0sRyxFLEUsUyxFLE0sQyxFLEssQyxDLEMsTSxHLFUsTyxHLFcsTyxFLEMsRSxlLEMsRyxLLEMsRSxHLEcsRyxFLFksQyxFLEcsSyxLLFUsTSxJLEUsRyxJLEMsRSxDLEMsSyxLLFcsTSxHLEcsUyxHLEssSyxjLE0sRyxHLFksRyxLLEssMEIsRyxNLEUsQyxHLFUsTyxHLEMsQyxXLEMsQyxDLE0sTSxFLEssRyxPLEMsQyxFLE0sQSxFLEMsRyxNLEUsUSxDLE0sTSxFLEssRSxTLEMsQyxDLEMsSyxLLFcsRSxRLEMsRyxZLE8sRyxVLE8sRSxLLEssUSxFLEssQyxHLFksTyxHLFUsTyxFLEssSyxpQyxJLDJCLEksZSxJLGlCLEksWSxJLE0sSSxZLEksWSxJLGMsSyxLLFksRyxNLEcsWSxPLEcsVyxPLEcsVSxPLEUsQyxFLGUsQyxjLEssQyxFLEcsRyxHLEUsYyxDLCtCLGEsRyxLLEssa0IsSSxhLEksWSxJLFEsSSxjLEksNEIsSSxZLEksZ0IsTSxHLFksTyxHLFUsTyxFLEUsWSxDLEUsRyxHLEUsZSxDLEcsSyxLLFEsSSxrQixJLFEsSSxXLEksVyxJLFUsSSxRLEksVyxJLDBCLEksd0IsSSxpQixJLFMsSSxPLEksVyxJLGEsSSxPLEksYyxJLFcsSSxXLEksVyxJLFMsSSxXLEksWSxHLFksTyxHLFUsTyxFLEUsWSxDLEUsSSxFLGUsQyxHLEssSyxVLEksVyxDLEksRSxFLFksQyxFLEksQyxJLEcsTSxHLFksTyxHLFUsTyxFLEUsWSxDLEUsRyxFLGUsQyxHLEssSyxPLEksTyxJLE8sSSxPLE0sRyxZLE8sRyxVLE8sRyxDLE0sSSxHLEUsRSxZLEMsRSxHLEUsZSxDLEcsSyxLLFUsSSxRLE0sRyxZLE8sRyxVLE8sRyxNLEcsRSxlLEMsRyxFLFksQyxFLEcsSyxLLFUsRyxlLEcsRyxTLEcsRyxFLFUsRyxLLEssZSxHLEUsK0IsZ0IsRyxLLEssZSxHLEUsK0IsZ0IsRyxLLEssWSxHLEUsK0IsYSxHLEssSyxZLEcsRSwrQixhLEcsSyxLLGEsRyxFLCtCLGMsRyxLLEssWSxHLEUsK0IsYSxHLEssSyxVLEcsRSx1QyxXLEcsSyxLLFUsRyxFLHVDLFcsRyxLLEssVyxHLEUsdUMsWSxHLEssSyxLLEcsRSxLLEcsSyxTLEEsQyxDLEUsTSxHLE0sQyxDLEUsRSxNLEMsQyxFLEEsSSxNLEMsQyxFLEUsTSxDLEMsRSxBLEcsRyxFLEUsRyxHLEMsQyxHLEUsRSxDLEMsUyxHLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxFLE8sRyxJLFEsRyxFLEUsRyxLLEssMEIsRyxNLEUsQyxHLFUsTyxHLEMsWSxDLEMsQyxNLE0sRSxLLEcsTyxDLEMsRSxNLEEsRSxDLEcsTSxFLFEsQyxNLE0sRSxLLEUsUyxDLEMsQyxDLEssSyxXLFUsTyxFLEcsRSxHLEMsVSxPLEcsVSxPLEMsQyxFLEcsRSxHLEcsSyxLLFcsTSxHLEcsUyxHLEssSyxjLE0sRyxHLFksRyxLLEssVSxNLEksRSxHLEksQyxFLEMsQyxLLEssaUMsSSwyQixJLFksSSxNLEksWSxJLGMsSyxTLEcsQyxHLGMsQyxHLEUsQyxHLE0sQyxDLEUsRSxNLEMsQyxFLEcsQyxDLEUsUSxDLFcsRSxFLEssQyxFLEUsRSxNLEMsRSxLLEcsWSxPLEEsRSxPLEMsQyxDLEMsRyxFLEksRSxDLEMsRSxDLEksRyxFLG1CLEMsRSxFLEcsWSxPLEMsQyxDLEMsWSxPLEcsTyxJLEssRSxDLEMsQSxFLEMsSyxFLFksQyxJLEUsZSxDLEUsQyxDLEUsZ0IsQyxFLEUsRyxNLEMsQyxLLEUsQyxDLEUsQyxFLEMsSSxFLEUsWSxDLEUsSSxHLEUsRSxFLEMsQyxDLFMsRyxDLEMsQyxDLEMsRSxPLEcsSSxNLEksTyxJLE0sSSxPLEksSSxJLEksSSxJLEksSyxLLEssTSxHLFEsRyxHLE8sRyxJLEUsRSxDLEUsRSxDLEUsSSxLLEUsRyxFLGMsQyxHLEMsSSxFLEMsQyxFLEMsRyxNLEUsTyxHLEksTSxFLEMsRSxLLEssUyxFLEMsRSxLLEssVyxJLDBCLE0sTSxFLEksRyxTLEcsRSxFLEUsRSxFLEssQyxDLEcsRyxFLEUsUyxFLE0sQyxFLE0sRyxHLEUsRSxNLEUsRyxDLEUsTSxNLEssUSxHLFUsRyxJLEUsRSxFLEUsSyxFLEssRSxLLEksSyxFLEcsRSxjLEMsRyxDLEksRSxDLEMsRSxDLEcsTSxFLE8sRyxJLE8sRSxFLEssSyxPLEUsRSxLLEssVSxFLEUsSyxLLGlCLEUsRSxLLEssUSxFLEUsSyxLLGUsRSxFLEssSyxXLEksMEIsRyxNLEUsTSxNLEUsSSxJLEssUyxHLEUsRSxFLEUsRSxLLEMsQyxHLEUsRSxFLEUsRSxFLEUsQyxHLEcsRyxNLEssUyxJLEssRyxVLEcsRSxFLEUsSyxFLEcsRSxjLEMsSSxPLEMsQyxDLEEsQyxFLEEsRSxLLEUsRyxJLFEsRSxFLEssSyxlLEUsRSxLLEssVyxFLEMsUyxHLEUsRSxFLEUsRSxLLEMsRSxFLEUsRSxFLFEsQyxDLEMsRSxNLEUsRyxFLEMsQyxFLEUsQyxHLE0sRyxHLEUsQyxDLEUsRSxDLEcsTSxLLFcsSSxLLEcsVSxHLEUsRSxFLEssRSxHLEUsYyxDLEksQSxRLEMsQyxBLEMsRSxBLEUsSyxFLEcsSSxRLEUsRSxLLEssZSxFLEUsSyxLLFcsRSxFLEssSywwQixHLE0sRSxNLE0sRSxLLEssUyxHLEUsRSxFLEUsRSxLLEMsRyxFLEUsRSxHLEcsRyxNLEssUyxJLEssRSxFLEUsWSxDLEksTyxDLEEsQyxDLEMsRSxBLEMsRyxBLGEsRSxFLFEsQyxHLFksTyxHLFUsTyxFLEcsRSxFLEUsRSxFLE8sTSxLLFMsRyxlLEcsRyxTLEcsRyxTLEcsRyxRLEcsSyxLLFMsSSxTLEcsTyxHLEssSyxRLEksUSxJLEUsRSxFLEcsTSxDLEksRyxFLEMsRSxDLEcsSyxLLFEsRyxRLEcsRyxPLEcsSyxLLFUsRyxTLEcsSyxLLFEsSSxTLEksTyxHLFEsRyxHLE8sRSxLLE8sSSxPLEksSyxJLE0sSSxLLEksUyxJLE8sSSxRLEksUSxJLE0sSSxXLEksSyxFLEcsRSxjLEMsSSxPLEMsQyxDLEMsRSxBLEMsQyxBLE8sRyxJLFcsSSwwQixNLE0sRSxJLEcsUyxHLEUsRSxFLEUsRSxLLEMsTSxTLEcsRyxHLEMsSSxLLEUsRSxjLEMsSSxLLEksRSxDLEMsQyxBLEUsQSxHLEcsRSxFLEUsRSxFLEssRSxDLE0sQyxDLEksSyxFLEUsYyxDLEksTSxFLEMsQyxDLEUsQSxBLEcsRyxFLEUsRSxFLEUsSyxBLEMsSSxHLEssRyxLLFMsRyxDLEUsTyxJLEUsUSxDLEUsRSxhLEEsQyxTLEcsQyxFLE8sRyxJLDZCLE8sQyxLLHFDLE8sQyxTLE8sQyxDLEMsUyxHLEMsQyxDLEUsRyxJLEUsTyxHLEksTSxPLEMsSyxPLE8sQyxTLE8sQyxDLE8sSSxHLGtCLEUsRSxDLEMsUyxHLEMsQyxDLEUsTSxhLEcsYSxHLFUsTyxFLFEsRSxVLE8sRSxRLEUsVSxPLEUsUSxFLFUsTyxFLHVCLEUsTyxFLHVCLEUsTSxFLHVCLEMsTSxBLEMsSSxHLEssRyxZLE8sVyxXLEssRSxHLFksTyxhLGEsSyxFLEcsWSxPLFEsUSxLLEUsRyxZLE8sZSxlLFMsRyxJLEssQyxFLE8sRyxPLEMsTSxJLEMsRyxLLEMsRyxFLEcsUyxHLEMsRSxXLFcsTSxDLEUsQyxTLEcsQyxFLE0sUyxDLEMsUyxHLEMsQyxDLEUsSSxFLEUsRSxFLEUsRSxFLEMsSSxFLEUsVyxDLEcsRSxXLEMsRyxHLEksRSxRLEMsRyxRLEMsQyxFLEksQSxFLEMsRyxFLEcsRSxFLEMsRSxFLEksRSxFLGEsQyxHLEUsRyxHLEUsZSxFLEUsRyxHLEUsSSxFLEUsRSxJLEcsRSxFLEksRSxFLEUsVSxDLEcsQyxJLEUsRSxPLEksQyxFLEUsUSxDLEMsQyxHLEUsVyxHLFUsRyxTLEcsZSxFLEcsQyxXLEksRSxXLEMsRyxFLEMsQyxDLEcsSSxFLEMsRSxXLEMsRyxHLEcsTSxDLEcsSyxNLEcsTyxHLE8sRSxJLEUsRSxVLEMsRyxRLEUsRSxFLEMsTyxFLEEsRyxFLEMsUyxHLEMsRSxJLEUsRSxVLEMsSSxHLEssRSxRLEUsRSxDLEUsVyxBLEUsRyxDLEksRSxFLE8sRSxFLFcsQyxFLFEsRSxJLE8sSSxPLEksTyxHLEcsRyxHLFEsSyxTLEksUSxRLEssTyxHLGUsRSxHLEMsVyxHLFEsQyxFLFcsQyxFLEMsQyxTLEcsQyxFLE0sTyxFLEksRSxPLEUsSSxFLGEsRSxhLEMsVSxBLEMsUyxHLEMsRSxLLE0sRSxFLEUsVyxDLEMsSSxFLEUsUSxDLEcsSSxHLEksRSxNLEcsSSxFLEMsRyxPLEMsQyxFLEksQSxHLE8sRyxPLEcsTyxHLE0sRSxNLEcsTyxFLE8sSSxDLEMsTyxDLEMsSSxHLEssUyxHLEMsRSxFLEUsZSxDLEksSSxFLEUsRyxDLEcsSSxFLFEsQyxDLEksRSxFLEksQyxHLE0sRyxPLEcsTyxFLEMsRyxJLEUsTyxFLEcsSyxPLEcsRyxDLEUsRSxlLEEsQyxPLEksQyxTLEcsQyxDLEMsQyxDLEUsTyxFLEcsRyxHLEksTyxHLEMsQSxHLEUsZSxBLEUsTSxNLEUsTSxPLEMsSyxPLEcsQyxDLEUsRSxJLEEsRSxNLE0sRSxNLE8sQyxLLE8sRyxDLEMsRSxFLEksQSxFLE0sTSxFLE0sTyxDLFMsTSxNLEUsSyxDLEMsUyxHLEMsRSxJLEksRSxFLFUsQyxFLE0sRSxFLG1CLEMsQyxDLEUsRSxHLEUsQyxJLEcsSSxJLEcsSSxJLFMsRyxDLEUsTSxZLE8sRSxXLEMsRSxXLEcsSSxFLFEsQyxFLEUsYSxBLEMsSSxHLEUsQyxBLEcsQyxDLEMsRSxDLFEsRSxJLEUsRyxDLEcsRSxLLE8sRyxDLEUsRSxDLFEsQSxDLEUsSSxFLEcsRSxRLEcsSSxFLEcsRSxTLEUsSSxDLEcsRyxHLEMsQyxFLEUsRSxDLFEsQSxDLEUsRyxDLEMsRyxHLGUsRSxLLEUsRSxDLFEsQSxDLEMsQyxFLEcsQyxDLEUsRyxHLGEsRSxFLEUsRSxDLFEsQSxDLEMsQyxDLEMsRSxHLEcsQyxDLEUsRSxHLEksRyxFLEMsSSxFLDJCLEcsRyxLLFUsRyxHLEUsVyxDLEUsRSxpQixHLEUsVyxFLEssVSxPLEUsVSxHLEMsRSxnQixHLEUsVSxFLEksQyxDLEMsRyxVLEcsRyxLLEUsRSxFLEUsTyxHLEcsQyxRLEUsQyxFLEcsSyxLLFMsRSxHLEUsQyxHLEcsQyxLLEUsQyxDLEMsSSxVLEssQyxRLEMsRyxHLEUsVyxDLEssRSxFLEcsQyxFLEcsRyxHLEMsRSxHLE8sRyxhLEMsSSxVLEcsRyxhLEMsRyxLLFcsRyxHLGEsQyxHLE0sRyxBLEUsRyxhLEMsUSxPLEcsRyxBLEcsQSxHLEksQyxXLEMsRSxDLEMsQSxDLEUsRSxDLFEsQSxDLEMsQyxFLEcsRyxDLEMsRSxHLEksRSxDLEksRSxHLFUsTyxFLEUsQyxFLEUsQyxTLEUsaUMsRyxHLFksRyxHLEssRSxFLE8sRyxJLGUsSSxlLEksZ0IsSSxlLEksUyxJLFMsRSxHLEUsQyxHLEMsRyxHLEMsSSxHLEMsQyxDLEksZ0IsSyxDLEUsRyxHLEcsQyxFLEcsTyxHLGEsQyxFLEMsQyxDLE8sRyxJLGUsSSxlLEksZ0IsSSxlLEksUyxJLFMsRyxHLGEsQyxHLEksTSxDLEcsRSxHLGEsQyxRLE8sRyxHLEEsRyxBLEcsSSxDLFcsQyxFLEMsQyxFLEUsQyxRLEEsQyxDLEMsRSxHLEcsQyxDLEUsRyxJLEUsQyxJLEUsTyxnQixDLEUsRyxHLEUsRSxHLEMsRyxBLEksQyxFLEEsRyxFLEksTyxDLEcsRyxJLEUsRSxDLEksRSxNLEMsQyxFLEcsQyxFLEcsRyxDLEUsQyxFLEcsRSxHLEcsRSxHLGEsQyxXLEcsRSxJLEcsRyxHLEksQyxXLEMsRSxDLEMsRSxDLEssUyxTLEUsTSxFLE0sSSxFLEUsRyxDLEUsRSxDLEEsQyxFLEUsQyxRLEEsQyxDLEMsQyxDLEUsRyxHLEMsQyxFLEUsRyxJLEUsQyxJLEUsTyxlLEMsRSxHLEcsRSxHLE8sRyxJLEUsRSxHLEMsRyxHLEMsRSxDLEksRSxDLFEsRSxRLEksRSxHLEUsRyxhLEMsRyxJLEUsTyxDLE0sQyxFLEUsQyxJLGEsSyxFLGtCLEMsRSxHLEMsRSxHLEcsQyxFLEMsRSxHLEUsRyxJLEUsRSxHLGEsQyxRLEcsRyxHLEUsTyxHLEUsRSxDLEksUSxTLEMsQyxDLEUsRSxNLEMsRSxFLE8sQyxDLEcsRSxnQixDLE8sVyxFLE8sRSxDLEcsRSxnQixDLFEsVyxFLE8sRSxDLEcsRSxPLEUsRSxHLEUsRSxHLEMsRSxDLEcsRSxhLFMsRSxNLEUsTSxDLEUsRSxHLEMsRSxFLEMsQyxFLEUsQyxRLEEsQyxDLEMsRSxHLEcsQyxDLEUsRyxJLEUsQyxJLEUsTyxnQixDLEUsRyxHLEUsRSxHLEMsRyxBLEksQyxFLEcsRSxJLE8sQyxHLEcsSSxFLEUsQyxJLEUsTSxDLEUsSyxRLEUsRyxDLEUsRyxHLEMsRSxDLEUsRyxFLEcsRyxFLEEsRyxhLEMsVyxHLEUsSSxHLEcsRyxJLEMsVyxDLEUsQyxDLEUsQyxLLFMsUyxFLE0sRSxNLEksRSxFLEcsQyxFLEUsQyxBLEMsQyxFLEksRyxhLE8sUyxLLFMsUyxHLEMsQyxDLEMsQyxFLEcsSSxVLE8sRyxFLEMsSSxFLEcsRyxFLGEsRSxZLEUsSyxVLE8sSSxHLFEsUyxFLEksQyxDLEcsRyxDLEssRyxHLEMsRyxFLEMsSSxDLEMsWSxFLEssQyxFLE8sRyxhLEMsSyxHLEUsRyxVLEcsQyxRLE8sRyxHLEEsRyxBLEcsSSxDLFcsQyxFLEMsQyxBLEMsQyxTLEcsQyxDLEMsQyxDLEMsQyxFLEksRSxDLEUsRSxPLEEsRSxHLEcsSyxHLEMsRSxNLE0sRSxNLE8sRyxJLE8sSSxRLE8sSSxLLFEsTSxVLE8sRSxVLEUsVSxPLEUsSSxFLEMsQyxHLEUsSSxFLEMsRSxBLEcsRyxHLE8sUSxBLEUsRyxDLEUsSSxFLEMsSyxRLFMsSyxNLEUsTSxJLEUsRSxHLEMsRSxFLEMsQyxDLEMsQyxDLEssTyxTLEssTSxFLE0sSSxDLEssTyxHLGUsRSxHLEUsVSxPLEUsSSxFLFUsTyxFLFUsQyxDLEUsRyxFLEksRSxZLEUsRyxHLGUsQyxFLEUsRyxDLEcsRyxJLEUsRSxRLEssRSxFLEUsQyxLLGEsUyxLLE0sRSxNLEMsUSxFLFEsSSxDLEUsRSxHLEMsRSxHLEMsRSxFLGEsQyxHLEcsQyxFLEMsRSxFLEcsQyxDLFEsQyxFLEUsSyxDLE8sRSxDLEMsRyxHLEMsSyxFLEMsQyxHLFUsRyxRLEssRSxJLEMsWSxFLFcsQyxVLEUsUyxDLE0sRSxLLEMsUyxFLFEsQyxlLEUsYyxBLEUsRyxHLEMsRSxHLEksRSxFLEUsQyxDLEUsQSxFLEMsQyxFLEMsRyxFLEUsYSxDLG1DLEUsSyxFLE8sQyxHLEMsQyxPLEMsRSxBLEUsYSxDLFEsRSxnQixDLE8sVyxPLEUsTyxFLEMsRyxFLGdCLEMsUSxXLE8sRSxPLEUsQyxHLEcsRSxPLEcsRyxHLEUsSSxDLFcsQyxFLEMsQyxDLEMsQyxHLE8sRSxNLE0sRSxJLEssTyxDLEMsRyxHLE8sRSxNLE0sRSxJLEssTyxJLEssUyxPLEUsRSxLLEMsVSxNLEMsRSxFLEcsQSxHLEcsWSxPLEcsVSxPLEcsRSxHLEcsQyxFLEMsQSxFLEcsRyxPLFMsQSxFLEcsQyxFLEksRSxDLEssUyxTLEssTSxFLE0sSSxFLEUsRyxDLEUsRSxDLEMsQyxDLEMsQyxLLE8sUyxLLE0sRSxNLEksQyxTLE0sTSxFLEksRyxDLEMsUyxHLEMsRSxNLFMsRyxHLEcsQyxTLEcsQyxFLE0sMEIsRSxHLEMsUyxHLEMsRSxPLEUsQyxFLEUsQyxrQixFLFUsQyxXLEksRSxDLFMsRyxDLEUsTSxTLEcsRyxJLEMsUyxHLEMsRSxNLGdCLEMsQyxTLEcsQyxDLEMsQyxDLEUsRyxFLEssRyxPLEUsUSxDLE8sRSxJLEUsSSxRLEksRSxFLGEsQyxxQixHLEUsSSxFLE0sRyxFLE8sRSxRLEMsRSxHLEcsRSxJLEUsRSxDLEUsRSxDLFksRSxJLEMsa0IsRSxVLEMsSyxLLFcsSSxHLE8sRyxFLEMsRSxhLEUsQyxDLEMsYSxDLEUsUSxHLEUsUSxHLEcsRSxFLFUsQyxHLEUsUSxDLEMsSyxhLEUsRyxFLEksRSxJLEUsRSxhLEMsRyxJLEcsRSxPLEUsSyxDLE8sRSxFLEUsUSxDLEUsRyxHLEUsRSxHLEcsQyxFLEcsRyxDLEUsQyxFLEcsRSxHLEcsRSxDLEUsYSxFLEMsQyxDLGEsQyxFLE8sSSxFLEUsTyxFLEUsQyxJLFEsUyxDLEMsQyxFLEUsTSxDLEUsRSxPLEMsQyxHLEcsRSxPLEcsRSxLLEMsTyxFLEUsRyxFLEUsVSxDLEcsRSxRLEMsQyxLLFMsRyxFLEcsRSxHLEUsRSxFLGEsQyxHLEksTyxFLFEsQyxFLEcsRyxFLE8sRSxHLEUsRyxHLEMsRSxHLEcsRSxFLEMsRSxHLEcsRyxFLEMsRSxFLGEsRSxDLEUsSyxRLEMsQSxXLEcsRSxPLEcsRSxJLEMsVyxDLEcsRSxRLEMsQyxLLE8sTyxJLFMsTSxNLEUsSSxFLEksRSxPLGUsRSxJLEUsTSxFLEssQyxPLEEsQyxHLEUsQSxFLFEsQyxFLEssQyxPLEUsRSxHLEUsRSxVLEMsRSxDLEMsRSxRLEEsQyxTLEcsQyxDLEMsQyxDLEUsSSxJLEUsRSxnQixDLGtFLEUsRSxNLEMsQyxDLEUsTSxDLEUsQyxLLEUsRSxFLEUsRSxFLE0sQyxJLEMsSSxFLEMsQyxFLEMsRyxFLE8sQyxVLEcsRSxFLE8sRyxJLEUsSyxDLEUsRSxVLEMsWSxDLEUsRSxXLEUsQyxDLEMsSSxFLFEsQyxFLEksQyxDLEUsWSxDLEUsRSxVLEMsQSxDLFMsRyxDLEMsQyxFLE0sRSxXLEcsQyxDLFcsQyxFLFcsQSxFLE0sRSxjLEcsQyxDLGMsQyxFLGMsQSxFLE0sRSxLLEcsQyxDLEssQyxFLEssQSxDLEMsUyxHLEMsQyxDLEUsTSxFLFcsRyxDLEMsVyxDLEUsVyxBLEUsTSxFLGMsRyxDLEMsYyxDLEUsYyxBLEUsTSxFLFMsRyxDLEMsUyxDLEUsUyxBLEMsQyxJLEcsSyxTLEcsQyxDLEMsQyxDLEUsRyxPLEcsQyxJLEUsSSxJLEUsRyxJLEksRSxHLEMsRSxFLE0sRSxDLEUsRSxFLEcsQyxFLEcsQyxFLEksRSxFLEUsRyxDLEUsRSxDLEMsRyxFLEcsQyxHLE8sRSxJLEUsRyxDLEUsTSxFLEUsb0IsQyxHLEUsRSxFLEUsTSxDLEksQyxJLEUsQyxDLEUsQyxHLEMsQyxDLEMsRyxFLEMsQyxHLEUsUyxHLGUsRSxZLEMsTSxDLEUsK0IsRSxZLEMsQyxJLEUsRSxZLEMsSSxHLEUsRSxFLEksRSxFLEcsQyxHLEUsRSxJLEMsRyxFLEcsQyxFLEMsRSxDLEMsQyxPLEMsQyxTLEcsQyxDLEMsQyxDLEUsQyxFLEUsYSxFLEMsRSxJLEMsWSxDLEUsVSxFLEUsYSxDLGdCLEssQyxTLEcsQyxFLE0sZSxFLEksRSxNLEUsSyxDLE8sQSxDLEEsQyxHLEMsQSxHLEMsQyxHLFMsSyxDLFMsSyxHLEksQyxLLEcsSSxJLEMsSyxFLEcsSSxDLFcsQyxHLEksQyxJLEMsVyxPLEcsSSxDLFMsQyxDLEksRSxJLEMsUyxDLEksQyxTLEMsSyxJLEMsQyxJLEcsSyxTLEcsQyxDLEMsRSxFLFcsQyxLLE8sRSxTLEcsQyxDLEssRyxHLEksSSxFLE8sQyxHLEcsRyxLLEcsSSxDLEUsQyxBLEMsUyxHLEMsQyxDLEUsRyxDLEMsQyxHLEssQyxPLEUsQyxJLEUsRyxHLEMsRyxHLEUsSSxFLEUsRyxDLFUsQyxFLEksSSxHLEcsQyxFLEcsSSxJLEUsRSxnQixDLGdELEUsRSxFLEUsTSxDLEksQyxJLEUsQyxDLEUsRSxTLEUsUSxFLFksRSxZLEMsUSxJLEUsRyxDLEUsTyxDLFUsQyxHLEUsQyxDLEMsRyxFLEcsQyxLLEUsQyxFLEMsRSxFLFEsQSxFLFksQyxtQixDLEUsRSxHLEMsSSxDLEksRyxFLEcsQyxLLEcsRSxHLEMsRSxHLEksQyxLLEcsRSxHLEksQyxJLEUsRSxnQixDLE8sRyxFLGdCLEMsUSxHLEUsRSxVLEMsWSxDLEUsRSxXLEUsQyxDLEMsSSxFLFEsQyxFLEksQyxDLEUsWSxDLEUsRSxVLEMsQyxFLEssQyxPLEUsQyxDLEMsSSxHLEMsUyxFLFMsSyxTLEssYyxFLGUsRSxhLEMsRSxTLEcsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsRSxJLEMsRyxDLEUsSSxDLGEsQyxFLEksQyxTLEMsSSxDLE8sQyxJLEMsZSxDLEssSSxDLGEsQyxHLEksQyxZLEMsSSxDLEksQyxJLEMsYyxDLEksQyxPLEMsSSxDLG1CLEMsSyxJLEMsZ0IsQyxFLEksQyxlLEMsRyxJLEksQyxjLEMsSSxDLG1CLEMsSSxDLDBCLEMsSSxDLFksQyxJLEMsUyxDLEksQyxXLEMsSSxDLGMsQyxJLEMsWSxDLEUsSSxDLGEsQyxHLEcsSSxDLGEsQyxHLE0sSSxDLGdCLEMsRSxJLEMsZSxDLEUsSSxDLGEsQyxFLEksQyxrQixDLEUsSSxDLFcsQyxLLEksQyxnQixDLEUsSSxDLFMsQyxFLEksQyxxQixDLEksRyxDLFMsRyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsRSxPLEUsSSxHLEUsRSxFLEUsRSxFLEUsRyxFLEUsQyxJLEksRyxFLEMsQyxFLEcsQSxFLEssSyxHLEUsTyxDLEUsRSxTLEMsRSxFLEssRSxRLEcsRSxXLEMsRSxFLFEsRyxFLGEsQyxDLFEsRSxhLEUsTSxDLEUsRyxHLEMsQyxTLEksUyxTLEMsTyxFLEcsQyxDLEMsQyxDLEMsQyxDLEMsQyxDLFEsRSxHLEMsRSxFLE0sRSxLLEUsTyxDLEUsTyxDLEUsRSxjLEMsRSxDLEUsRyxFLEUsTyxDLEMsUSxDLEUsUSxDLEMsSyxJLEUsQSxLLEMsSSxFLFEsQyxDLEMsQyxRLEMsQyxHLEUsRSxFLEMsRyxHLEUsRSxHLEcsRSxFLEUsQyxBLEMsUyxHLEMsQyxDLEUsRyxRLEMsQyxFLGEsQSxHLE8sRSxVLEMsQyxJLEUsRSxTLEMsRSxTLEMsSSxHLEUsRSxFLEMsQyxDLFMsRyxDLEMsQyxFLEcsRSxHLEMsRSxFLFMsQSxHLEcsRSxFLEMsUyxHLEMsRSxHLEssRSxHLEMsQyxJLEUsRyxFLFUsUSxHLEcsRSxFLFcsRyxFLFUsQyxDLEksRyxDLEUsUyxHLEMsQyxDLEMsQyxDLEMsRSxJLEUsRSxDLEMsRSxDLEMsSyxJLEUsRSxDLEMsRyxDLEUsQyxDLEUsRyxFLEUsRSxFLFEsQyxFLEMsQyxFLEUsQyxDLEMsQyxDLFMsRyxDLEMsQyxDLEMsQyxDLEUsSSxFLEUsQyxBLEcsQyxDLEssSSxFLEUsQyxDLEcsQyxFLEMsQyxFLEcsRSxFLEUsRSxRLEMsRSxDLEMsRSxFLEMsQyxDLEMsQyxTLEcsQyxDLEMsQyxDLEMsQyxFLEcsRyxDLEksRSxHLEcsRyxPLEUsRyxFLEUsRSxHLEcsRyxFLFEsRyxBLFMsQSxDLEMsQyxDLEMsQyxDLEMsQyxFLE8sRyxJLFUsTyxHLEcsRyxFLEUsRSxFLEcsQyxDLEssWSxPLEcsRyxHLEUsRSxFLEUsRyxDLEMsSyxZLE8sRyxHLEcsRSxFLEUsRSxHLEMsQyxLLGMsSSxFLEUsUyxDLE8sRyxHLEMsRSxHLEcsRyxDLEksSyxFLEUsRSxFLEksQyxDLEssb0IsTyxFLEUsUyxDLEcsRyxDLEUsRyxHLEcsQyxJLEssRSxFLEUsRSxJLEMsQyxDLE0sQyxDLEUsRSxFLEUsRSxHLEUsZSxRLEcsRyxFLEcsRSxHLEcsRyxPLEMsRyxDLEssTyxHLEMsSSxFLEcsRyxHLE8sRSxPLEUsRyxFLEssRSxHLEMsRSxFLFMsQSxFLE8sQyxhLEMsWSxDLEMsSSxFLEcsRSxZLEUsRyxJLEUsQyxJLEUsRSxJLEUsWSxFLEUsRSxjLEUsRSxHLEMsSSxFLEcsRyxHLEcsRSxhLEMsRSxFLEUsRyxDLEMsQyxHLEcsSSxDLEMsSSxFLEcsSyxJLEcsRSxDLEUsQyxBLEMsQyxLLE0sRyxRLEMsQyxHLEUsRSxHLEcsRSxFLEcsSyxHLEUsRSxDLEcsUSxDLEMsRyxFLEcsRyxFLEUsRSxHLEcsSSxFLE0sRSxDLEMsTyxHLEUsZSxFLE0sRyxFLEUsRSxLLEUsQyxDLFMsRyxDLEUsTyxHLEUsRyxHLEMsSSxHLEssUyxHLEMsRSxHLEcsSSxDLFEsQyxDLEcsRSxFLEMsSSxFLEUsRyxHLE8sRSxFLFMsQyxJLEUsRSxHLEMsRyxLLEUsQyxHLE8sRSxDLEUsRSxFLE8sRSxFLEksTSxHLEksRSxDLEcsRSxTLEMsTyxDLGEsQyxZLEMsTyxJLEUsRyxDLEUsUyxDLGEsQyxLLEUsSSxNLEksSSxFLEksQyxBLEMsQyxDLE0sRyxFLEksQyxTLEcsQyxFLE8sRyxJLGUsSSxTLEksUSxJLFEsSSxjLEksTyxJLE0sSSxXLEksVyxJLFUsSSxZLEksTyxJLFUsSSxXLEksUSxJLFUsSSxVLEksVyxJLFEsSSxZLEksVSxJLFEsSSxRLEksTyxJLGdCLEksYyxJLFksSSxhLEksUSxJLFMsSSxTLEksUyxJLFMsSSxjLEksVyxJLGEsSSxlLEksUyxJLGtCLEksWSxJLG1CLEksaUIsSSxvQixJLGEsSSxZLEksYyxJLE8sSSxtQixJLFEsSSxhLEksVyxJLFMsSSxjLE8sQyxLLE8sSSxZLEksVyxJLFksSSxXLEksWSxJLFcsSSxZLEksYyxJLGEsSSxjLEksUyxJLFksSSxRLEksYSxJLGEsSSxlLEksZSxPLEMsSyxVLE8sTSxLLEcsTyxDLE0sRyxPLEMsTSxHLEssRyxPLEUsTSxHLE8sVSxTLE8sRSxDLFEsTyxFLEMsQyxJLEcsQyxFLEcsSyxHLEssRyxLLEcsSSxJLEcsSSxJLEcsRSxDLEcsc1AsSyxDLEssUyxHLEMsQyxDLEUsTyxHLEksVSxJLFcsRyxLLEssSyxZLEksWSxHLEssSyxLLFksSSxXLEcsSyxLLEssYyxJLGEsRyxNLEMsRSxTLEUsSyxLLG9CLEkscUIsRyxNLEMsRSxTLEMsQyxDLFMsRyxDLEMsQyxDLEMsQyxDLEMsQyxDLEMsUyxPLEcsRSxXLEcsRyxFLEMsTyxHLEUsYSxFLGlCLEUsWSxFLGlCLEMsRSxBLEUsTyxHLFEsQyxDLEEsRyxFLEcsRyxFLEcsRSxHLEcsVSxFLEUsRSxFLGdCLEMsTyxHLEssRSxPLEMsSSxFLEksQyxJLEMsQyxTLEcsQyxFLEksRSxHLEUsTSxFLEcsTyxFLEMsSSxFLEUsRyxHLE8sRyxHLE0sQyxDLEUsQSxHLEEsRyxHLEEsTyxFLEMsRSxFLEUsQyxFLFMsQyxFQTVtREEsQSxTQUFBLEFBQUEsQ0FBQSxDQUFBLENBQUEsRUFDRixJQUFBLEVBQUEsRUFBQSxDQUFBLENBQ0EsR0FBQSxDQUNFLE9BQUksRUFBQSxDQUFBLENBQUEsRUFBSixHQUNFLFFBQUksQ0FDQyxFQUFBLENBQUEsQ0FBQSxDQUNILENBQ0UsRSxFLFEsQyxXLEcsSyxFLEcsQyxDLEksRSxLLEUsRyxFLEUsRyxHLE0sRSxHLEcsRSxFLEcsRyxFLEUsQyxHLE0sTyxHLEksRyxFLFMsQyxPLEMsYSxDLFksQyxDLEUsUyxDLEksRSxHLEMsRSxTLEMsYSxDLEssTyxDLEMsRSxTLEMsSSxDLFMsRyxDLEUsRyxPLEUsUyxDLE0sQyxFLEksSSxFLEUsZ0IsQyxFLEUsTSxFLEMsSSxFLEcsRSxXLEUsRyxPLEUsTyxNLEUsQyxDLEcsRSxHLEcsRyxFLFMsQyxFLEMsRSxJLEUsRyxDLEUsRSxXLEEsRSxXLEMsRSxJLEMsRyxHLEUsRSxNLEMsYSxDLEcsRyxLLEUsSyxFLEMsTSxDLEMsQyxTLEcsQyxDLEMsQyxDLEUsRyxJLEUsTSxDLEUsQyxTLEssRyxDLEUsTyxJLEcsTSxHLEksQyxDLE8sSSxHLE0sRyxBLEksQyxDLE8sSSxHLE0sRSxDLEksQyxDLEcsTyxDLEksRyxLLEUsQyxHLEMsUyxHLEMsQyxDLEUsRSxTLEcsSSxFLE8sRSxDLEssSyxHLEMsRSxFLHlCLEMsRSxVLGEsQyxHLEMsQyxBLEMsSSxHLEssUyxHLEMsRSxLLEcsSSxFLEUsVyxjLEMsRSx1QixDLFcsSyxJLEcsSSxDLEMsSSxJLEMsQyxFLEUsRSxNLEMsRyxFLEMsSSxFLEMsQyxFLEMsRSxDLEMsRSxFLEMsRSxDLEMsRSxFLEMsRyxZLE8sRSxHLE8sRyxHLEcsYyxNLEksRSxHLEUsUSxHLEcsTSxBLEMsRSxHLEcsRSxHLEUsQyxRLEMsRSxLLEUsTyxFLE0sQyxPLEMsRSxFLEUsQyxBLEMsRSxDLEEsQyxTLEcsQyxFLFMsRSxDLEUsTyxHLEUsRSxDLE8sSSxHLEcsRyxPLEksRyxHLEcsTyxJLEcsRyxHLEcsTyxDLEcsRyxPLEMsRyxJLEksRSxFLEUsRyxNLEMsSSxDLEksRSxFLEMsRSxDLEUsUyxHLEksRSxPLEUsQyxJLEMsQSxDLEssRSxHLE0sRSxFLEssQyxFLEUsQyxFLEEsRSxTLEUsRyxHLE8sRSxTLEUsRyxLLEcsRyxPLEMsQyxDLEUsYSxFLEMsQyxDLGlCLEEsRSxJLEUsRSxFLEUsTSxDLEcsRSxDLEksRSxDLEMsRSxDLEUsQyxDLEUsRSxDLEUsQyxDLEcsRSxLLEcsWSxPLEUsRyxHLFEsRyxFLEMsSSxFLEssRyxHLEUsWSxDLGUsRyxFLEUsRSxDLEMsRyxFLEssRSxFLFUsTSxHLE8sRyxHLFEsTSxFLEUsTSxDLFksTyxFLEMsQyxFLEUsQyxHLEUsSSxFLEMsRSxHLEksQyxDLEcsRSxDLEMsQyxTLEcsQyxFLEksQyxhLEMsQyxDLFMsRyxDLEUsSSxDLGEsQyxDLEMsRyxTLEMsTSxDLEcsUyxDLE0sQyxTLEMsRSxJLEUsSSxDLGEsQyxHLE8sRSxNLE0sRSxNLEcsRSxPLEMsQyxJLEUsRSxLLEssRSxHLEssSSxDLEksRyxDLEcsUyxDLE8sQyxXLEksRSxJLEMsYSxDLEcsTyxFLEMsSSxDLGEsQyxLLEksRSxFLGEsQyxHLEUsTyxDLEUsSyxFLEssTSxLLEMsQyxHLEMsSSxDLEUsRyxTLEMsMEIsQyxTLEMsRSxHLEUsQyxJLEUsSyxFLEMsVSxLLE8sRSxTLEMsRSxJLEksRSxFLEUsRyxNLEUsSSxHLEUsRSxDLEUsQyxRLEMsSyxHLE0sQyxFLEUsRyxJLEcsRyxFLEMsRSxJLEcsRSxPLEMsRyxXLEcsTSxNLEUsSSxHLFcsRyxFLFcsQyxTLEMsRSxJLEUsRSxlLEMsRyxLLEksRSxDLEcsWSxPLEUsTSxDLE0sTSxFLEssTyxNLEUsSSxDLEMsTyxJLEMsRyxJLEMsTSxDLE8sQSxFLFEsQyxDLFEsQyxDRHB0QkosQSxTQUFBLEFBQUEsQ0FBQSxFQUNBLElBQUEsRUFBQSxFQUFBLFNBQUEsQ0FDQSxHQUFBLENBQUEsRUFBQSxDQUVBLEdBQUEsUUFEQSxDQUNBLENBREssRUFBb0IsRUFBQSxFQUN6QixNQUFBLE1BQUEsRUFBQSxNQUNGLE9BQUEsSUFBQSxFQUFBLEtBQUEsQ0FDRixDQUNBLElBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLENBQ0EsSUFBQSxFQUFBLEVBQUEsTUFBQSxDQUNBLEdBQUEsT0FBQSxFQUFBLE0sSSxFLEUsUyxDLEcsTyxFLEMsRyxRLEMsQyxFLE0sQSxFLEMsRSxFLFEsQyxLQ2pDQSxDLEcsRSxLLEcsRSxLLEMsQyxJLEUsRSxLLEMsRyxDLEcsSSxFLE8sRSxHLEUsRyxJLEUsTyxFLEcsRSxFLEUsTyxBLEMsTSxNLEUsS0FVQSxDLEcsRSxNLEcsRSxNLEMsRSxFLEUsTUFFQSxDQWkrZEEsSUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLENBQUEsR0FBQSxDQW1EQSxHQUFBLElBQUEsRUFBQSxDQW5oZUEsRUFBQSxDQUFBLEUsRSxFLEUsRSxLLEMsRyxJLEUsQyxFLEMsRUFJUyxFQUFBLEVBQ0gsRUFBTSxFQUNOLEtBQ0YsQ0FDQSxFQUFTLEVBQU8sT0FBSSxBQUV0QixDQUNBLEdBQUEsQ0FDRSxFQUFBLENBTUosSUFBQSxFQUFBLEVBQUEsS0FBQSxDQUFBLEdBQUEsQ0FDUyxHQUFBLElBQUEsRUFBQSxDQUVMLEVBQ0MsQ0FBTSxFQUVYLEVBQUEsRUFDUyxFQUFBLEVBQ0gsS0FFQSxDQUNDLEdBQUEsSUFBQSxFQUFBLENBQ0gsRUFBQSxDQUFBLEVBRUcsRUFBQSxFQUdJLEVBQUEsRUFDVCxLQUNBLENBQ0YsRUFBQSxFQUFBLE9BQUEsQUFDQSxDQUNNLEdBQUEsQ0FBQSxFQUFKLE1BQUEsTUFBQSxFQUFBLEtBQ0UsQ0FDQSxDQUdBLEdBQUEsRUFBQSxTQUFJLEdBQVMsRUFBQSxNQUFBLE1BQWUsRUFBcUIsS0FDbkQsQ0FDQSxHQUFBLElBQUEsRUFBQSxHQUFBLENBQUEsTUFBQSxNQUFBLEVBQUEsTUFDRixPQUFBLEVBQUEsU0FBQSxDQUFBLE9BQUEsR0FBQSxFQUFBLEVBQUEsQ0FDQSxFLEUsRSxBQUNFLFNBQUksRUFBQSxDQUFBLEVBRU4sSUFBQSxFQUFBLEVBQUEsR0FBQSxDQUNBLEdBQUEsSUFBUyxHQUFBLEtBQUEsR0FBQSxLQUFBLEdBQUEsSUFBQSxFQUFBLE9BQThCLEVBQ3JDLElBQUEsRUFBSSxFQUFBLEtBQVksQ0FBTSxPQUFTLEdBQS9CLENBRUUsR0FBQSxRQURGLENBQ0UsQ0FERyxFQUFMLEVBQUEsRUFDYyxPQUFBLEVBQ1osRUFBQSxFQUFJLE9BQVMsQUFDYixDQUNGLE9BQUEsSUFDQSxFLEcsSSxFLEssRSxTLEEsRSxhLE8sK0IsQyxJLEcsK0IsRyxDLEcsVSxFLEcsYSxDLEcsQyxHLEcsTSxDLEEsQyxXLEUsUSxTLG9CLFkscUIsRSxrQixRLEcsRyxFLEMsTSxFLEMsQyxDLEcsUyxDLEMsQyxFLEcsQyxFLEcsTSxNLEUsTSxJLEUsQyxFLEUsRyxFLEcsRSxHLEUsRyxFLEssTyxNLEksQyxJLEUsQSxLLE0sUSxHLEEsQyxDLEUsQyxDLEssSSxFLGdCLEcsQyxDLEUsZ0IsQSxFLEssSSxFLGUsRyxDLEMsRSxlLEEsRSxLLEksRSxhLEcsQyxDLEUsYSxBLEUsSyxJLEUsa0IsRyxDLEMsRSxrQixBLEUsSyxJLEUsNEIsRyxDLEMsRSw0QixDLEMsQyxFLEcsRSxFLEMsRSxLLEssRSxFLEUsRSxFLEUsTSxDLEMsRyxDLEUsTyxDLEcsRyxJLEcsRSxFLEcsUyxDLEMsQyxDLEMsRSxHLEMsRSxHLE0sTSxFLE0sTSxFLEMsRSxFLEcsRSxHLEUsRyxFLEcsRSxLLEUsSyxPLE0sSSxDLEksRSxBLEssTSxRLEUsQyxDLEMsRSxDLEMsSyxJLEUsZ0IsRyxDLEMsRSxnQixBLEUsSyxJLEUsZSxHLEMsQyxFLGUsQSxFLEssSSxFLGEsRyxDLEMsRSxhLEEsRSxLLEksRSxrQixFLEUsQyxFLGtCLEEsRSxLLEksRSw0QixHLEMsQyxFLDRCLEEsRSxLLEksRSxTLEcsQyxDLEUsUyxBLEMsRSxDLEUsRyxFLEUsQyxFLEUsTSxFLEUsSyxFLEUsRSxFLEUsRSxFLEUsTyxFLEMsQyxLLEksRSxFLE8sQyxDLEUsRyxFLEcsRSxNLEUsUSxDLEssRyxBLEUsRSxHLEUsRSxFLE8sQyxHLEUsQyxFLEcsRSxHLEcsRyxDLEMsRyxDLEUsTyxDLEcsRyxJLEcsRSxFLEcsbUMsRSxPLEMsRSxtQyxTLEUsQyxDLEMsRSxJLEUsRSxNLEMsSSxFLEksQyxHLEUsRyxDLEksRSxFLEksRSxFLEMsQyxFLEMsRyxFLEUsRSxHLEMsQyxFLEMsRSxDLEMsRSxDLEUsRSxPLEssQyxBLEMsUyxFLEMsRSxPLEksRSxNLEMsSyxDLEMsRSxBLEMsUyxFLEMsRSxHLEksRSxNLEMsTyxLLEksRSxDLEMsRSxDLEUsRSxHLEcsRyxJLEUsQyxDLEMsRSxDLEUsSSxJLEUsRSxFLEUsTSxDLEUsSSxFLEUsRyxDLEksRSxHLEMsRSxDLEMsRSxFLEMsQyxFLEMsRSxFLEUsRSxDLEMsRSxDLEcsRSxFLEUsRyxFLEcsRSxFLEUsSSxDLEMsRSxBLEMsRUR6RUYsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFLEUsQyxDLEUsQyxDLEEsRSxDLEUsQyxDLEUsQyxFLEUsQyxDLE0sRyxFLEcsRSxFLEUsRyxDLEMsRSxDLEUsQyxDLEUsQyxFLEUsTyxLQStCQSxDLEFBQ0EsQ0FDQSxPQUFBLENBdkJBLENBQ0EsU0FBSSxFQUFBLENBQUEsQ0FBQSxDQUFBLEVBRUosSUFBQSxFQUFTLEVBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxDQUNQLE9BQUksSUFBSixFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEFBQ0EsQ0FFQSxrekJBREEsRUFBa0IsS0FBRyxFQUNyQixVQUFhLE9BQUEsYUFBYixZQUFBLE9BQUEsWUFBQSxHQUFBLENBQUEsQ0FDRSxJQUZGLEVDOEhBLEVBQ0YsRUFDQSxFQWVBLEVBQ0EsRUFDQSxFQUNBLEVBR0EsRUFTQSxFQU1FLEVBbUJJLEVBR0UsRUErQkosRUF5RUYsRUFHRixFQTVMWSxFRHZHUixFQUFBLFlBQ0EsRUFBUyxXQUVYLE9BQU8sRUFBUCxHQUFBLEVBQ0EsQ0FDQSxLQUFBLENBQ0UsSUFBQSxFQUFVLEtBQ1YsRUFBQSxFQUFBLEdBQUEsR0FDQSxFQUFBLFdBQ0EsT0FBQSxFQUFVLEdBQU0sR0FBQSxDQUNoQixDQUNGLENBQ0YsSUFBQSxFQUFBLEVBQUEsQ0FDQSxFQUFBLEVBQUEsQ0FDQSxFQUFBLEVBQ0EsRUFBQSxLLEUsRSxFLEMsRSxFLEMsRSxFLEMsRSxFLEMsRSxFLFksTyxXLFcsSyxFLFksTyxhLGEsSyxFLGEsTyxhLGEsS0NqQ0EsU0FBQSxFQUFBLENBQUEsRSxJLEksRSxFLEcsTyxHLEMsRyxPLEUsUSxDLEUsUSxHLEUsUyxFLEUsRSxHLEUsUyxD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WCxDQUNLLFNBQUEsS0FBQSxDQStLRCxTQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0UsR0FBQSxNQUFBLEVBQVksT0FBSyxFQUNqQixJQUFBLEVBQUEsRUFBQSxDQUNBLEVBQUEsRUFJTixPQS9JTSxBQTRJRSxTQTVJRixFQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0YsTSxJQUFBLEUsQUFBQSxPQUFBLEdBQ0EsY0FBQSxHQUFBLFlBQUEsQ0FBQSxJQUFBLEVBQUEsSUFBQSxFQUNGLElBQUEsRUFBQSxDQUFBLEVBQ0EsR0FBQSxPQUFJLEVBQWEsRUFBYSxDQUFLLE9BRS9CLE9BQUEsR0FDQSxJQUFBLFNBQ0EsSUFBQSxTQUNGLElBQUEsU0FDQSxFQUFZLENBQUEsRUFDZCxLQUNBLEtBQUEsU0FDSyxPQUFBLEVBQUEsUUFBQSxFQUNILEtBQUEsRUFDRSxLQUFBLEVBQ0UsRUFBQSxDQUFBLEVBQ0EsS0FDQSxNQUFBLEVBQ0EsT0FFRixFQUNFLENBRkYsRUFBQSxFQUFBLEtBQUEsQUFBQSxFQUVFLEVBQUEsUUFBQSxFQUNBLEVBQ0EsRUFDQSxFQUNGLEVBR0YsQ0FDRSxDQUNFLEdBQUEsRUFDRSxPQUNBLEVBQUEsRUFBQSxHQUNBLEVBQ0EsS0FBQSxFQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsRUFDRixHQUFBLElBQ0EsRUFBSSxHQUNGLEdBREYsR0FDRSxJQUNBLEVBQ0EsRUFBQSxPQUFBLENBQUEsRUFEQSxDQUNBLE9BQUEsR0FBQSxDQUFBLENBQ0EsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLFNBQUEsQ0FBQSxFQUNGLE9BQUEsQ0FDQSxFQUFBLENBQUEsQ0FDRixNQUFBLElBQ0EsR0FBSyxLQUFMLEEsRUFFSixJQUNNLEVBRkosQ0FHSixDLEtBQUEsRUFBQSxHQUFBLEVBQUEsQUFDWSxHQUFXLEVBQU0sR0FBQSxHQUFBLEVBQUEsR0FBQSxDQUNwQixHQUNYLENBQUEsR0FBQSxFQUFBLEdBQUEsQUFBQSxFQUFBLE9BQUEsQ0FD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LEVBQ1QsT0FBQSxHQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsRUFDQSxDQUNBLEVBQ0EsRUFBQSxTQUFBLENBQUEsRUFDQSxPQUFBLFdBQ0EsT0FBQSxFQUFBLEtBQUEsQ0FBQSxLQUFBLFVBQ0EsQ0FDQSxFQUNBLEVBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFDQSxHQUFBLE1BQUEsRUFDQSxNQUFBLEdBREEsR0FFQSxFQUZBLE1BQUEsZ0RBRUEsRUFBQSxLQUVBLElBQUEsRUFBQSxHQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsRUFDRSxFQUFBLEVBQUEsR0FBTyxDQUNULEVBQUEsS0FBQSxFQUNBLEdBQUEsTUFBQSxFQUNBLElBQUEsS0FBQSxLQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBQSxDQUNBLEtBQUEsSUFBQSxFQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQUFBQSxFQUNFLEVBQ0YsQUFBQSxHQUFBLElBQUEsQ0FBQSxFQUFBLElBQ0UsUUFBQSxHQUNGLFdBQUEsR0FDRSxhQUFBLElBQ0YsUUFBQSxHQUFBLEtBQUEsSUFBQSxFQUFBLEdBQUEsQUFBQSxHQUNFLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxBQUFBLEVBQ0YsSUFBQSxFQUFBLFVBQUEsTUFBQSxDQUFBLEVBQ0UsR0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLENBQUEsT0FDRixHQUFBLEVBQUEsRUFBQSxDQUNFLElBQUEsSUFBQSxFQUFBLE1BQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLElBQ0YsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxFQUFBLENBQ0UsRUFBQSxRQUFBLENBQUEsQ0FDSixDQUNGLE9BQUEsR0FBQSxFQUFBLElBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQSxFQUNBLEVBQ0UsRUFBbUIsU0FBSyxDQUF4QixFQWtERSxNQVZGLENBdkNBLEVBQVUsQ0FDVixTQUFJLEVBR0osY0FBWSxFQUNaLGVBQUksRUFDSixhQUFNLEVBb0JOLFNBQU8sS0FXVCxTQUFBLEtBQ0EsRUFFSSxRQUNNLENBQUEsRUFJVixFQUFBLFFBQUEsQ0FBQSxDQUNBLFNBQVMsRUFDUCxTQUFBLENBQ0UsRUFDQSxDQUNBLEVBQ0EsRUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNBLElBQUEsRUFDRSxFQUFBLENBQUEsRUFDRixFQUFBLEtBQ0EsR0FBQSxNQUFBLEVBQ0EsSUFBQSxLQUFBLEtBQUEsSUFBQSxFQUFBLEdBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQUFBQSxFQUFBLEVBQ0EsR0FBQSxJQUFBLENBQUEsRUFBQSxJQUNBLFFBQUEsR0FDQSxXQUFBLEdBQ0EsYUFBQSxJQUNBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxBQUFBLEVBQ0EsSUFBQSxFQUFBLFVBQUEsTUFBQSxDQUFBLEVBQ0EsR0FBQSxJQUFBLEVBQUEsRUFBQSxRQUFBLENBQUEsT0FDQSxHQUFBLEVBQUEsRUFBQSxDQUNBLElBQUEsSUFBSyxFQUFMLE1BQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLElBQ0EsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxFQUFBLENBQ0EsRUFBQSxRQUFBLENBQUEsQ0FDQSxDQUNBLEdBQUEsR0FBQSxFQUFBLFlBQUEsQ0FDQSxJQUFBLEtBQUEsRUFBQSxFQUFBLFlBQUEsQ0FDRSxDQURGLElBQ0UsSUFBQSxDQUFPLENBQUEsRUFBQSxFQUNULEVBQUEsQUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxBQUFBLEVBQ0EsT0FBQSxHQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFDQSxFQUNBLEVBQUEsV0FDRSxNQUFBLENBQUEsUUFBQSxJQUFBLENBQ0YsRUFDQSxFQUFBLFNBQUEsQ0FBQSxFQUNBLE1BQUEsQ0FBQSxTQUFBLEVBQUEsT0FBQSxDQUFBLENBQ0EsRUFD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LEVBQ0UsRUFDQSxFQUVBLEVBQ0EsRUFBQSxXQUNGLE9BQUEsR0FBQSxDQUFBLENBQUEsYUFBQSxFQUNFLEVBQ0osRUFBQSxvQyxBLFMsSSxHLGEsTyxnQyxZLEEsTywrQixRLEMsRyxDLCtCLFEsQyxFLEMsTSxFLEMsUSxLLEMsRSxDLEksRSxPLEMsRSxrcEJENWtCQSxFQUVFLEUsRSxFLEVDTkYsRUE2Q0EsRUFrQk0sRUErQkUsRUFlSixFQUdKLEVBR0YsRUFHRSxFQUdFLGUsUyxFLEMsRSxJLEUsNEIsRSxHLEUsVSxNLEMsQyxHLFcsbUIsUyxDLEUsRSxJLEksRSxFLEUsVSxNLEMsSSxHLFcsbUIsUyxDLEUsQyxDLE0seUIsRSxXLEUsZ0gsQyxTLEksQyxJLEUsQyxFLEMsRSxFLEUsVyxNLE0sRSxLLEUsRSxFLEUsRSxFLEUsRSxFLEUsRSxFLEUsRSxDLEUsRSxFRDNJSixZQUFBLEksRSxFLE8sRyxDLGdCQWNFLEVBQ0EsRUFBQSwrREFBQSxDQUNBLFNBQUssRUFBcUIsQ0FBQSxDQUFNLENBQUssUUFDckMsQUFBQSxTQUFhLEVBQWIsRUFBYSxDQUNYLFVBQVcsT0FBWCxFQUNBLEtBQUEsZUFBcUIsRUFDbkIsRUFBVSxTQUNkLENBQ0EsRUFDQSxFQUNFLEVBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNBLElBQUEsRUFDQSxFQUFBLFVBQUEsTUFBQSxFQUFBLEtBQUEsSUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUEsS0FDQSxHQUNBLENBQUEsR0FDRixJQUFBLEVBQUEsUUFBQSxFQUNGLElBQUEsRUFBQSxRQUFBLEVBQ0EsS0FBQSxFQUFBLFFBQUEsQ0FFQSxNQUFBLE1BQUEsRUFBQSxNLE8sQSxTLEEsQyxDLEMsQyxDLEUsSSxFLEUsVSxNLEUsSyxJLFMsQyxFLEMsUyxDLEUsQyxLLE0sQyxTLEVBRkEsSUF2QkMsTUFBQSxFQUFBLEtBQUEsR0FBQSxFQXdCRCxTQUFBLEVBQ0EsY0FBQSxFQXZCQSxlQUFBLENBQ0EsQ0FFQSxFLEUsRSxLLEUsRSxFLFMsQyxFLEksRSxFLEMsQyxFLEUsQyxDLEcsQyxHLEUsQyxDLEssRSxDLEMsRSxFLE8sRyxRLENDYkEsRUFBQSxDQUFBLENBQUEsRSxFLEMsQyxFLEUsQyxDLEMsRSxDLEUsRSxTLEMsQyxDLEUsVSxPLEksRSxFLEFBWUEsUUFKQyxFQUlELE9BQUEsQUFKQyxFQUFBLEVBQUEsV0FBQSxBQUFBLEVBcStkRCxvQkFBQSxFQW1EQSxFQW5oZUEsRyxLLEMsQyxHLEUsRSxDLEMsQyxDLEUsRSxDLEEsRSxFLFMsQyxFLFUsTyxHLEUsQyxDLEMsQyxFQUlBLEVBQ0UsRUFBVSxTQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ1YsR0FBQSxVQUFRLE9BQVUsR0FBbEIsR0FBQSxVQUFBLE9BQUEsRUFBQSxFQUFBLENBQUEsQ0FDRSxJQUFBLEVBQUEsRUFBTyxFQUFBLENBQ1AsRUFBYSxFQUF1QixFQUFFLEVBQ3BDLFdBQU8sRUFDWCxFQUNBLFVBQ0UsT0FBQSxFQUFBLFNBRUEsQ0FBQSxFQUFBLFNBSEYsQ0FBQSxLQUFBLEVBT0YsRUFDQSxVQUFTLE9BQUEsRUFBQSxhQUFpQixDQUV0QixFQUFDLGFBQ1csQ0FFaEIsS0FBQSxFQUNBLFVBQVMsRUFDSCxFQUFPLENBQUEsQ0FBQSxDQUFBLENBRVAsRUFDQyxVQUFBLE9BQUEsRUFBQSxVQUFBLENBQUEsRUFBQSxVQUFBLENBQUEsS0FBQSxFQUNILENBRUcsWUFDQyxFQUVHLFVBQUEsRUFDVCxjQUFBLENBQ0EsR0FFRixXQUFTLEdBQ0gsRUFBTyxDQUFBLENBQUEsQ0FBTSxDQUFBLEVBQWpCLENBQ0UsWUFBSSxFQUNKLFVBQVMsRUFHVCxjQUFhLEVBQ2YsTUFBQSxVQUFBLE9BQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsS0FBQSxDQUNBLEVBQ0YsQ0FDQSxFQUNFLEVBQUksU0FBQSxDQUFBLENBQUEsQ0FBQSxFQUVOLEdBQUEsVUFBQSxPQUFBLEVBQ0EsR0FBQSxVQUFTLE9BQUEsR0FBQSxPQUFBLEdBQ1AsR0FBSSxHQUFKLEdBQUksRUFBa0IsRUFBQSxFQUFBLFdBQXRCLEVBQUEsRUFBQSxDQUFBLENBQ0ksSUFBQyxFQUFMLEVBQ0UsRUFBQSxFQUFZLENBQ1osRUFBSSxXQUFTLEVBRWYsRUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FDSyxZQUFlLEVBQ2xCLFVBQ0ksVUFBUyxPQUFiLEVBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxDQUFBLEtBQUEsRUFDQSxNQUFJLFVBQWtCLE9BQUEsRUFBdEIsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEtBQUEsQ0FDQSxHQUNFLE1BQ0EsTUFBSSxHQUFKLEVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNFLEVBQ0EsRUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0YsR0FDQSxVQUFBLE9BQUEsR0FDRixVQUFBLE9BQUEsR0FDQSxPQUFJLEdBQ0YsVUFBSyxPQUFBLEVBQVUsRUFBUSxDQUNyQixDQUNBLElBQUEsRUFBQSxFQUFJLEVBQUEsQ0FDSixFQUFBLEVBQUEsRUFBQSxFQUFBLFdBQUEsRUFDRixFQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxFQUFBLENBQ0EsWUFBTSxFQUNSLFVBQ0EsVUFBWSxPQUFPLEVBQVMsU0FBSSxDQUFXLEVBQTNDLFNBQUEsQ0FBQSxLQUFBLEVBQ0ssTUFBQSxVQUFBLE9BQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsS0FBQSxFQUNILEtBQUEsVUFBUyxPQUFBLEVBQW1CLElBQUEsQ0FBQSxFQUFVLElBQVEsQ0FBSyxLQUFFLEVBQ25ELGNBQ0UsVUFBQSxPQUFBLEVBQWdCLGFBQWhCLENBQ0EsRUFBQSxhQUFBLENBQ0EsS0FBQSxFQUNBLGVBQ0YsVUFBQSxPQUFBLEVBQUEsY0FBQSxDQUNBLEVBQUksY0FBWSxDQUNkLEtBQUEsRUFDQSxZQUNBLFVBQUEsT0FBQSxFQUFBLFdBQUEsQ0FBQSxFQUFBLFdBQUEsQ0FBQSxLQUFBLEVBQ0EsV0FDRixVQUFBLE9BQUEsRUFBQSxVQUFBLENBQUEsRUFBQSxVQUFBLENBQUEsS0FBQSxFQUNBLE1BQUEsVUFBVSxPQUFBLEVBQWUsS0FBekIsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxLQUFBLENBQ0YsRUFDQSxDQUNFLEVBQ0UsRUFBSSxTQUFBLENBQVksQ0FBaEIsQ0FBQSxFQUNFLEdBQUEsVUFBQSxPQUFBLEVBQ0EsR0FBQSxFQUFBLENBQ0EsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxXQUFBLEVBQ0EsRUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FDRixHQUNBLFVBQUEsT0FBSSxFQUFZLEVBQWhCLEVBQUEsV0FBQSxFQUFBLEVBQUEsQ0FDRSxFQUFBLEVBQUEsQ0FDQSxLQUFBLEVBQ0EsWUFBQSxFQUNBLFVBQ0YsVUFBQSxPQUFBLEVBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxDQUFBLEtBQUEsQ0FDQSxFQUNGLE1BQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsRUFDRixFQUFBLFNBQUEsQ0FBQSxFQUNGLEVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUNBLEVBQ0YsRUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsT0FBSSxFQUFBLEVBQ0osRUFDRixFQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQ0EsT0FBUyxFQUFBLENBQUEsQ0FBQSxZQUFBLENBQUEsRUFBQSxFQUFULEVBQ0UsRUFDQSxFQUFpQixXQUNqQixPQUFLLEVBQW1CLENBQUEsQ0FBQSx1QkFBeEIsRUFDRSxFQUNBLEVBQUksb0IsRSxFLG1CLEEsSyxJLEksRyxhLE8sZ0MsWSxBLE8sK0IsUSxDLEcsQywrQixRLEMsRSxDLE0sRSxDLFEsSyxDLEUsQyxJLEUsRSx3QixFLFMsSSxNLEMsRSxFLEcsRSxTLEMsUSxFLEcsNkIsb0IsWSxJLEUsRyxlLEksUSxHLEMsdUIsRyxDLEksRSxNLFUsUyxDLFEsRyxHLEksRyxvQyxLLEksQyxBLEUsSSxDLEssRSxFLFEsRyxDLHlDLEcsTyxPLEMsVyxDLEMsSyxnQixJLEMsRyxDLE0sRSxDLFEsSSxDLDBCLEUsQyxrQixlLEksTyxJLFEsQSxJLE8sTyxDLFcsQyxDLEssMkIsRSxBLEksRSxHLEssSyxFLEUsQyxlLEksSSxFLE0sQyxHLEcsUSxHLEMsZSxHLEMsRSxDLE0sSyxJLEUsQyxRLEUsRSxDLEMsTyxRLEcsQyxPLEcsSSxRLEEsSSxPLE8sQyxLLEMsRyxDLEMsRSxDLEEsSSxFLEMsQyxFLEUsSyxFLEUsQyxNLEUscUIsTyxFLE0sYyxDLE8sSSxRLEEsSSxPLE8sQyxLLEMsRyxDLEMsUSxDLEEsSSxFLEUsSyxFLEssRSxFLEMsTSxjLEMsTyxJLFEsQSxJLE8sTyxDLEssQyxHLEMsQyxZLEMsQSxJLEUsRSxTLEUsSyxFLEUsQyxNLGEsQyxDLEMsRyxDLEksRSxNLEksQywwQixHLEUsTSxNLEUsK0IsQyxPLE8sUSxDLGUsbUIsYyxDLE8sRSxFLEssQyxDLEEsRSxLLEssUyxDLEMsUSxDLEEsSyxDLEUsbUIsQyxVLEUsUyxBLENEM0lSLEUsRyxHLEMsRSxFLEMsTSxBLE0sQyxlLEUsRSxNLEMsQyxFLEksRSxNLEUsSSxHQWdDQSxPQXhCQyxRQUFBLEdBQUEsQ0FBQSxnQ0FBQSxHQXdCRCxDQUNBLENBQUEsTUFBQSxFQUFBLENBdEJJLE9BREosUUFBQSxLQUFBLENBQUEsb0NBQUEsR0FDSSxJQUVKLENBR0UsQ0FLQSxNQUFPLDRCQUFQLENBRUEsSUFBQSxFQUFBLE1BQUEsSUFBQSxDQUFBLFlBQUEsR0FDRSxFQUFBLE1BQUEsSUFBQSxDQUFBLFlBQUEsR0FFQSxHQUFBLENBQUssR0FBTCxDQUFBLEVBQ0EsTUFBVSxBQUFBLE1BQU0sb0NBR3BCLE1BQUEsT0FDQSxZQUNBLENBQ0EsQyxDLE0sa0IsQyxDLEMsQyxDLEcsQ0NqQ0EsSUFBQSxFQUFBLE1BQUEsSUFBQSxDQUFBLDBCQUFBLEcsRSxNLE0sRSxrQyxDLE8sTyxRLEMsZSxtQixjLEMsTyxFLEUsSyxDLEMsQSxFQVFDLEtBQUEsS0FBQSxTQUFBLENBQUEsQyxRLGNBSUQsTUFpK2RBLENBbURBLEVBbmhlQSxtQkFBQSxDLFUsRSxTLEEsQyxFLEcsRyxDLEUsRSxDQUlTLE1BQUEsQUFBQSxNQUFBLENBQUEsZUFBQSxFQUFBLEVBQVQsTUFBQSxDQUFBLENBQUEsRUFHSSxJQUFPLEVBQUEsTUFBYSxFQUFBLElBQUEsR0FHdEIsT0FGTyxRQUFRLEdBQUcsQ0FBQSxtQ0FDUCxHQUNYLENBQ0EsQ0FBQSxNQUNFLEVBQUEsQ0FPSyxPQURULFFBQUEsS0FBQSxDQUFBLG9DQUFBLEdBQ1MsSUFDUCxDQUlGLENBSUUsTUFBSSxnQkFBaUIsQ0FBc0IsQ0FBTyxDQUM3QyxHQUFBLENBR0EsSUFBQSxFQUNDLE1BQU8sSUFBSyxDQUFBLDBCQUFrQixHQUdwQyxFQUFBLE1BQUEsTUFBQSxFQUFBLDJCQUFBLENBQ08sT0FBVyxPQUNwQixRQUFBLENBQ1MsZUFBQSxtQkFDSSxjQUFYLENBQUEsT0FBQSxFQUFBLEVBQUEsS0FBQSxDQUFBLENBQUEsQUFDTSxFQUNKLEtBQVMsS0FBQSxTQUNMLENBQUEsQ0FFQSxRQUFTLEVBRWYsbUJBQUEsQ0FDRixVQUFBLEVBQUEsU0FBQSxBQUNTLENBQ0gsRUFFTixHQUVNLEdBQUEsQ0FBQSxFQUFrQixFQUFBLENBQ2pCLE1BQUwsQUFBQSxNQUFBLENBQUEsZUFBQSxFQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsRUFHRSxJQUFPLEVBQUEsTUFBYyxFQUFRLElBQU8sR0FFN0IsT0FEVCxRQUFBLEdBQUEsQ0FBQSxrQ0FBQSxHQUNhLENBQ1gsQ0FBQSxNQUFJLEVBQVksQ0FFWixPQURBLFFBQUEsS0FBUyxDQUFBLDRDQUFiLEdBQ0ksSUFDSixDQUNFLENBRUUsTUFBQSxvQkFBQSxDQUFBLENBQUEsQ0FDQSxHQUFBLENBRUYsSUFBQSxFQUFBLE1BQUEsSUFBQSxDQUFBLDBCQUFBLEdBRUUsRUFBYSxNQUFLLE1BQVEsRUFBOUIsZ0NBQUEsQ0FDTyxPQUFBLE9BQ0gsUUFBSSxDQUNBLGVBQWUsbUJBQ25CLGNBQWtCLENBQUEsT0FBbEIsRUFBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBLEFBQ0YsRUFDQSxLQUFNLEtBQU0sU0FBQSxDQUFBLENBQ2QsUUFBQSxFQUVLLG1CQUFBLENBQ00sVUFBZSxFQUFJLFNBQVUsQUFDaEMsQ0FDRixFQUNBLEdBRUEsR0FBQSxDQUFBLEVBQUEsRUFBQSxDQUNGLE1BQUEsQUFBQSxNQUFBLENBQUEsZUFBQSxFQUFBLEVBQUEsTUFBQSxDQUFBLENBQUEsRUFHRSxJQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsR0FFQSxPQURBLFFBQUEsR0FBQSxDQUFJLCtCQUFKLEdBQ0EsQ0FDRixDQUFBLE1BQUEsRUFBQSxDQUVGLE9BREUsUUFBQSxLQUFBLENBQVUseUNBQVYsR0FDRixJQUNBLENBQ0UsQ0FHSSxDLEksb0UsRyxJLHNDLEcsTSxFLEksQyxDLEUsQyxVLEMsRSxJLEUsQyxVLEUsSSxLLEMsVyxFLFMsQyxDLFMsQyxZLEMsQyxPLEMsTyxNLEUsWSxDLEcsVyxFLGEsQSxFLEUsbUIsQyxHLFEsRyxDLDhCLEUsTyxDLEUsSSxFLEMsVSxFLFMsQyxXLEUsUyxDLEMsTSxDLFksQyxDLE8sQyxVLEcsRSxZLEMsRyxXLEUsYSxBLEUsRSxtQixDLEcsUSxHLEMsMkIsRSxPLEMsRSxJLEUsQyxVLEUsUyxDLFcsRSxTLEMsQyxNLEMsWSxDLEMsTyxDLFUsRyxFLFksQyxHLFcsRSxhLEEsRSxFLG1CLEMsR0RsSFosUUFBQSxHQUFBLENBQUEsMEIsUSxHLEMsNEIsRSxhLEMsQyxFQVdJLEVBQUEsQ0FJRixVQUFLLENBQW1CLEVBQ3hCLFFBQVcsR0FBQSxDQUFBLDRCQUNYLEVBRUUsT0FBQSxDQUFxQixFQUV2QixRQUFPLEdBQUEsQ0FBQSx3QkFDUCxFQUVFLE9BQUEsQ0FBQSxFQUNBLFFBQUEsR0FBQSxDQUFBLHdCQUNBLENBQ0EsRSxJLDhFLEcsZSxFLEMsQyxDLEUsSSxFLEksWSxFLE0sTyxNLEMsUyxDLE0sRSxNLEMsRyxDLEssTyxLLFMsRyxFLEMsTyxFLE0sSSxJLFcsQSxNLE8sTSxDLEksQyxPLEUsRSxNLEMsSyxDLEcsQyxHLEUsUSxDLEksUSxDLEUsTSxJLEMsRyxDLGUsRSxDLEUsSSxFLE8sVSxHLEMsQyxNLEMsQyxZLFcsQyxFLEksQyxDLE8sRSxHLEksQyxDLE0sTyxDLEssQyxDLEUsQyx3QixDLEEsRSxLLFEsRyxDLDhDLEUsRyxJLEMsQyxhLEUsQSxPLE8sQyxLLEMsRyxBLEMscUIsQyxBLEUsSyxRLEcsQywwQyxFLEUsQyxlLEUsQyxTLEEsSSxDLEMsZ0IsQyxDLEcsUSxBLEksTSxDLE8sQyxLLEMsRyxDLEMseUIsQyxBLEksRSxFLHNCLEUsSyxFLEcsSSxDLEMsYSxDLEMsRyxRLEEsSSxPLEUsSyxDLEssQyxHLEMsQyxzQixDLEEsSSxFLEUsbUIsRSxLLEUsRyxFLEMsUyxJLEcsQyxFLEUsQyxDLEUsRSxRLEEsRSxJLEMsRSxFLEMsQyxFLEUsUSxBLEUsSSxlLEksRyxDLEksRSxNLEMsQyxDLEMsZ0IsQyxPLFUsRyxFLEksQyxTLEMsRyxDLEMsTSxDLEEsQyxVLEUsYSxFLEksVSxDLEcsRyxHLFcsSSxFLEksSyxDLE0sRSxDLFEsSyxDLG9CLEUsQyxPLEMsQyxFLEEsRSxTLEEsRSxLLFEsRyxDLGdDLEMsRyxJLEMsQSxJLEcsRSxFLEUsRSxFLEUsRyxDLEUsRSxDLEcsQyxDLEUsUSxDLFdBM0JKLENBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxXQUFBLEMsRyxjLFEsQyxDLEUsTSxFLFUsbUMsQyxFLEUsRyxFLFMsQyxHLFdBUUMsUUFBQSxFQXdCRCxTQUFBLENBQUEsR0FBQSxFQUNBLFVBQUEsK0VBdEJJLEVBQUEsVUFBQSxvQixJQUtGLGtCLDZMLEcsSSxDLEMsTSxFLEMsYSxDLEUsRSxXLEMsQSxFLEMsRSxTLEUsQyxTLEMsQyxpQixDLEMsRSxHLEMsRSxFLEMsQyxFLEUsUSxBLEUsSSxDLEUsRSxDLEMsRSxFLFEsQSxHLEcsRSxVLEMsQyxDLEMsYSxFLEksRSxNLEMsQyxDLEMsTSxFLEssRSxHLEMsQyxZLEMsRyxDLEUsSyxHLEMsVyxPLEMsRSxJLEcsTyxHLEcsSSxJLEcsQyxhLE0sSSxFLE0sSSxDLEcsWSxDLEcsSSxFLE8sRSxFLEMsQyxFLFUsRSxHLEcsSSxDLEMsQyxVLEUsQSxFLFcsRSxjLEUsTyxBLEUsQyxDLFMsQyxFQWhCRixFLE0sQyxFLEUsSSxFLEUsTSxFLEMsVyxDLEUsRSxHLEUsVyxDLEcsWSxZLDBCLE0sRUFnQ0EsU0FBQSxBQUFBLEdBQUEsRUFBQSxFQUFBLE1BQUEsQ0FBQSxLQUFBLElBdEJBLENBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxTQUFBLENBQUEsUUFBQSxFQUNJLFNBQUEsQ0FBQSxFQUFBLElBQUEsSUFBcUIsV0FFaEIsRUFBQSxnQkFBYyxvQkFJckIsa0IsUyxFLEMsYyxDLEMsRSxHLEMsRSxFLEMsQyxFLEUsUSxBLEcsRyxDLEUsRSxDLEMsRSxFLFEsQSxFLEcsQyxFLEUsUyxBLEUsSyxFLEUsRSxDLEUsRSxJLEUsVSxHLEMsTSxVLFMsQyxTLEMsRyxHLEcsVyxJLEUsSSxNLEksRSxNLEMsQyxDLEMsYSxFLEMsQyxNLEMsQSxDLFUsRSxBLEUsVyxFLEksVSxDLEUsQyxNLEUsQyxRLEssQyxvQixFLEMsUyxBLEUsQyxDLEMsRSxJLEEsRSxFLFEsQyxXLEMsRSxFLEcsRSxXLEMsRyxhLFEsQyxDLEVBakJGLE1BQUEsRSxZLHFDLFUsbUQsQyxFLEUsRyxFLFMsQyxRLEUsVSxrRCxTLEMsRyxXQWdDQSxFQUFBLFVBQUEsWSxJQWxCRSxDLE0sRSxTLGMsQyxPLEEsQyxFLEUsVSxBLEUsRyxNLEMsQyxFLEUsRyxFLEEsQyxHLEssRSxHLEMsRSxFLEMsQyxFLEUsUSxBLEUsQyxDLE8sQyxDLEMsRSxFLEMsQyxFLEUsUSxBLEUsSSxLLEMsQyxFLEUsSSxFLE0sVyxDLEUsRSxJLEUsVSxXLEMsRSxFLEcsRSxLLFUsc0IsQyxFLEUsRyxFLEMsQyxDLEcsQyxFLEUsRyxFLEMsQyxDLE0sQyxFLEUsSSxFLEssSyxXLEEsQyxFLEUsRyxFLEssVSxtQixDLEUsRSxHLEUsQyxDLEMsUyxFLGlCLEksSSxDLEMsQSxZLEUsQyxFLEUsRyxFLEMsQyxDLFksRSxTLEUsQyxZIiwic291cmNlcyI6WyJub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20tY2xpZW50LnByb2R1Y3Rpb24uanMiLCJub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMiLCJub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24uanMiLCJzcmMvcHVibGljL3BvcHVwLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwibm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJzcmMvcHVibGljL0FwcC50c3giLCJzcmMvcHVibGljL2NvbXBvbmVudHMvY29tbWVudF9zZWN0aW9uL1Byb2Nlc3NDbGlwYm9hcmQudHN4Iiwic3JjL3B1YmxpYy9jb21wb25lbnRzL2NvbW1lbnRfc2VjdGlvbi9EaXNwbGF5Q29tbWVudC50c3giLCJzcmMvcHVibGljL2NvbXBvbmVudHMvY29tbWVudF9zZWN0aW9uL2FjdGlvbnMvZ2V0R2VuZXJhdGVkQ29tbWVudC50cyIsInNyYy9zZXJ2aWNlcy9UYWJVdGlscy50cyIsInNyYy90cmFjaW5nL1VzZXJKb3VybmV5U3RlcFV0aWxzLnRzIiwic3JjL3NlcnZpY2VzL0RhdGFFeGNoYW5nZVNlcnZpY2UudHMiLCJzcmMvdHJhY2luZy90eXBlcy9Vc2VySm91cm5leVN0ZXAudHMiLCJzcmMvYWN0aW9ucy9jb250ZW50L2dlbmVyYXRlVXNlckpvdXJuZXlJZC50cyIsInNyYy9hY3Rpb25zL3R5cGVzL0pvdXJuZXlUeXBlLnRzIiwic3JjL2JhY2tncm91bmQvZ2VuZXJhdGVUb2tlbk9uSW5zdGFsbC50cyIsInNyYy9wdWJsaWMvY29tcG9uZW50cy9wb3N0X3NlY3Rpb24vR2VuZXJhdGVQb3N0LnRzeCIsInNyYy9wdWJsaWMvdHlwZXMvQWN0aW9uLnRzIiwic3JjL3RyYWNpbmcvVXNlckpvdXJuZXlVdGlscy50cyIsInNyYy90cmFjaW5nL3R5cGVzL1VzZXJKb3VybmV5LnRzIiwic3JjL3B1YmxpYy9jb21wb25lbnRzL3Bvc3Rfc2VjdGlvbi9EaXNwbGF5R2VuZXJhdGVkUG9zdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpO1xuZnVuY3Rpb24ganN4UHJvZCh0eXBlLCBjb25maWcsIG1heWJlS2V5KSB7XG4gIHZhciBrZXkgPSBudWxsO1xuICB2b2lkIDAgIT09IG1heWJlS2V5ICYmIChrZXkgPSBcIlwiICsgbWF5YmVLZXkpO1xuICB2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KTtcbiAgaWYgKFwia2V5XCIgaW4gY29uZmlnKSB7XG4gICAgbWF5YmVLZXkgPSB7fTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBjb25maWcpXG4gICAgICBcImtleVwiICE9PSBwcm9wTmFtZSAmJiAobWF5YmVLZXlbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIH0gZWxzZSBtYXliZUtleSA9IGNvbmZpZztcbiAgY29uZmlnID0gbWF5YmVLZXkucmVmO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHZvaWQgMCAhPT0gY29uZmlnID8gY29uZmlnIDogbnVsbCxcbiAgICBwcm9wczogbWF5YmVLZXlcbiAgfTtcbn1cbmV4cG9ydHMuRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuZXhwb3J0cy5qc3ggPSBqc3hQcm9kO1xuZXhwb3J0cy5qc3hzID0ganN4UHJvZDtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBTY2hlZHVsZXIgPSByZXF1aXJlKFwic2NoZWR1bGVyXCIpLFxuICBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKSxcbiAgUmVhY3RET00gPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHZhciB1cmwgPSBcImh0dHBzOi8vcmVhY3QuZGV2L2Vycm9ycy9cIiArIGNvZGU7XG4gIGlmICgxIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHVybCArPSBcIj9hcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzWzFdKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIHVybCArPSBcIiZhcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiICtcbiAgICBjb2RlICtcbiAgICBcIjsgdmlzaXQgXCIgK1xuICAgIHVybCArXG4gICAgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiXG4gICk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkQ29udGFpbmVyKG5vZGUpIHtcbiAgcmV0dXJuICEoXG4gICAgIW5vZGUgfHxcbiAgICAoMSAhPT0gbm9kZS5ub2RlVHlwZSAmJiA5ICE9PSBub2RlLm5vZGVUeXBlICYmIDExICE9PSBub2RlLm5vZGVUeXBlKVxuICApO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikge1xuICB2YXIgbm9kZSA9IGZpYmVyLFxuICAgIG5lYXJlc3RNb3VudGVkID0gZmliZXI7XG4gIGlmIChmaWJlci5hbHRlcm5hdGUpIGZvciAoOyBub2RlLnJldHVybjsgKSBub2RlID0gbm9kZS5yZXR1cm47XG4gIGVsc2Uge1xuICAgIGZpYmVyID0gbm9kZTtcbiAgICBkb1xuICAgICAgKG5vZGUgPSBmaWJlciksXG4gICAgICAgIDAgIT09IChub2RlLmZsYWdzICYgNDA5OCkgJiYgKG5lYXJlc3RNb3VudGVkID0gbm9kZS5yZXR1cm4pLFxuICAgICAgICAoZmliZXIgPSBub2RlLnJldHVybik7XG4gICAgd2hpbGUgKGZpYmVyKTtcbiAgfVxuICByZXR1cm4gMyA9PT0gbm9kZS50YWcgPyBuZWFyZXN0TW91bnRlZCA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5zZUluc3RhbmNlRnJvbUZpYmVyKGZpYmVyKSB7XG4gIGlmICgxMyA9PT0gZmliZXIudGFnKSB7XG4gICAgdmFyIHN1c3BlbnNlU3RhdGUgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICAgIG51bGwgPT09IHN1c3BlbnNlU3RhdGUgJiZcbiAgICAgICgoZmliZXIgPSBmaWJlci5hbHRlcm5hdGUpLFxuICAgICAgbnVsbCAhPT0gZmliZXIgJiYgKHN1c3BlbnNlU3RhdGUgPSBmaWJlci5tZW1vaXplZFN0YXRlKSk7XG4gICAgaWYgKG51bGwgIT09IHN1c3BlbnNlU3RhdGUpIHJldHVybiBzdXNwZW5zZVN0YXRlLmRlaHlkcmF0ZWQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhc3NlcnRJc01vdW50ZWQoZmliZXIpIHtcbiAgaWYgKGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpICE9PSBmaWJlcilcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xufVxuZnVuY3Rpb24gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgaWYgKCFhbHRlcm5hdGUpIHtcbiAgICBhbHRlcm5hdGUgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKTtcbiAgICBpZiAobnVsbCA9PT0gYWx0ZXJuYXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICAgIHJldHVybiBhbHRlcm5hdGUgIT09IGZpYmVyID8gbnVsbCA6IGZpYmVyO1xuICB9XG4gIGZvciAodmFyIGEgPSBmaWJlciwgYiA9IGFsdGVybmF0ZTsgOyApIHtcbiAgICB2YXIgcGFyZW50QSA9IGEucmV0dXJuO1xuICAgIGlmIChudWxsID09PSBwYXJlbnRBKSBicmVhaztcbiAgICB2YXIgcGFyZW50QiA9IHBhcmVudEEuYWx0ZXJuYXRlO1xuICAgIGlmIChudWxsID09PSBwYXJlbnRCKSB7XG4gICAgICBiID0gcGFyZW50QS5yZXR1cm47XG4gICAgICBpZiAobnVsbCAhPT0gYikge1xuICAgICAgICBhID0gYjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHBhcmVudEEuY2hpbGQgPT09IHBhcmVudEIuY2hpbGQpIHtcbiAgICAgIGZvciAocGFyZW50QiA9IHBhcmVudEEuY2hpbGQ7IHBhcmVudEI7ICkge1xuICAgICAgICBpZiAocGFyZW50QiA9PT0gYSkgcmV0dXJuIGFzc2VydElzTW91bnRlZChwYXJlbnRBKSwgZmliZXI7XG4gICAgICAgIGlmIChwYXJlbnRCID09PSBiKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBhbHRlcm5hdGU7XG4gICAgICAgIHBhcmVudEIgPSBwYXJlbnRCLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICAgIH1cbiAgICBpZiAoYS5yZXR1cm4gIT09IGIucmV0dXJuKSAoYSA9IHBhcmVudEEpLCAoYiA9IHBhcmVudEIpO1xuICAgIGVsc2Uge1xuICAgICAgZm9yICh2YXIgZGlkRmluZENoaWxkID0gITEsIGNoaWxkJDAgPSBwYXJlbnRBLmNoaWxkOyBjaGlsZCQwOyApIHtcbiAgICAgICAgaWYgKGNoaWxkJDAgPT09IGEpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQkMCA9PT0gYikge1xuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgIGIgPSBwYXJlbnRBO1xuICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkJDAgPSBjaGlsZCQwLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICBpZiAoIWRpZEZpbmRDaGlsZCkge1xuICAgICAgICBmb3IgKGNoaWxkJDAgPSBwYXJlbnRCLmNoaWxkOyBjaGlsZCQwOyApIHtcbiAgICAgICAgICBpZiAoY2hpbGQkMCA9PT0gYSkge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICAgIGIgPSBwYXJlbnRBO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGlsZCQwID09PSBiKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQkMCA9IGNoaWxkJDAuc2libGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRpZEZpbmRDaGlsZCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGEuYWx0ZXJuYXRlICE9PSBiKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE5MCkpO1xuICB9XG4gIGlmICgzICE9PSBhLnRhZykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgcmV0dXJuIGEuc3RhdGVOb2RlLmN1cnJlbnQgPT09IGEgPyBmaWJlciA6IGFsdGVybmF0ZTtcbn1cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChub2RlKSB7XG4gIHZhciB0YWcgPSBub2RlLnRhZztcbiAgaWYgKDUgPT09IHRhZyB8fCAyNiA9PT0gdGFnIHx8IDI3ID09PSB0YWcgfHwgNiA9PT0gdGFnKSByZXR1cm4gbm9kZTtcbiAgZm9yIChub2RlID0gbm9kZS5jaGlsZDsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgdGFnID0gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKG5vZGUpO1xuICAgIGlmIChudWxsICE9PSB0YWcpIHJldHVybiB0YWc7XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduLFxuICBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksXG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtcbnZhciBSRUFDVF9BQ1RJVklUWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmFjdGl2aXR5XCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7XG5TeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7XG52YXIgUkVBQ1RfTUVNT19DQUNIRV9TRU5USU5FTCA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnZpZXdfdHJhbnNpdGlvblwiKTtcbnZhciBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG51bGwgPT09IG1heWJlSXRlcmFibGUgfHwgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG1heWJlSXRlcmFibGUpIHJldHVybiBudWxsO1xuICBtYXliZUl0ZXJhYmxlID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW1wiQEBpdGVyYXRvclwiXTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlSXRlcmFibGUgPyBtYXliZUl0ZXJhYmxlIDogbnVsbDtcbn1cbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFID0gU3ltYm9sLmZvcihcInJlYWN0LmNsaWVudC5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSkge1xuICBpZiAobnVsbCA9PSB0eXBlKSByZXR1cm4gbnVsbDtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgcmV0dXJuIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0VcbiAgICAgID8gbnVsbFxuICAgICAgOiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHR5cGUpIHJldHVybiB0eXBlO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gXCJGcmFnbWVudFwiO1xuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiBcIlByb2ZpbGVyXCI7XG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3RyaWN0TW9kZVwiO1xuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdXNwZW5zZUxpc3RcIjtcbiAgICBjYXNlIFJFQUNUX0FDVElWSVRZX1RZUEU6XG4gICAgICByZXR1cm4gXCJBY3Rpdml0eVwiO1xuICB9XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSlcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgIHJldHVybiBcIlBvcnRhbFwiO1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHJldHVybiAodHlwZS5kaXNwbGF5TmFtZSB8fCBcIkNvbnRleHRcIikgKyBcIi5Qcm92aWRlclwiO1xuICAgICAgY2FzZSBSRUFDVF9DT05TVU1FUl9UWVBFOlxuICAgICAgICByZXR1cm4gKHR5cGUuX2NvbnRleHQuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuQ29uc3VtZXJcIjtcbiAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgdmFyIGlubmVyVHlwZSA9IHR5cGUucmVuZGVyO1xuICAgICAgICB0eXBlID0gdHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgdHlwZSB8fFxuICAgICAgICAgICgodHlwZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCBcIlwiKSxcbiAgICAgICAgICAodHlwZSA9IFwiXCIgIT09IHR5cGUgPyBcIkZvcndhcmRSZWYoXCIgKyB0eXBlICsgXCIpXCIgOiBcIkZvcndhcmRSZWZcIikpO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChpbm5lclR5cGUgPSB0eXBlLmRpc3BsYXlOYW1lIHx8IG51bGwpLFxuICAgICAgICAgIG51bGwgIT09IGlubmVyVHlwZVxuICAgICAgICAgICAgPyBpbm5lclR5cGVcbiAgICAgICAgICAgIDogZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgXCJNZW1vXCJcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICBpbm5lclR5cGUgPSB0eXBlLl9wYXlsb2FkO1xuICAgICAgICB0eXBlID0gdHlwZS5faW5pdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUoaW5uZXJUeXBlKSk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHt9XG4gICAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXksXG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUsXG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzID1cbiAgICBSZWFjdERPTS5fX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUsXG4gIHNoYXJlZE5vdFBlbmRpbmdPYmplY3QgPSB7XG4gICAgcGVuZGluZzogITEsXG4gICAgZGF0YTogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgYWN0aW9uOiBudWxsXG4gIH0sXG4gIHZhbHVlU3RhY2sgPSBbXSxcbiAgaW5kZXggPSAtMTtcbmZ1bmN0aW9uIGNyZWF0ZUN1cnNvcihkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIHsgY3VycmVudDogZGVmYXVsdFZhbHVlIH07XG59XG5mdW5jdGlvbiBwb3AoY3Vyc29yKSB7XG4gIDAgPiBpbmRleCB8fFxuICAgICgoY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZVN0YWNrW2luZGV4XSksICh2YWx1ZVN0YWNrW2luZGV4XSA9IG51bGwpLCBpbmRleC0tKTtcbn1cbmZ1bmN0aW9uIHB1c2goY3Vyc29yLCB2YWx1ZSkge1xuICBpbmRleCsrO1xuICB2YWx1ZVN0YWNrW2luZGV4XSA9IGN1cnNvci5jdXJyZW50O1xuICBjdXJzb3IuY3VycmVudCA9IHZhbHVlO1xufVxudmFyIGNvbnRleHRTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpO1xuZnVuY3Rpb24gcHVzaEhvc3RDb250YWluZXIoZmliZXIsIG5leHRSb290SW5zdGFuY2UpIHtcbiAgcHVzaChyb290SW5zdGFuY2VTdGFja0N1cnNvciwgbmV4dFJvb3RJbnN0YW5jZSk7XG4gIHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG51bGwpO1xuICBzd2l0Y2ggKG5leHRSb290SW5zdGFuY2Uubm9kZVR5cGUpIHtcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxMTpcbiAgICAgIGZpYmVyID0gKGZpYmVyID0gbmV4dFJvb3RJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQpXG4gICAgICAgID8gKGZpYmVyID0gZmliZXIubmFtZXNwYWNlVVJJKVxuICAgICAgICAgID8gZ2V0T3duSG9zdENvbnRleHQoZmliZXIpXG4gICAgICAgICAgOiAwXG4gICAgICAgIDogMDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICgoZmliZXIgPSBuZXh0Um9vdEluc3RhbmNlLnRhZ05hbWUpLFxuICAgICAgICAobmV4dFJvb3RJbnN0YW5jZSA9IG5leHRSb290SW5zdGFuY2UubmFtZXNwYWNlVVJJKSlcbiAgICAgIClcbiAgICAgICAgKG5leHRSb290SW5zdGFuY2UgPSBnZXRPd25Ib3N0Q29udGV4dChuZXh0Um9vdEluc3RhbmNlKSksXG4gICAgICAgICAgKGZpYmVyID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QobmV4dFJvb3RJbnN0YW5jZSwgZmliZXIpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc3dpdGNoIChmaWJlcikge1xuICAgICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgICAgIGZpYmVyID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICBmaWJlciA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZmliZXIgPSAwO1xuICAgICAgICB9XG4gIH1cbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBmaWJlcik7XG59XG5mdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKCkge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yKTtcbiAgcG9wKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yKTtcbn1cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGV4dChmaWJlcikge1xuICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmIHB1c2goaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciwgZmliZXIpO1xuICB2YXIgY29udGV4dCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoY29udGV4dCwgZmliZXIudHlwZSk7XG4gIGNvbnRleHQgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciksXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiZcbiAgICAocG9wKGNvbnRleHRTdGFja0N1cnNvciksIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcikpO1xuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yKSxcbiAgICAoSG9zdFRyYW5zaXRpb25Db250ZXh0Ll9jdXJyZW50VmFsdWUgPSBzaGFyZWROb3RQZW5kaW5nT2JqZWN0KSk7XG59XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICBzY2hlZHVsZUNhbGxiYWNrJDMgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgY2FuY2VsQ2FsbGJhY2skMSA9IFNjaGVkdWxlci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxcbiAgc2hvdWxkWWllbGQgPSBTY2hlZHVsZXIudW5zdGFibGVfc2hvdWxkWWllbGQsXG4gIHJlcXVlc3RQYWludCA9IFNjaGVkdWxlci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsXG4gIG5vdyA9IFNjaGVkdWxlci51bnN0YWJsZV9ub3csXG4gIGdldEN1cnJlbnRQcmlvcml0eUxldmVsID0gU2NoZWR1bGVyLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFxuICBJbW1lZGlhdGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxcbiAgVXNlckJsb2NraW5nUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG4gIE5vcm1hbFByaW9yaXR5JDEgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIExvd1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFxuICBJZGxlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFxuICBsb2ckMSA9IFNjaGVkdWxlci5sb2csXG4gIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlLFxuICByZW5kZXJlcklEID0gbnVsbCxcbiAgaW5qZWN0ZWRIb29rID0gbnVsbDtcbmZ1bmN0aW9uIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKG5ld0lzU3RyaWN0TW9kZSkge1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBsb2ckMSAmJiB1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZShuZXdJc1N0cmljdE1vZGUpO1xuICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5zZXRTdHJpY3RNb2RlKVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2suc2V0U3RyaWN0TW9kZShyZW5kZXJlcklELCBuZXdJc1N0cmljdE1vZGUpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbn1cbnZhciBjbHozMiA9IE1hdGguY2x6MzIgPyBNYXRoLmNsejMyIDogY2x6MzJGYWxsYmFjayxcbiAgbG9nID0gTWF0aC5sb2csXG4gIExOMiA9IE1hdGguTE4yO1xuZnVuY3Rpb24gY2x6MzJGYWxsYmFjayh4KSB7XG4gIHggPj4+PSAwO1xuICByZXR1cm4gMCA9PT0geCA/IDMyIDogKDMxIC0gKChsb2coeCkgLyBMTjIpIHwgMCkpIHwgMDtcbn1cbnZhciBuZXh0VHJhbnNpdGlvbkxhbmUgPSAyNTYsXG4gIG5leHRSZXRyeUxhbmUgPSA0MTk0MzA0O1xuZnVuY3Rpb24gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMobGFuZXMpIHtcbiAgdmFyIHBlbmRpbmdTeW5jTGFuZXMgPSBsYW5lcyAmIDQyO1xuICBpZiAoMCAhPT0gcGVuZGluZ1N5bmNMYW5lcykgcmV0dXJuIHBlbmRpbmdTeW5jTGFuZXM7XG4gIHN3aXRjaCAobGFuZXMgJiAtbGFuZXMpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gNDtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gODtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgMzI6XG4gICAgICByZXR1cm4gMzI7XG4gICAgY2FzZSA2NDpcbiAgICAgIHJldHVybiA2NDtcbiAgICBjYXNlIDEyODpcbiAgICAgIHJldHVybiAxMjg7XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gbGFuZXMgJiA0MTk0MDQ4O1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNjI5MTQ1NjA7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICAgIHJldHVybiA2NzEwODg2NDtcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICAgIHJldHVybiAxMzQyMTc3Mjg7XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICByZXR1cm4gMjY4NDM1NDU2O1xuICAgIGNhc2UgNTM2ODcwOTEyOlxuICAgICAgcmV0dXJuIDUzNjg3MDkxMjtcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGxhbmVzO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZXh0TGFuZXMocm9vdCwgd2lwTGFuZXMsIHJvb3RIYXNQZW5kaW5nQ29tbWl0KSB7XG4gIHZhciBwZW5kaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgcmV0dXJuIDA7XG4gIHZhciBuZXh0TGFuZXMgPSAwLFxuICAgIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcyxcbiAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXM7XG4gIHJvb3QgPSByb290Lndhcm1MYW5lcztcbiAgdmFyIG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiAxMzQyMTc3Mjc7XG4gIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICA/ICgocGVuZGluZ0xhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBwZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAoKHBpbmdlZExhbmVzICY9IG5vbklkbGVQZW5kaW5nTGFuZXMpLFxuICAgICAgICAgIDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgICA6IHJvb3RIYXNQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgICAgICgocm9vdEhhc1BlbmRpbmdDb21taXQgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgfnJvb3QpLFxuICAgICAgICAgICAgICAwICE9PSByb290SGFzUGVuZGluZ0NvbW1pdCAmJlxuICAgICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhyb290SGFzUGVuZGluZ0NvbW1pdCkpKSkpXG4gICAgOiAoKG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiB+c3VzcGVuZGVkTGFuZXMpLFxuICAgICAgMCAhPT0gbm9uSWRsZVBlbmRpbmdMYW5lc1xuICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhub25JZGxlUGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAwICE9PSBwaW5nZWRMYW5lc1xuICAgICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHBpbmdlZExhbmVzKSlcbiAgICAgICAgICA6IHJvb3RIYXNQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgICAoKHJvb3RIYXNQZW5kaW5nQ29tbWl0ID0gcGVuZGluZ0xhbmVzICYgfnJvb3QpLFxuICAgICAgICAgICAgMCAhPT0gcm9vdEhhc1BlbmRpbmdDb21taXQgJiZcbiAgICAgICAgICAgICAgKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHJvb3RIYXNQZW5kaW5nQ29tbWl0KSkpKTtcbiAgcmV0dXJuIDAgPT09IG5leHRMYW5lc1xuICAgID8gMFxuICAgIDogMCAhPT0gd2lwTGFuZXMgJiZcbiAgICAgICAgd2lwTGFuZXMgIT09IG5leHRMYW5lcyAmJlxuICAgICAgICAwID09PSAod2lwTGFuZXMgJiBzdXNwZW5kZWRMYW5lcykgJiZcbiAgICAgICAgKChzdXNwZW5kZWRMYW5lcyA9IG5leHRMYW5lcyAmIC1uZXh0TGFuZXMpLFxuICAgICAgICAocm9vdEhhc1BlbmRpbmdDb21taXQgPSB3aXBMYW5lcyAmIC13aXBMYW5lcyksXG4gICAgICAgIHN1c3BlbmRlZExhbmVzID49IHJvb3RIYXNQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgKDMyID09PSBzdXNwZW5kZWRMYW5lcyAmJiAwICE9PSAocm9vdEhhc1BlbmRpbmdDb21taXQgJiA0MTk0MDQ4KSkpXG4gICAgICA/IHdpcExhbmVzXG4gICAgICA6IG5leHRMYW5lcztcbn1cbmZ1bmN0aW9uIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgcmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIChcbiAgICAwID09PVxuICAgIChyb290LnBlbmRpbmdMYW5lcyAmXG4gICAgICB+KHJvb3Quc3VzcGVuZGVkTGFuZXMgJiB+cm9vdC5waW5nZWRMYW5lcykgJlxuICAgICAgcmVuZGVyTGFuZXMpXG4gICk7XG59XG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpIHtcbiAgc3dpdGNoIChsYW5lKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA4OlxuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyAyNTA7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDMyOlxuICAgIGNhc2UgMTI4OlxuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lICsgNWUzO1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRUcmFuc2l0aW9uTGFuZTtcbiAgbmV4dFRyYW5zaXRpb25MYW5lIDw8PSAxO1xuICAwID09PSAobmV4dFRyYW5zaXRpb25MYW5lICYgNDE5NDA0OCkgJiYgKG5leHRUcmFuc2l0aW9uTGFuZSA9IDI1Nik7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY2xhaW1OZXh0UmV0cnlMYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRSZXRyeUxhbmU7XG4gIG5leHRSZXRyeUxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0UmV0cnlMYW5lICYgNjI5MTQ1NjApICYmIChuZXh0UmV0cnlMYW5lID0gNDE5NDMwNCk7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlTGFuZU1hcChpbml0aWFsKSB7XG4gIGZvciAodmFyIGxhbmVNYXAgPSBbXSwgaSA9IDA7IDMxID4gaTsgaSsrKSBsYW5lTWFwLnB1c2goaW5pdGlhbCk7XG4gIHJldHVybiBsYW5lTWFwO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RVcGRhdGVkJDEocm9vdCwgdXBkYXRlTGFuZSkge1xuICByb290LnBlbmRpbmdMYW5lcyB8PSB1cGRhdGVMYW5lO1xuICAyNjg0MzU0NTYgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAoKHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwKSwgKHJvb3QucGluZ2VkTGFuZXMgPSAwKSwgKHJvb3Qud2FybUxhbmVzID0gMCkpO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RGaW5pc2hlZChcbiAgcm9vdCxcbiAgZmluaXNoZWRMYW5lcyxcbiAgcmVtYWluaW5nTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICB2YXIgcHJldmlvdXNseVBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICByb290LnBlbmRpbmdMYW5lcyA9IHJlbWFpbmluZ0xhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzID0gMDtcbiAgcm9vdC5waW5nZWRMYW5lcyA9IDA7XG4gIHJvb3Qud2FybUxhbmVzID0gMDtcbiAgcm9vdC5leHBpcmVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZW50YW5nbGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlciA9IDA7XG4gIHZhciBlbnRhbmdsZW1lbnRzID0gcm9vdC5lbnRhbmdsZW1lbnRzLFxuICAgIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzLFxuICAgIGhpZGRlblVwZGF0ZXMgPSByb290LmhpZGRlblVwZGF0ZXM7XG4gIGZvciAoXG4gICAgcmVtYWluaW5nTGFuZXMgPSBwcmV2aW91c2x5UGVuZGluZ0xhbmVzICYgfnJlbWFpbmluZ0xhbmVzO1xuICAgIDAgPCByZW1haW5pbmdMYW5lcztcblxuICApIHtcbiAgICB2YXIgaW5kZXgkNSA9IDMxIC0gY2x6MzIocmVtYWluaW5nTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNTtcbiAgICBlbnRhbmdsZW1lbnRzW2luZGV4JDVdID0gMDtcbiAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV0gPSAtMTtcbiAgICB2YXIgaGlkZGVuVXBkYXRlc0ZvckxhbmUgPSBoaWRkZW5VcGRhdGVzW2luZGV4JDVdO1xuICAgIGlmIChudWxsICE9PSBoaWRkZW5VcGRhdGVzRm9yTGFuZSlcbiAgICAgIGZvciAoXG4gICAgICAgIGhpZGRlblVwZGF0ZXNbaW5kZXgkNV0gPSBudWxsLCBpbmRleCQ1ID0gMDtcbiAgICAgICAgaW5kZXgkNSA8IGhpZGRlblVwZGF0ZXNGb3JMYW5lLmxlbmd0aDtcbiAgICAgICAgaW5kZXgkNSsrXG4gICAgICApIHtcbiAgICAgICAgdmFyIHVwZGF0ZSA9IGhpZGRlblVwZGF0ZXNGb3JMYW5lW2luZGV4JDVdO1xuICAgICAgICBudWxsICE9PSB1cGRhdGUgJiYgKHVwZGF0ZS5sYW5lICY9IC01MzY4NzA5MTMpO1xuICAgICAgfVxuICAgIHJlbWFpbmluZ0xhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmIG1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lKHJvb3QsIHNwYXduZWRMYW5lLCAwKTtcbiAgMCAhPT0gc3VzcGVuZGVkUmV0cnlMYW5lcyAmJlxuICAgIDAgPT09IHVwZGF0ZWRMYW5lcyAmJlxuICAgIDAgIT09IHJvb3QudGFnICYmXG4gICAgKHJvb3Quc3VzcGVuZGVkTGFuZXMgfD1cbiAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMgJiB+KHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+ZmluaXNoZWRMYW5lcykpO1xufVxuZnVuY3Rpb24gbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIGVudGFuZ2xlZExhbmVzKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LnN1c3BlbmRlZExhbmVzICY9IH5zcGF3bmVkTGFuZTtcbiAgdmFyIHNwYXduZWRMYW5lSW5kZXggPSAzMSAtIGNsejMyKHNwYXduZWRMYW5lKTtcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyB8PSBzcGF3bmVkTGFuZTtcbiAgcm9vdC5lbnRhbmdsZW1lbnRzW3NwYXduZWRMYW5lSW5kZXhdID1cbiAgICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gfFxuICAgIDEwNzM3NDE4MjQgfFxuICAgIChlbnRhbmdsZWRMYW5lcyAmIDQxOTQwOTApO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgZW50YW5nbGVkTGFuZXMpIHtcbiAgdmFyIHJvb3RFbnRhbmdsZWRMYW5lcyA9IChyb290LmVudGFuZ2xlZExhbmVzIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgZm9yIChyb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzOyByb290RW50YW5nbGVkTGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ2ID0gMzEgLSBjbHozMihyb290RW50YW5nbGVkTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNjtcbiAgICAobGFuZSAmIGVudGFuZ2xlZExhbmVzKSB8IChyb290W2luZGV4JDZdICYgZW50YW5nbGVkTGFuZXMpICYmXG4gICAgICAocm9vdFtpbmRleCQ2XSB8PSBlbnRhbmdsZWRMYW5lcyk7XG4gICAgcm9vdEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICB9XG59XG5mdW5jdGlvbiBnZXRCdW1wZWRMYW5lRm9ySHlkcmF0aW9uQnlMYW5lKGxhbmUpIHtcbiAgc3dpdGNoIChsYW5lKSB7XG4gICAgY2FzZSAyOlxuICAgICAgbGFuZSA9IDE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBsYW5lID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzI6XG4gICAgICBsYW5lID0gMTY7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI1NjpcbiAgICBjYXNlIDUxMjpcbiAgICBjYXNlIDEwMjQ6XG4gICAgY2FzZSAyMDQ4OlxuICAgIGNhc2UgNDA5NjpcbiAgICBjYXNlIDgxOTI6XG4gICAgY2FzZSAxNjM4NDpcbiAgICBjYXNlIDMyNzY4OlxuICAgIGNhc2UgNjU1MzY6XG4gICAgY2FzZSAxMzEwNzI6XG4gICAgY2FzZSAyNjIxNDQ6XG4gICAgY2FzZSA1MjQyODg6XG4gICAgY2FzZSAxMDQ4NTc2OlxuICAgIGNhc2UgMjA5NzE1MjpcbiAgICBjYXNlIDQxOTQzMDQ6XG4gICAgY2FzZSA4Mzg4NjA4OlxuICAgIGNhc2UgMTY3NzcyMTY6XG4gICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgIGxhbmUgPSAxMjg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICAgIGxhbmUgPSAxMzQyMTc3Mjg7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGFuZSA9IDA7XG4gIH1cbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBsYW5lc1RvRXZlbnRQcmlvcml0eShsYW5lcykge1xuICBsYW5lcyAmPSAtbGFuZXM7XG4gIHJldHVybiAyIDwgbGFuZXNcbiAgICA/IDggPCBsYW5lc1xuICAgICAgPyAwICE9PSAobGFuZXMgJiAxMzQyMTc3MjcpXG4gICAgICAgID8gMzJcbiAgICAgICAgOiAyNjg0MzU0NTZcbiAgICAgIDogOFxuICAgIDogMjtcbn1cbmZ1bmN0aW9uIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpIHtcbiAgdmFyIHVwZGF0ZVByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgaWYgKDAgIT09IHVwZGF0ZVByaW9yaXR5KSByZXR1cm4gdXBkYXRlUHJpb3JpdHk7XG4gIHVwZGF0ZVByaW9yaXR5ID0gd2luZG93LmV2ZW50O1xuICByZXR1cm4gdm9pZCAwID09PSB1cGRhdGVQcmlvcml0eSA/IDMyIDogZ2V0RXZlbnRQcmlvcml0eSh1cGRhdGVQcmlvcml0eS50eXBlKTtcbn1cbmZ1bmN0aW9uIHJ1bldpdGhQcmlvcml0eShwcmlvcml0eSwgZm4pIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIHJldHVybiAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByaW9yaXR5KSwgZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eTtcbiAgfVxufVxudmFyIHJhbmRvbUtleSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxuICBpbnRlcm5hbEluc3RhbmNlS2V5ID0gXCJfX3JlYWN0RmliZXIkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUHJvcHNLZXkgPSBcIl9fcmVhY3RQcm9wcyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSA9IFwiX19yZWFjdENvbnRhaW5lciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5ID0gXCJfX3JlYWN0RXZlbnRzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleSA9IFwiX19yZWFjdExpc3RlbmVycyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkgPSBcIl9fcmVhY3RIYW5kbGVzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5ID0gXCJfX3JlYWN0UmVzb3VyY2VzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEhvaXN0YWJsZU1hcmtlciA9IFwiX19yZWFjdE1hcmtlciRcIiArIHJhbmRvbUtleTtcbmZ1bmN0aW9uIGRldGFjaERlbGV0ZWRJbnN0YW5jZShub2RlKSB7XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbFByb3BzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleV07XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXROb2RlKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKHRhcmdldEluc3QpIHJldHVybiB0YXJnZXRJbnN0O1xuICBmb3IgKHZhciBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlOyBwYXJlbnROb2RlOyApIHtcbiAgICBpZiAoXG4gICAgICAodGFyZ2V0SW5zdCA9XG4gICAgICAgIHBhcmVudE5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSlcbiAgICApIHtcbiAgICAgIHBhcmVudE5vZGUgPSB0YXJnZXRJbnN0LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gdGFyZ2V0SW5zdC5jaGlsZCB8fFxuICAgICAgICAobnVsbCAhPT0gcGFyZW50Tm9kZSAmJiBudWxsICE9PSBwYXJlbnROb2RlLmNoaWxkKVxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICAgIG51bGwgIT09IHRhcmdldE5vZGU7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKChwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkpIHJldHVybiBwYXJlbnROb2RlO1xuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgICB9XG4gICAgdGFyZ2V0Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZSA9IHRhcmdldE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAoXG4gICAgKG5vZGUgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldIHx8IG5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0pXG4gICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICA1ID09PSB0YWcgfHxcbiAgICAgIDYgPT09IHRhZyB8fFxuICAgICAgMTMgPT09IHRhZyB8fFxuICAgICAgMjYgPT09IHRhZyB8fFxuICAgICAgMjcgPT09IHRhZyB8fFxuICAgICAgMyA9PT0gdGFnXG4gICAgKVxuICAgICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgdmFyIHRhZyA9IGluc3QudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMykpO1xufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qocm9vdCkge1xuICB2YXIgcmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XTtcbiAgcmVzb3VyY2VzIHx8XG4gICAgKHJlc291cmNlcyA9IHJvb3RbaW50ZXJuYWxSb290Tm9kZVJlc291cmNlc0tleV0gPVxuICAgICAgeyBob2lzdGFibGVTdHlsZXM6IG5ldyBNYXAoKSwgaG9pc3RhYmxlU2NyaXB0czogbmV3IE1hcCgpIH0pO1xuICByZXR1cm4gcmVzb3VyY2VzO1xufVxuZnVuY3Rpb24gbWFya05vZGVBc0hvaXN0YWJsZShub2RlKSB7XG4gIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdID0gITA7XG59XG52YXIgYWxsTmF0aXZlRXZlbnRzID0gbmV3IFNldCgpLFxuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzID0ge307XG5mdW5jdGlvbiByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKTtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lICsgXCJDYXB0dXJlXCIsIGRlcGVuZGVuY2llcyk7XG59XG5mdW5jdGlvbiByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGRlcGVuZGVuY2llcykge1xuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gZGVwZW5kZW5jaWVzO1xuICBmb3IgKFxuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPSAwO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPCBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUrK1xuICApXG4gICAgYWxsTmF0aXZlRXZlbnRzLmFkZChkZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0pO1xufVxudmFyIFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYID0gUmVnRXhwKFxuICAgIFwiXls6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEXVs6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEXFxcXC0uMC05XFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDBdKiRcIlxuICApLFxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlID0ge30sXG4gIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lU2FmZShhdHRyaWJ1dGVOYW1lKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpXG4gICAgcmV0dXJuICEwO1xuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSkgcmV0dXJuICExO1xuICBpZiAoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChhdHRyaWJ1dGVOYW1lKSlcbiAgICByZXR1cm4gKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9ICEwKTtcbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9ICEwO1xuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvckF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAoaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSlcbiAgICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2Uge1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICB2YXIgcHJlZml4JDggPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNSk7XG4gICAgICAgICAgaWYgKFwiZGF0YS1cIiAhPT0gcHJlZml4JDggJiYgXCJhcmlhLVwiICE9PSBwcmVmaXgkOCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShub2RlLCBuYW1lc3BhY2UsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBuYW1lLCBcIlwiICsgdmFsdWUpO1xuICB9XG59XG52YXIgcHJlZml4LCBzdWZmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSB7XG4gIGlmICh2b2lkIDAgPT09IHByZWZpeClcbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgcHJlZml4ID0gKG1hdGNoICYmIG1hdGNoWzFdKSB8fCBcIlwiO1xuICAgICAgc3VmZml4ID1cbiAgICAgICAgLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJcXG4gICAgYXRcIilcbiAgICAgICAgICA/IFwiICg8YW5vbnltb3VzPilcIlxuICAgICAgICAgIDogLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJAXCIpXG4gICAgICAgICAgICA/IFwiQHVua25vd246MDowXCJcbiAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG4gIHJldHVybiBcIlxcblwiICsgcHJlZml4ICsgbmFtZSArIHN1ZmZpeDtcbn1cbnZhciByZWVudHJ5ID0gITE7XG5mdW5jdGlvbiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBjb25zdHJ1Y3QpIHtcbiAgaWYgKCFmbiB8fCByZWVudHJ5KSByZXR1cm4gXCJcIjtcbiAgcmVlbnRyeSA9ICEwO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgICBEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsIFwicHJvcHNcIiwge1xuICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgUmVmbGVjdCAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sID0geDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCQ5KSB7XG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHgkOTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgkMTApIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHgkMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoRmFrZSA9IGZuKCkpICYmXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIEZha2UuY2F0Y2ggJiZcbiAgICAgICAgICAgICAgRmFrZS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChzYW1wbGUpIHtcbiAgICAgICAgICBpZiAoc2FtcGxlICYmIGNvbnRyb2wgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHNhbXBsZS5zdGFjaylcbiAgICAgICAgICAgIHJldHVybiBbc2FtcGxlLnN0YWNrLCBjb250cm9sLnN0YWNrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICAgICAgfVxuICAgIH07XG4gICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LmRpc3BsYXlOYW1lID1cbiAgICAgIFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCI7XG4gICAgdmFyIG5hbWVQcm9wRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QsXG4gICAgICBcIm5hbWVcIlxuICAgICk7XG4gICAgbmFtZVByb3BEZXNjcmlwdG9yICYmXG4gICAgICBuYW1lUHJvcERlc2NyaXB0b3IuY29uZmlndXJhYmxlICYmXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCxcbiAgICAgICAgXCJuYW1lXCIsXG4gICAgICAgIHsgdmFsdWU6IFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCIgfVxuICAgICAgKTtcbiAgICB2YXIgX1J1bkluUm9vdEZyYW1lJERldGVyID0gUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290KCksXG4gICAgICBzYW1wbGVTdGFjayA9IF9SdW5JblJvb3RGcmFtZSREZXRlclswXSxcbiAgICAgIGNvbnRyb2xTdGFjayA9IF9SdW5JblJvb3RGcmFtZSREZXRlclsxXTtcbiAgICBpZiAoc2FtcGxlU3RhY2sgJiYgY29udHJvbFN0YWNrKSB7XG4gICAgICB2YXIgc2FtcGxlTGluZXMgPSBzYW1wbGVTdGFjay5zcGxpdChcIlxcblwiKSxcbiAgICAgICAgY29udHJvbExpbmVzID0gY29udHJvbFN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgZm9yIChcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID0gUnVuSW5Sb290RnJhbWUgPSAwO1xuICAgICAgICBSdW5JblJvb3RGcmFtZSA8IHNhbXBsZUxpbmVzLmxlbmd0aCAmJlxuICAgICAgICAhc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdLmluY2x1ZGVzKFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCIpO1xuXG4gICAgICApXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lKys7XG4gICAgICBmb3IgKFxuICAgICAgICA7XG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA8IGNvbnRyb2xMaW5lcy5sZW5ndGggJiZcbiAgICAgICAgIWNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdLmluY2x1ZGVzKFxuICAgICAgICAgIFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCJcbiAgICAgICAgKTtcblxuICAgICAgKVxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IrKztcbiAgICAgIGlmIChcbiAgICAgICAgUnVuSW5Sb290RnJhbWUgPT09IHNhbXBsZUxpbmVzLmxlbmd0aCB8fFxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPT09IGNvbnRyb2xMaW5lcy5sZW5ndGhcbiAgICAgIClcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBSdW5JblJvb3RGcmFtZSA9IHNhbXBsZUxpbmVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPSBjb250cm9sTGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAxIDw9IFJ1bkluUm9vdEZyYW1lICYmXG4gICAgICAgICAgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3IgJiZcbiAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09IGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdO1xuXG4gICAgICAgIClcbiAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3ItLTtcbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgMSA8PSBSdW5JblJvb3RGcmFtZSAmJiAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvcjtcbiAgICAgICAgUnVuSW5Sb290RnJhbWUtLSwgbmFtZVByb3BEZXNjcmlwdG9yLS1cbiAgICAgIClcbiAgICAgICAgaWYgKHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT0gY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0pIHtcbiAgICAgICAgICBpZiAoMSAhPT0gUnVuSW5Sb290RnJhbWUgfHwgMSAhPT0gbmFtZVByb3BEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBkb1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKFJ1bkluUm9vdEZyYW1lLS0sXG4gICAgICAgICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLS0sXG4gICAgICAgICAgICAgICAgMCA+IG5hbWVQcm9wRGVzY3JpcHRvciB8fFxuICAgICAgICAgICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PVxuICAgICAgICAgICAgICAgICAgICBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lID1cbiAgICAgICAgICAgICAgICAgIFwiXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdLnJlcGxhY2UoXCIgYXQgbmV3IFwiLCBcIiBhdCBcIik7XG4gICAgICAgICAgICAgICAgZm4uZGlzcGxheU5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIGZyYW1lLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikgJiZcbiAgICAgICAgICAgICAgICAgIChmcmFtZSA9IGZyYW1lLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLCBmbi5kaXNwbGF5TmFtZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKDEgPD0gUnVuSW5Sb290RnJhbWUgJiYgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAocmVlbnRyeSA9ICExKSwgKEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSk7XG4gIH1cbiAgcmV0dXJuIChwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlID0gZm4gPyBmbi5kaXNwbGF5TmFtZSB8fCBmbi5uYW1lIDogXCJcIilcbiAgICA/IGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UpXG4gICAgOiBcIlwiO1xufVxuZnVuY3Rpb24gZGVzY3JpYmVGaWJlcihmaWJlcikge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSk7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIkxhenlcIik7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIlN1c3BlbnNlXCIpO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJTdXNwZW5zZUxpc3RcIik7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmaWJlci50eXBlLCAhMSk7XG4gICAgY2FzZSAxMTpcbiAgICAgIHJldHVybiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUucmVuZGVyLCAhMSk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSwgITApO1xuICAgIGNhc2UgMzE6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJBY3Rpdml0eVwiKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCh3b3JrSW5Qcm9ncmVzcykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gXCJcIjtcbiAgICBkb1xuICAgICAgKGluZm8gKz0gZGVzY3JpYmVGaWJlcih3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4pO1xuICAgIHdoaWxlICh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICByZXR1cm4gXCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIiArIHgubWVzc2FnZSArIFwiXFxuXCIgKyB4LnN0YWNrO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSBcImJpZ2ludFwiOlxuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gaXNDaGVja2FibGUoZWxlbSkge1xuICB2YXIgdHlwZSA9IGVsZW0udHlwZTtcbiAgcmV0dXJuIChcbiAgICAoZWxlbSA9IGVsZW0ubm9kZU5hbWUpICYmXG4gICAgXCJpbnB1dFwiID09PSBlbGVtLnRvTG93ZXJDYXNlKCkgJiZcbiAgICAoXCJjaGVja2JveFwiID09PSB0eXBlIHx8IFwicmFkaW9cIiA9PT0gdHlwZSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHRyYWNrVmFsdWVPbk5vZGUobm9kZSkge1xuICB2YXIgdmFsdWVGaWVsZCA9IGlzQ2hlY2thYmxlKG5vZGUpID8gXCJjaGVja2VkXCIgOiBcInZhbHVlXCIsXG4gICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICBub2RlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICAgIHZhbHVlRmllbGRcbiAgICApLFxuICAgIGN1cnJlbnRWYWx1ZSA9IFwiXCIgKyBub2RlW3ZhbHVlRmllbGRdO1xuICBpZiAoXG4gICAgIW5vZGUuaGFzT3duUHJvcGVydHkodmFsdWVGaWVsZCkgJiZcbiAgICBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZGVzY3JpcHRvciAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci5zZXRcbiAgKSB7XG4gICAgdmFyIGdldCA9IGRlc2NyaXB0b3IuZ2V0LFxuICAgICAgc2V0ID0gZGVzY3JpcHRvci5zZXQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldC5jYWxsKHRoaXMpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGN1cnJlbnRWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcbiAgICAgICAgc2V0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGVcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGN1cnJlbnRWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzdG9wVHJhY2tpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbm9kZS5fdmFsdWVUcmFja2VyID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIG5vZGVbdmFsdWVGaWVsZF07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gdHJhY2sobm9kZSkge1xuICBub2RlLl92YWx1ZVRyYWNrZXIgfHwgKG5vZGUuX3ZhbHVlVHJhY2tlciA9IHRyYWNrVmFsdWVPbk5vZGUobm9kZSkpO1xufVxuZnVuY3Rpb24gdXBkYXRlVmFsdWVJZkNoYW5nZWQobm9kZSkge1xuICBpZiAoIW5vZGUpIHJldHVybiAhMTtcbiAgdmFyIHRyYWNrZXIgPSBub2RlLl92YWx1ZVRyYWNrZXI7XG4gIGlmICghdHJhY2tlcikgcmV0dXJuICEwO1xuICB2YXIgbGFzdFZhbHVlID0gdHJhY2tlci5nZXRWYWx1ZSgpO1xuICB2YXIgdmFsdWUgPSBcIlwiO1xuICBub2RlICYmXG4gICAgKHZhbHVlID0gaXNDaGVja2FibGUobm9kZSlcbiAgICAgID8gbm9kZS5jaGVja2VkXG4gICAgICAgID8gXCJ0cnVlXCJcbiAgICAgICAgOiBcImZhbHNlXCJcbiAgICAgIDogbm9kZS52YWx1ZSk7XG4gIG5vZGUgPSB2YWx1ZTtcbiAgcmV0dXJuIG5vZGUgIT09IGxhc3RWYWx1ZSA/ICh0cmFja2VyLnNldFZhbHVlKG5vZGUpLCAhMCkgOiAhMTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGRvYyA9IGRvYyB8fCAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGRvY3VtZW50ID8gZG9jdW1lbnQgOiB2b2lkIDApO1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGRvYykgcmV0dXJuIG51bGw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG52YXIgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4ID0gL1tcXG5cIlxcXFxdL2c7XG5mdW5jdGlvbiBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKFxuICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCxcbiAgICBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpICsgXCIgXCI7XG4gICAgfVxuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlSW5wdXQoXG4gIGVsZW1lbnQsXG4gIHZhbHVlLFxuICBkZWZhdWx0VmFsdWUsXG4gIGxhc3REZWZhdWx0VmFsdWUsXG4gIGNoZWNrZWQsXG4gIGRlZmF1bHRDaGVja2VkLFxuICB0eXBlLFxuICBuYW1lXG4pIHtcbiAgZWxlbWVudC5uYW1lID0gXCJcIjtcbiAgbnVsbCAhPSB0eXBlICYmXG4gIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgXCJib29sZWFuXCIgIT09IHR5cGVvZiB0eXBlXG4gICAgPyAoZWxlbWVudC50eXBlID0gdHlwZSlcbiAgICA6IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcbiAgaWYgKG51bGwgIT0gdmFsdWUpXG4gICAgaWYgKFwibnVtYmVyXCIgPT09IHR5cGUpIHtcbiAgICAgIGlmICgoMCA9PT0gdmFsdWUgJiYgXCJcIiA9PT0gZWxlbWVudC52YWx1ZSkgfHwgZWxlbWVudC52YWx1ZSAhPSB2YWx1ZSlcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2VcbiAgICAgIGVsZW1lbnQudmFsdWUgIT09IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSAmJlxuICAgICAgICAoZWxlbWVudC52YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSk7XG4gIGVsc2VcbiAgICAoXCJzdWJtaXRcIiAhPT0gdHlwZSAmJiBcInJlc2V0XCIgIT09IHR5cGUpIHx8IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7XG4gIG51bGwgIT0gdmFsdWVcbiAgICA/IHNldERlZmF1bHRWYWx1ZShlbGVtZW50LCB0eXBlLCBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSlcbiAgICA6IG51bGwgIT0gZGVmYXVsdFZhbHVlXG4gICAgICA/IHNldERlZmF1bHRWYWx1ZShlbGVtZW50LCB0eXBlLCBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkpXG4gICAgICA6IG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSAmJiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICBudWxsID09IGNoZWNrZWQgJiZcbiAgICBudWxsICE9IGRlZmF1bHRDaGVja2VkICYmXG4gICAgKGVsZW1lbnQuZGVmYXVsdENoZWNrZWQgPSAhIWRlZmF1bHRDaGVja2VkKTtcbiAgbnVsbCAhPSBjaGVja2VkICYmXG4gICAgKGVsZW1lbnQuY2hlY2tlZCA9XG4gICAgICBjaGVja2VkICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNoZWNrZWQgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGNoZWNrZWQpO1xuICBudWxsICE9IG5hbWUgJiZcbiAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICBcInN5bWJvbFwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIG5hbWVcbiAgICA/IChlbGVtZW50Lm5hbWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShuYW1lKSlcbiAgICA6IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwibmFtZVwiKTtcbn1cbmZ1bmN0aW9uIGluaXRJbnB1dChcbiAgZWxlbWVudCxcbiAgdmFsdWUsXG4gIGRlZmF1bHRWYWx1ZSxcbiAgY2hlY2tlZCxcbiAgZGVmYXVsdENoZWNrZWQsXG4gIHR5cGUsXG4gIG5hbWUsXG4gIGlzSHlkcmF0aW5nXG4pIHtcbiAgbnVsbCAhPSB0eXBlICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJib29sZWFuXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgKGVsZW1lbnQudHlwZSA9IHR5cGUpO1xuICBpZiAobnVsbCAhPSB2YWx1ZSB8fCBudWxsICE9IGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIChcInN1Ym1pdFwiICE9PSB0eXBlICYmIFwicmVzZXRcIiAhPT0gdHlwZSkgfHxcbiAgICAgICAgKHZvaWQgMCAhPT0gdmFsdWUgJiYgbnVsbCAhPT0gdmFsdWUpXG4gICAgICApXG4gICAgKVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHRWYWx1ZSA9XG4gICAgICBudWxsICE9IGRlZmF1bHRWYWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkgOiBcIlwiO1xuICAgIHZhbHVlID0gbnVsbCAhPSB2YWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICBpc0h5ZHJhdGluZyB8fCB2YWx1ZSA9PT0gZWxlbWVudC52YWx1ZSB8fCAoZWxlbWVudC52YWx1ZSA9IHZhbHVlKTtcbiAgICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIGNoZWNrZWQgPSBudWxsICE9IGNoZWNrZWQgPyBjaGVja2VkIDogZGVmYXVsdENoZWNrZWQ7XG4gIGNoZWNrZWQgPVxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNoZWNrZWQgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGNoZWNrZWQgJiYgISFjaGVja2VkO1xuICBlbGVtZW50LmNoZWNrZWQgPSBpc0h5ZHJhdGluZyA/IGVsZW1lbnQuY2hlY2tlZCA6ICEhY2hlY2tlZDtcbiAgZWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9ICEhY2hlY2tlZDtcbiAgbnVsbCAhPSBuYW1lICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgXCJib29sZWFuXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgKGVsZW1lbnQubmFtZSA9IG5hbWUpO1xufVxuZnVuY3Rpb24gc2V0RGVmYXVsdFZhbHVlKG5vZGUsIHR5cGUsIHZhbHVlKSB7XG4gIChcIm51bWJlclwiID09PSB0eXBlICYmIGdldEFjdGl2ZUVsZW1lbnQobm9kZS5vd25lckRvY3VtZW50KSA9PT0gbm9kZSkgfHxcbiAgICBub2RlLmRlZmF1bHRWYWx1ZSA9PT0gXCJcIiArIHZhbHVlIHx8XG4gICAgKG5vZGUuZGVmYXVsdFZhbHVlID0gXCJcIiArIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMobm9kZSwgbXVsdGlwbGUsIHByb3BWYWx1ZSwgc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gIG5vZGUgPSBub2RlLm9wdGlvbnM7XG4gIGlmIChtdWx0aXBsZSkge1xuICAgIG11bHRpcGxlID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspXG4gICAgICBtdWx0aXBsZVtcIiRcIiArIHByb3BWYWx1ZVtpXV0gPSAhMDtcbiAgICBmb3IgKHByb3BWYWx1ZSA9IDA7IHByb3BWYWx1ZSA8IG5vZGUubGVuZ3RoOyBwcm9wVmFsdWUrKylcbiAgICAgIChpID0gbXVsdGlwbGUuaGFzT3duUHJvcGVydHkoXCIkXCIgKyBub2RlW3Byb3BWYWx1ZV0udmFsdWUpKSxcbiAgICAgICAgbm9kZVtwcm9wVmFsdWVdLnNlbGVjdGVkICE9PSBpICYmIChub2RlW3Byb3BWYWx1ZV0uc2VsZWN0ZWQgPSBpKSxcbiAgICAgICAgaSAmJiBzZXREZWZhdWx0U2VsZWN0ZWQgJiYgKG5vZGVbcHJvcFZhbHVlXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7XG4gIH0gZWxzZSB7XG4gICAgcHJvcFZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUocHJvcFZhbHVlKTtcbiAgICBtdWx0aXBsZSA9IG51bGw7XG4gICAgZm9yIChpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChub2RlW2ldLnZhbHVlID09PSBwcm9wVmFsdWUpIHtcbiAgICAgICAgbm9kZVtpXS5zZWxlY3RlZCA9ICEwO1xuICAgICAgICBzZXREZWZhdWx0U2VsZWN0ZWQgJiYgKG5vZGVbaV0uZGVmYXVsdFNlbGVjdGVkID0gITApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBudWxsICE9PSBtdWx0aXBsZSB8fCBub2RlW2ldLmRpc2FibGVkIHx8IChtdWx0aXBsZSA9IG5vZGVbaV0pO1xuICAgIH1cbiAgICBudWxsICE9PSBtdWx0aXBsZSAmJiAobXVsdGlwbGUuc2VsZWN0ZWQgPSAhMCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVRleHRhcmVhKGVsZW1lbnQsIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKFxuICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAoKHZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKSxcbiAgICB2YWx1ZSAhPT0gZWxlbWVudC52YWx1ZSAmJiAoZWxlbWVudC52YWx1ZSA9IHZhbHVlKSxcbiAgICBudWxsID09IGRlZmF1bHRWYWx1ZSlcbiAgKSB7XG4gICAgZWxlbWVudC5kZWZhdWx0VmFsdWUgIT09IHZhbHVlICYmIChlbGVtZW50LmRlZmF1bHRWYWx1ZSA9IHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPVxuICAgIG51bGwgIT0gZGVmYXVsdFZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSA6IFwiXCI7XG59XG5mdW5jdGlvbiBpbml0VGV4dGFyZWEoZWxlbWVudCwgdmFsdWUsIGRlZmF1bHRWYWx1ZSwgY2hpbGRyZW4pIHtcbiAgaWYgKG51bGwgPT0gdmFsdWUpIHtcbiAgICBpZiAobnVsbCAhPSBjaGlsZHJlbikge1xuICAgICAgaWYgKG51bGwgIT0gZGVmYXVsdFZhbHVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkyKSk7XG4gICAgICBpZiAoaXNBcnJheUltcGwoY2hpbGRyZW4pKSB7XG4gICAgICAgIGlmICgxIDwgY2hpbGRyZW4ubGVuZ3RoKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkzKSk7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICB9XG4gICAgICBkZWZhdWx0VmFsdWUgPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgbnVsbCA9PSBkZWZhdWx0VmFsdWUgJiYgKGRlZmF1bHRWYWx1ZSA9IFwiXCIpO1xuICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICB9XG4gIGRlZmF1bHRWYWx1ZSA9IGdldFRvU3RyaW5nVmFsdWUodmFsdWUpO1xuICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgY2hpbGRyZW4gPSBlbGVtZW50LnRleHRDb250ZW50O1xuICBjaGlsZHJlbiA9PT0gZGVmYXVsdFZhbHVlICYmXG4gICAgXCJcIiAhPT0gY2hpbGRyZW4gJiZcbiAgICBudWxsICE9PSBjaGlsZHJlbiAmJlxuICAgIChlbGVtZW50LnZhbHVlID0gY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQobm9kZSwgdGV4dCkge1xuICBpZiAodGV4dCkge1xuICAgIHZhciBmaXJzdENoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgIGlmIChcbiAgICAgIGZpcnN0Q2hpbGQgJiZcbiAgICAgIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmXG4gICAgICAzID09PSBmaXJzdENoaWxkLm5vZGVUeXBlXG4gICAgKSB7XG4gICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxudmFyIHVuaXRsZXNzTnVtYmVycyA9IG5ldyBTZXQoXG4gIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgYXNwZWN0UmF0aW8gYm9yZGVySW1hZ2VPdXRzZXQgYm9yZGVySW1hZ2VTbGljZSBib3JkZXJJbWFnZVdpZHRoIGJveEZsZXggYm94RmxleEdyb3VwIGJveE9yZGluYWxHcm91cCBjb2x1bW5Db3VudCBjb2x1bW5zIGZsZXggZmxleEdyb3cgZmxleFBvc2l0aXZlIGZsZXhTaHJpbmsgZmxleE5lZ2F0aXZlIGZsZXhPcmRlciBncmlkQXJlYSBncmlkUm93IGdyaWRSb3dFbmQgZ3JpZFJvd1NwYW4gZ3JpZFJvd1N0YXJ0IGdyaWRDb2x1bW4gZ3JpZENvbHVtbkVuZCBncmlkQ29sdW1uU3BhbiBncmlkQ29sdW1uU3RhcnQgZm9udFdlaWdodCBsaW5lQ2xhbXAgbGluZUhlaWdodCBvcGFjaXR5IG9yZGVyIG9ycGhhbnMgc2NhbGUgdGFiU2l6ZSB3aWRvd3MgekluZGV4IHpvb20gZmlsbE9wYWNpdHkgZmxvb2RPcGFjaXR5IHN0b3BPcGFjaXR5IHN0cm9rZURhc2hhcnJheSBzdHJva2VEYXNob2Zmc2V0IHN0cm9rZU1pdGVybGltaXQgc3Ryb2tlT3BhY2l0eSBzdHJva2VXaWR0aCBNb3pBbmltYXRpb25JdGVyYXRpb25Db3VudCBNb3pCb3hGbGV4IE1vekJveEZsZXhHcm91cCBNb3pMaW5lQ2xhbXAgbXNBbmltYXRpb25JdGVyYXRpb25Db3VudCBtc0ZsZXggbXNab29tIG1zRmxleEdyb3cgbXNGbGV4TmVnYXRpdmUgbXNGbGV4T3JkZXIgbXNGbGV4UG9zaXRpdmUgbXNGbGV4U2hyaW5rIG1zR3JpZENvbHVtbiBtc0dyaWRDb2x1bW5TcGFuIG1zR3JpZFJvdyBtc0dyaWRSb3dTcGFuIFdlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IFdlYmtpdEJveEZsZXggV2ViS2l0Qm94RmxleEdyb3VwIFdlYmtpdEJveE9yZGluYWxHcm91cCBXZWJraXRDb2x1bW5Db3VudCBXZWJraXRDb2x1bW5zIFdlYmtpdEZsZXggV2Via2l0RmxleEdyb3cgV2Via2l0RmxleFBvc2l0aXZlIFdlYmtpdEZsZXhTaHJpbmsgV2Via2l0TGluZUNsYW1wXCIuc3BsaXQoXG4gICAgXCIgXCJcbiAgKVxuKTtcbmZ1bmN0aW9uIHNldFZhbHVlRm9yU3R5bGUoc3R5bGUsIHN0eWxlTmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSAwID09PSBzdHlsZU5hbWUuaW5kZXhPZihcIi0tXCIpO1xuICBudWxsID09IHZhbHVlIHx8IFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWUgfHwgXCJcIiA9PT0gdmFsdWVcbiAgICA/IGlzQ3VzdG9tUHJvcGVydHlcbiAgICAgID8gc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBcIlwiKVxuICAgICAgOiBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICA/IChzdHlsZS5jc3NGbG9hdCA9IFwiXCIpXG4gICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSBcIlwiKVxuICAgIDogaXNDdXN0b21Qcm9wZXJ0eVxuICAgICAgPyBzdHlsZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIHZhbHVlKVxuICAgICAgOiBcIm51bWJlclwiICE9PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgICAwID09PSB2YWx1ZSB8fFxuICAgICAgICAgIHVuaXRsZXNzTnVtYmVycy5oYXMoc3R5bGVOYW1lKVxuICAgICAgICA/IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgICAgPyAoc3R5bGUuY3NzRmxvYXQgPSB2YWx1ZSlcbiAgICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gKFwiXCIgKyB2YWx1ZSkudHJpbSgpKVxuICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gdmFsdWUgKyBcInB4XCIpO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVzLCBwcmV2U3R5bGVzKSB7XG4gIGlmIChudWxsICE9IHN0eWxlcyAmJiBcIm9iamVjdFwiICE9PSB0eXBlb2Ygc3R5bGVzKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjIpKTtcbiAgbm9kZSA9IG5vZGUuc3R5bGU7XG4gIGlmIChudWxsICE9IHByZXZTdHlsZXMpIHtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gcHJldlN0eWxlcylcbiAgICAgICFwcmV2U3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgfHxcbiAgICAgICAgKG51bGwgIT0gc3R5bGVzICYmIHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB8fFxuICAgICAgICAoMCA9PT0gc3R5bGVOYW1lLmluZGV4T2YoXCItLVwiKVxuICAgICAgICAgID8gbm9kZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIFwiXCIpXG4gICAgICAgICAgOiBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICAgICAgPyAobm9kZS5jc3NGbG9hdCA9IFwiXCIpXG4gICAgICAgICAgICA6IChub2RlW3N0eWxlTmFtZV0gPSBcIlwiKSk7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lJDE2IGluIHN0eWxlcylcbiAgICAgIChzdHlsZU5hbWUgPSBzdHlsZXNbc3R5bGVOYW1lJDE2XSksXG4gICAgICAgIHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUkMTYpICYmXG4gICAgICAgICAgcHJldlN0eWxlc1tzdHlsZU5hbWUkMTZdICE9PSBzdHlsZU5hbWUgJiZcbiAgICAgICAgICBzZXRWYWx1ZUZvclN0eWxlKG5vZGUsIHN0eWxlTmFtZSQxNiwgc3R5bGVOYW1lKTtcbiAgfSBlbHNlXG4gICAgZm9yICh2YXIgc3R5bGVOYW1lJDE3IGluIHN0eWxlcylcbiAgICAgIHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUkMTcpICYmXG4gICAgICAgIHNldFZhbHVlRm9yU3R5bGUobm9kZSwgc3R5bGVOYW1lJDE3LCBzdHlsZXNbc3R5bGVOYW1lJDE3XSk7XG59XG5mdW5jdGlvbiBpc0N1c3RvbUVsZW1lbnQodGFnTmFtZSkge1xuICBpZiAoLTEgPT09IHRhZ05hbWUuaW5kZXhPZihcIi1cIikpIHJldHVybiAhMTtcbiAgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgY2FzZSBcImFubm90YXRpb24teG1sXCI6XG4gICAgY2FzZSBcImNvbG9yLXByb2ZpbGVcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1zcmNcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLXVyaVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6XG4gICAgY2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpcbiAgICAgIHJldHVybiAhMTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICEwO1xuICB9XG59XG52YXIgYWxpYXNlcyA9IG5ldyBNYXAoW1xuICAgIFtcImFjY2VwdENoYXJzZXRcIiwgXCJhY2NlcHQtY2hhcnNldFwiXSxcbiAgICBbXCJodG1sRm9yXCIsIFwiZm9yXCJdLFxuICAgIFtcImh0dHBFcXVpdlwiLCBcImh0dHAtZXF1aXZcIl0sXG4gICAgW1wiY3Jvc3NPcmlnaW5cIiwgXCJjcm9zc29yaWdpblwiXSxcbiAgICBbXCJhY2NlbnRIZWlnaHRcIiwgXCJhY2NlbnQtaGVpZ2h0XCJdLFxuICAgIFtcImFsaWdubWVudEJhc2VsaW5lXCIsIFwiYWxpZ25tZW50LWJhc2VsaW5lXCJdLFxuICAgIFtcImFyYWJpY0Zvcm1cIiwgXCJhcmFiaWMtZm9ybVwiXSxcbiAgICBbXCJiYXNlbGluZVNoaWZ0XCIsIFwiYmFzZWxpbmUtc2hpZnRcIl0sXG4gICAgW1wiY2FwSGVpZ2h0XCIsIFwiY2FwLWhlaWdodFwiXSxcbiAgICBbXCJjbGlwUGF0aFwiLCBcImNsaXAtcGF0aFwiXSxcbiAgICBbXCJjbGlwUnVsZVwiLCBcImNsaXAtcnVsZVwiXSxcbiAgICBbXCJjb2xvckludGVycG9sYXRpb25cIiwgXCJjb2xvci1pbnRlcnBvbGF0aW9uXCJdLFxuICAgIFtcImNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnNcIiwgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIl0sXG4gICAgW1wiY29sb3JQcm9maWxlXCIsIFwiY29sb3ItcHJvZmlsZVwiXSxcbiAgICBbXCJjb2xvclJlbmRlcmluZ1wiLCBcImNvbG9yLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJkb21pbmFudEJhc2VsaW5lXCIsIFwiZG9taW5hbnQtYmFzZWxpbmVcIl0sXG4gICAgW1wiZW5hYmxlQmFja2dyb3VuZFwiLCBcImVuYWJsZS1iYWNrZ3JvdW5kXCJdLFxuICAgIFtcImZpbGxPcGFjaXR5XCIsIFwiZmlsbC1vcGFjaXR5XCJdLFxuICAgIFtcImZpbGxSdWxlXCIsIFwiZmlsbC1ydWxlXCJdLFxuICAgIFtcImZsb29kQ29sb3JcIiwgXCJmbG9vZC1jb2xvclwiXSxcbiAgICBbXCJmbG9vZE9wYWNpdHlcIiwgXCJmbG9vZC1vcGFjaXR5XCJdLFxuICAgIFtcImZvbnRGYW1pbHlcIiwgXCJmb250LWZhbWlseVwiXSxcbiAgICBbXCJmb250U2l6ZVwiLCBcImZvbnQtc2l6ZVwiXSxcbiAgICBbXCJmb250U2l6ZUFkanVzdFwiLCBcImZvbnQtc2l6ZS1hZGp1c3RcIl0sXG4gICAgW1wiZm9udFN0cmV0Y2hcIiwgXCJmb250LXN0cmV0Y2hcIl0sXG4gICAgW1wiZm9udFN0eWxlXCIsIFwiZm9udC1zdHlsZVwiXSxcbiAgICBbXCJmb250VmFyaWFudFwiLCBcImZvbnQtdmFyaWFudFwiXSxcbiAgICBbXCJmb250V2VpZ2h0XCIsIFwiZm9udC13ZWlnaHRcIl0sXG4gICAgW1wiZ2x5cGhOYW1lXCIsIFwiZ2x5cGgtbmFtZVwiXSxcbiAgICBbXCJnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbFwiLCBcImdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWxcIl0sXG4gICAgW1wiZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsXCIsIFwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWxcIl0sXG4gICAgW1wiaG9yaXpBZHZYXCIsIFwiaG9yaXotYWR2LXhcIl0sXG4gICAgW1wiaG9yaXpPcmlnaW5YXCIsIFwiaG9yaXotb3JpZ2luLXhcIl0sXG4gICAgW1wiaW1hZ2VSZW5kZXJpbmdcIiwgXCJpbWFnZS1yZW5kZXJpbmdcIl0sXG4gICAgW1wibGV0dGVyU3BhY2luZ1wiLCBcImxldHRlci1zcGFjaW5nXCJdLFxuICAgIFtcImxpZ2h0aW5nQ29sb3JcIiwgXCJsaWdodGluZy1jb2xvclwiXSxcbiAgICBbXCJtYXJrZXJFbmRcIiwgXCJtYXJrZXItZW5kXCJdLFxuICAgIFtcIm1hcmtlck1pZFwiLCBcIm1hcmtlci1taWRcIl0sXG4gICAgW1wibWFya2VyU3RhcnRcIiwgXCJtYXJrZXItc3RhcnRcIl0sXG4gICAgW1wib3ZlcmxpbmVQb3NpdGlvblwiLCBcIm92ZXJsaW5lLXBvc2l0aW9uXCJdLFxuICAgIFtcIm92ZXJsaW5lVGhpY2tuZXNzXCIsIFwib3ZlcmxpbmUtdGhpY2tuZXNzXCJdLFxuICAgIFtcInBhaW50T3JkZXJcIiwgXCJwYWludC1vcmRlclwiXSxcbiAgICBbXCJwYW5vc2UtMVwiLCBcInBhbm9zZS0xXCJdLFxuICAgIFtcInBvaW50ZXJFdmVudHNcIiwgXCJwb2ludGVyLWV2ZW50c1wiXSxcbiAgICBbXCJyZW5kZXJpbmdJbnRlbnRcIiwgXCJyZW5kZXJpbmctaW50ZW50XCJdLFxuICAgIFtcInNoYXBlUmVuZGVyaW5nXCIsIFwic2hhcGUtcmVuZGVyaW5nXCJdLFxuICAgIFtcInN0b3BDb2xvclwiLCBcInN0b3AtY29sb3JcIl0sXG4gICAgW1wic3RvcE9wYWNpdHlcIiwgXCJzdG9wLW9wYWNpdHlcIl0sXG4gICAgW1wic3RyaWtldGhyb3VnaFBvc2l0aW9uXCIsIFwic3RyaWtldGhyb3VnaC1wb3NpdGlvblwiXSxcbiAgICBbXCJzdHJpa2V0aHJvdWdoVGhpY2tuZXNzXCIsIFwic3RyaWtldGhyb3VnaC10aGlja25lc3NcIl0sXG4gICAgW1wic3Ryb2tlRGFzaGFycmF5XCIsIFwic3Ryb2tlLWRhc2hhcnJheVwiXSxcbiAgICBbXCJzdHJva2VEYXNob2Zmc2V0XCIsIFwic3Ryb2tlLWRhc2hvZmZzZXRcIl0sXG4gICAgW1wic3Ryb2tlTGluZWNhcFwiLCBcInN0cm9rZS1saW5lY2FwXCJdLFxuICAgIFtcInN0cm9rZUxpbmVqb2luXCIsIFwic3Ryb2tlLWxpbmVqb2luXCJdLFxuICAgIFtcInN0cm9rZU1pdGVybGltaXRcIiwgXCJzdHJva2UtbWl0ZXJsaW1pdFwiXSxcbiAgICBbXCJzdHJva2VPcGFjaXR5XCIsIFwic3Ryb2tlLW9wYWNpdHlcIl0sXG4gICAgW1wic3Ryb2tlV2lkdGhcIiwgXCJzdHJva2Utd2lkdGhcIl0sXG4gICAgW1widGV4dEFuY2hvclwiLCBcInRleHQtYW5jaG9yXCJdLFxuICAgIFtcInRleHREZWNvcmF0aW9uXCIsIFwidGV4dC1kZWNvcmF0aW9uXCJdLFxuICAgIFtcInRleHRSZW5kZXJpbmdcIiwgXCJ0ZXh0LXJlbmRlcmluZ1wiXSxcbiAgICBbXCJ0cmFuc2Zvcm1PcmlnaW5cIiwgXCJ0cmFuc2Zvcm0tb3JpZ2luXCJdLFxuICAgIFtcInVuZGVybGluZVBvc2l0aW9uXCIsIFwidW5kZXJsaW5lLXBvc2l0aW9uXCJdLFxuICAgIFtcInVuZGVybGluZVRoaWNrbmVzc1wiLCBcInVuZGVybGluZS10aGlja25lc3NcIl0sXG4gICAgW1widW5pY29kZUJpZGlcIiwgXCJ1bmljb2RlLWJpZGlcIl0sXG4gICAgW1widW5pY29kZVJhbmdlXCIsIFwidW5pY29kZS1yYW5nZVwiXSxcbiAgICBbXCJ1bml0c1BlckVtXCIsIFwidW5pdHMtcGVyLWVtXCJdLFxuICAgIFtcInZBbHBoYWJldGljXCIsIFwidi1hbHBoYWJldGljXCJdLFxuICAgIFtcInZIYW5naW5nXCIsIFwidi1oYW5naW5nXCJdLFxuICAgIFtcInZJZGVvZ3JhcGhpY1wiLCBcInYtaWRlb2dyYXBoaWNcIl0sXG4gICAgW1widk1hdGhlbWF0aWNhbFwiLCBcInYtbWF0aGVtYXRpY2FsXCJdLFxuICAgIFtcInZlY3RvckVmZmVjdFwiLCBcInZlY3Rvci1lZmZlY3RcIl0sXG4gICAgW1widmVydEFkdllcIiwgXCJ2ZXJ0LWFkdi15XCJdLFxuICAgIFtcInZlcnRPcmlnaW5YXCIsIFwidmVydC1vcmlnaW4teFwiXSxcbiAgICBbXCJ2ZXJ0T3JpZ2luWVwiLCBcInZlcnQtb3JpZ2luLXlcIl0sXG4gICAgW1wid29yZFNwYWNpbmdcIiwgXCJ3b3JkLXNwYWNpbmdcIl0sXG4gICAgW1wid3JpdGluZ01vZGVcIiwgXCJ3cml0aW5nLW1vZGVcIl0sXG4gICAgW1wieG1sbnNYbGlua1wiLCBcInhtbG5zOnhsaW5rXCJdLFxuICAgIFtcInhIZWlnaHRcIiwgXCJ4LWhlaWdodFwiXVxuICBdKSxcbiAgaXNKYXZhU2NyaXB0UHJvdG9jb2wgPVxuICAgIC9eW1xcdTAwMDAtXFx1MDAxRiBdKmpbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qdltcXHJcXG5cXHRdKmFbXFxyXFxuXFx0XSpzW1xcclxcblxcdF0qY1tcXHJcXG5cXHRdKnJbXFxyXFxuXFx0XSppW1xcclxcblxcdF0qcFtcXHJcXG5cXHRdKnRbXFxyXFxuXFx0XSo6L2k7XG5mdW5jdGlvbiBzYW5pdGl6ZVVSTCh1cmwpIHtcbiAgcmV0dXJuIGlzSmF2YVNjcmlwdFByb3RvY29sLnRlc3QoXCJcIiArIHVybClcbiAgICA/IFwiamF2YXNjcmlwdDp0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0IGhhcyBibG9ja2VkIGEgamF2YXNjcmlwdDogVVJMIGFzIGEgc2VjdXJpdHkgcHJlY2F1dGlvbi4nKVwiXG4gICAgOiB1cmw7XG59XG52YXIgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93O1xuICBuYXRpdmVFdmVudC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCAmJlxuICAgIChuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtcbiAgcmV0dXJuIDMgPT09IG5hdGl2ZUV2ZW50Lm5vZGVUeXBlID8gbmF0aXZlRXZlbnQucGFyZW50Tm9kZSA6IG5hdGl2ZUV2ZW50O1xufVxudmFyIHJlc3RvcmVUYXJnZXQgPSBudWxsLFxuICByZXN0b3JlUXVldWUgPSBudWxsO1xuZnVuY3Rpb24gcmVzdG9yZVN0YXRlT2ZUYXJnZXQodGFyZ2V0KSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXQpO1xuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSAmJiAodGFyZ2V0ID0gaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUpKSB7XG4gICAgdmFyIHByb3BzID0gdGFyZ2V0W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgYTogc3dpdGNoICgoKHRhcmdldCA9IGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlKSwgaW50ZXJuYWxJbnN0YW5jZS50eXBlKSkge1xuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgIHVwZGF0ZUlucHV0KFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICBwcm9wcy52YWx1ZSxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIHByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgcHJvcHMudHlwZSxcbiAgICAgICAgICBwcm9wcy5uYW1lXG4gICAgICAgICk7XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UgPSBwcm9wcy5uYW1lO1xuICAgICAgICBpZiAoXCJyYWRpb1wiID09PSBwcm9wcy50eXBlICYmIG51bGwgIT0gaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgICAgIGZvciAocHJvcHMgPSB0YXJnZXQ7IHByb3BzLnBhcmVudE5vZGU7ICkgcHJvcHMgPSBwcm9wcy5wYXJlbnROb2RlO1xuICAgICAgICAgIHByb3BzID0gcHJvcHMucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICdpbnB1dFtuYW1lPVwiJyArXG4gICAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgICAgXCJcIiArIGludGVybmFsSW5zdGFuY2VcbiAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICdcIl1bdHlwZT1cInJhZGlvXCJdJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA8IHByb3BzLmxlbmd0aDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIG90aGVyTm9kZSA9IHByb3BzW2ludGVybmFsSW5zdGFuY2VdO1xuICAgICAgICAgICAgaWYgKG90aGVyTm9kZSAhPT0gdGFyZ2V0ICYmIG90aGVyTm9kZS5mb3JtID09PSB0YXJnZXQuZm9ybSkge1xuICAgICAgICAgICAgICB2YXIgb3RoZXJQcm9wcyA9IG90aGVyTm9kZVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgICAgICAgICAgICBpZiAoIW90aGVyUHJvcHMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTApKTtcbiAgICAgICAgICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5jaGVja2VkLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy50eXBlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMubmFtZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlIDwgcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSsrXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKG90aGVyTm9kZSA9IHByb3BzW2ludGVybmFsSW5zdGFuY2VdKSxcbiAgICAgICAgICAgICAgb3RoZXJOb2RlLmZvcm0gPT09IHRhcmdldC5mb3JtICYmIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG90aGVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWsgYTtcbiAgICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgICB1cGRhdGVUZXh0YXJlYSh0YXJnZXQsIHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAoaW50ZXJuYWxJbnN0YW5jZSA9IHByb3BzLnZhbHVlKSxcbiAgICAgICAgICBudWxsICE9IGludGVybmFsSW5zdGFuY2UgJiZcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnModGFyZ2V0LCAhIXByb3BzLm11bHRpcGxlLCBpbnRlcm5hbEluc3RhbmNlLCAhMSk7XG4gICAgfVxuICB9XG59XG52YXIgaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMTtcbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzJDEoZm4sIGEsIGIpIHtcbiAgaWYgKGlzSW5zaWRlRXZlbnRIYW5kbGVyKSByZXR1cm4gZm4oYSwgYik7XG4gIGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITA7XG4gIHRyeSB7XG4gICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGZuKGEpO1xuICAgIHJldHVybiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKFxuICAgICAgKChpc0luc2lkZUV2ZW50SGFuZGxlciA9ICExKSxcbiAgICAgIG51bGwgIT09IHJlc3RvcmVUYXJnZXQgfHwgbnVsbCAhPT0gcmVzdG9yZVF1ZXVlKVxuICAgIClcbiAgICAgIGlmIChcbiAgICAgICAgKGZsdXNoU3luY1dvcmskMSgpLFxuICAgICAgICByZXN0b3JlVGFyZ2V0ICYmXG4gICAgICAgICAgKChhID0gcmVzdG9yZVRhcmdldCksXG4gICAgICAgICAgKGZuID0gcmVzdG9yZVF1ZXVlKSxcbiAgICAgICAgICAocmVzdG9yZVF1ZXVlID0gcmVzdG9yZVRhcmdldCA9IG51bGwpLFxuICAgICAgICAgIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KGEpLFxuICAgICAgICAgIGZuKSlcbiAgICAgIClcbiAgICAgICAgZm9yIChhID0gMDsgYSA8IGZuLmxlbmd0aDsgYSsrKSByZXN0b3JlU3RhdGVPZlRhcmdldChmblthXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgdmFyIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuICBpZiAobnVsbCA9PT0gc3RhdGVOb2RlKSByZXR1cm4gbnVsbDtcbiAgdmFyIHByb3BzID0gc3RhdGVOb2RlW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gIGlmIChudWxsID09PSBwcm9wcykgcmV0dXJuIG51bGw7XG4gIHN0YXRlTm9kZSA9IHByb3BzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICBhOiBzd2l0Y2ggKHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgIGNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6XG4gICAgY2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VEb3duXCI6XG4gICAgY2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlTW92ZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZVVwXCI6XG4gICAgY2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZUVudGVyXCI6XG4gICAgICAocHJvcHMgPSAhcHJvcHMuZGlzYWJsZWQpIHx8XG4gICAgICAgICgoaW5zdCA9IGluc3QudHlwZSksXG4gICAgICAgIChwcm9wcyA9ICEoXG4gICAgICAgICAgXCJidXR0b25cIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwiaW5wdXRcIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcInRleHRhcmVhXCIgPT09IGluc3RcbiAgICAgICAgKSkpO1xuICAgICAgaW5zdCA9ICFwcm9wcztcbiAgICAgIGJyZWFrIGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIGluc3QgPSAhMTtcbiAgfVxuICBpZiAoaW5zdCkgcmV0dXJuIG51bGw7XG4gIGlmIChzdGF0ZU5vZGUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2Ygc3RhdGVOb2RlKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyMzEsIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBzdGF0ZU5vZGUpXG4gICAgKTtcbiAgcmV0dXJuIHN0YXRlTm9kZTtcbn1cbnZhciBjYW5Vc2VET00gPSAhKFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cgfHxcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50IHx8XG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4gICksXG4gIHBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKVxuICB0cnkge1xuICAgIHZhciBvcHRpb25zID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdGlvbnMsIFwicGFzc2l2ZVwiLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbiAgfVxudmFyIHJvb3QgPSBudWxsLFxuICBzdGFydFRleHQgPSBudWxsLFxuICBmYWxsYmFja1RleHQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgaWYgKGZhbGxiYWNrVGV4dCkgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbiAgdmFyIHN0YXJ0LFxuICAgIHN0YXJ0VmFsdWUgPSBzdGFydFRleHQsXG4gICAgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aCxcbiAgICBlbmQsXG4gICAgZW5kVmFsdWUgPSBcInZhbHVlXCIgaW4gcm9vdCA/IHJvb3QudmFsdWUgOiByb290LnRleHRDb250ZW50LFxuICAgIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcbiAgZm9yIChcbiAgICBzdGFydCA9IDA7XG4gICAgc3RhcnQgPCBzdGFydExlbmd0aCAmJiBzdGFydFZhbHVlW3N0YXJ0XSA9PT0gZW5kVmFsdWVbc3RhcnRdO1xuICAgIHN0YXJ0KytcbiAgKTtcbiAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gIGZvciAoXG4gICAgZW5kID0gMTtcbiAgICBlbmQgPD0gbWluRW5kICYmXG4gICAgc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gPT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF07XG4gICAgZW5kKytcbiAgKTtcbiAgcmV0dXJuIChmYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgMSA8IGVuZCA/IDEgLSBlbmQgOiB2b2lkIDApKTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICBcImNoYXJDb2RlXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/ICgobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jaGFyQ29kZSksXG4gICAgICAwID09PSBuYXRpdmVFdmVudCAmJiAxMyA9PT0ga2V5Q29kZSAmJiAobmF0aXZlRXZlbnQgPSAxMykpXG4gICAgOiAobmF0aXZlRXZlbnQgPSBrZXlDb2RlKTtcbiAgMTAgPT09IG5hdGl2ZUV2ZW50ICYmIChuYXRpdmVFdmVudCA9IDEzKTtcbiAgcmV0dXJuIDMyIDw9IG5hdGl2ZUV2ZW50IHx8IDEzID09PSBuYXRpdmVFdmVudCA/IG5hdGl2ZUV2ZW50IDogMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKCkge1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UoKSB7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEludGVyZmFjZSkge1xuICBmdW5jdGlvbiBTeW50aGV0aWNCYXNlRXZlbnQoXG4gICAgcmVhY3ROYW1lLFxuICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgIHRhcmdldEluc3QsXG4gICAgbmF0aXZlRXZlbnQsXG4gICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgKSB7XG4gICAgdGhpcy5fcmVhY3ROYW1lID0gcmVhY3ROYW1lO1xuICAgIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHRoaXMudHlwZSA9IHJlYWN0RXZlbnRUeXBlO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKVxuICAgICAgSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAoKHJlYWN0TmFtZSA9IEludGVyZmFjZVtwcm9wTmFtZV0pLFxuICAgICAgICAodGhpc1twcm9wTmFtZV0gPSByZWFjdE5hbWVcbiAgICAgICAgICA/IHJlYWN0TmFtZShuYXRpdmVFdmVudClcbiAgICAgICAgICA6IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXSkpO1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gKFxuICAgICAgbnVsbCAhPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICA6ICExID09PSBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZVxuICAgIClcbiAgICAgID8gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWVcbiAgICAgIDogZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYXNzaWduKFN5bnRoZXRpY0Jhc2VFdmVudC5wcm90b3R5cGUsIHtcbiAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0XG4gICAgICAgICAgPyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LnJldHVyblZhbHVlICYmIChldmVudC5yZXR1cm5WYWx1ZSA9ICExKSxcbiAgICAgICAgKHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUpKTtcbiAgICB9LFxuICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgIGV2ZW50ICYmXG4gICAgICAgIChldmVudC5zdG9wUHJvcGFnYXRpb25cbiAgICAgICAgICA/IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LmNhbmNlbEJ1YmJsZSAmJlxuICAgICAgICAgICAgKGV2ZW50LmNhbmNlbEJ1YmJsZSA9ICEwKSxcbiAgICAgICAgKHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgcGVyc2lzdDogZnVuY3Rpb24gKCkge30sXG4gICAgaXNQZXJzaXN0ZW50OiBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICB9KTtcbiAgcmV0dXJuIFN5bnRoZXRpY0Jhc2VFdmVudDtcbn1cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgICBldmVudFBoYXNlOiAwLFxuICAgIGJ1YmJsZXM6IDAsXG4gICAgY2FuY2VsYWJsZTogMCxcbiAgICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgIH0sXG4gICAgZGVmYXVsdFByZXZlbnRlZDogMCxcbiAgICBpc1RydXN0ZWQ6IDBcbiAgfSxcbiAgU3ludGhldGljRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChFdmVudEludGVyZmFjZSksXG4gIFVJRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IHZpZXc6IDAsIGRldGFpbDogMCB9KSxcbiAgU3ludGhldGljVUlFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFVJRXZlbnRJbnRlcmZhY2UpLFxuICBsYXN0TW92ZW1lbnRYLFxuICBsYXN0TW92ZW1lbnRZLFxuICBsYXN0TW91c2VFdmVudCxcbiAgTW91c2VFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHNjcmVlblg6IDAsXG4gICAgc2NyZWVuWTogMCxcbiAgICBjbGllbnRYOiAwLFxuICAgIGNsaWVudFk6IDAsXG4gICAgcGFnZVg6IDAsXG4gICAgcGFnZVk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gICAgYnV0dG9uOiAwLFxuICAgIGJ1dHRvbnM6IDAsXG4gICAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdm9pZCAwID09PSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgICAgID8gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnRcbiAgICAgICAgICA/IGV2ZW50LnRvRWxlbWVudFxuICAgICAgICAgIDogZXZlbnQuZnJvbUVsZW1lbnRcbiAgICAgICAgOiBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH0sXG4gICAgbW92ZW1lbnRYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChcIm1vdmVtZW50WFwiIGluIGV2ZW50KSByZXR1cm4gZXZlbnQubW92ZW1lbnRYO1xuICAgICAgZXZlbnQgIT09IGxhc3RNb3VzZUV2ZW50ICYmXG4gICAgICAgIChsYXN0TW91c2VFdmVudCAmJiBcIm1vdXNlbW92ZVwiID09PSBldmVudC50eXBlXG4gICAgICAgICAgPyAoKGxhc3RNb3ZlbWVudFggPSBldmVudC5zY3JlZW5YIC0gbGFzdE1vdXNlRXZlbnQuc2NyZWVuWCksXG4gICAgICAgICAgICAobGFzdE1vdmVtZW50WSA9IGV2ZW50LnNjcmVlblkgLSBsYXN0TW91c2VFdmVudC5zY3JlZW5ZKSlcbiAgICAgICAgICA6IChsYXN0TW92ZW1lbnRZID0gbGFzdE1vdmVtZW50WCA9IDApLFxuICAgICAgICAobGFzdE1vdXNlRXZlbnQgPSBldmVudCkpO1xuICAgICAgcmV0dXJuIGxhc3RNb3ZlbWVudFg7XG4gICAgfSxcbiAgICBtb3ZlbWVudFk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwibW92ZW1lbnRZXCIgaW4gZXZlbnQgPyBldmVudC5tb3ZlbWVudFkgOiBsYXN0TW92ZW1lbnRZO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChNb3VzZUV2ZW50SW50ZXJmYWNlKSxcbiAgRHJhZ0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7IGRhdGFUcmFuc2ZlcjogMCB9KSxcbiAgU3ludGhldGljRHJhZ0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRHJhZ0V2ZW50SW50ZXJmYWNlKSxcbiAgRm9jdXNFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwgeyByZWxhdGVkVGFyZ2V0OiAwIH0pLFxuICBTeW50aGV0aWNGb2N1c0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRm9jdXNFdmVudEludGVyZmFjZSksXG4gIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGFuaW1hdGlvbk5hbWU6IDAsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgcHNldWRvRWxlbWVudDogMFxuICB9KSxcbiAgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChBbmltYXRpb25FdmVudEludGVyZmFjZSksXG4gIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiY2xpcGJvYXJkRGF0YVwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICAgICAgICA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwgeyBkYXRhOiAwIH0pLFxuICBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSksXG4gIG5vcm1hbGl6ZUtleSA9IHtcbiAgICBFc2M6IFwiRXNjYXBlXCIsXG4gICAgU3BhY2ViYXI6IFwiIFwiLFxuICAgIExlZnQ6IFwiQXJyb3dMZWZ0XCIsXG4gICAgVXA6IFwiQXJyb3dVcFwiLFxuICAgIFJpZ2h0OiBcIkFycm93UmlnaHRcIixcbiAgICBEb3duOiBcIkFycm93RG93blwiLFxuICAgIERlbDogXCJEZWxldGVcIixcbiAgICBXaW46IFwiT1NcIixcbiAgICBNZW51OiBcIkNvbnRleHRNZW51XCIsXG4gICAgQXBwczogXCJDb250ZXh0TWVudVwiLFxuICAgIFNjcm9sbDogXCJTY3JvbGxMb2NrXCIsXG4gICAgTW96UHJpbnRhYmxlS2V5OiBcIlVuaWRlbnRpZmllZFwiXG4gIH0sXG4gIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICAgIDg6IFwiQmFja3NwYWNlXCIsXG4gICAgOTogXCJUYWJcIixcbiAgICAxMjogXCJDbGVhclwiLFxuICAgIDEzOiBcIkVudGVyXCIsXG4gICAgMTY6IFwiU2hpZnRcIixcbiAgICAxNzogXCJDb250cm9sXCIsXG4gICAgMTg6IFwiQWx0XCIsXG4gICAgMTk6IFwiUGF1c2VcIixcbiAgICAyMDogXCJDYXBzTG9ja1wiLFxuICAgIDI3OiBcIkVzY2FwZVwiLFxuICAgIDMyOiBcIiBcIixcbiAgICAzMzogXCJQYWdlVXBcIixcbiAgICAzNDogXCJQYWdlRG93blwiLFxuICAgIDM1OiBcIkVuZFwiLFxuICAgIDM2OiBcIkhvbWVcIixcbiAgICAzNzogXCJBcnJvd0xlZnRcIixcbiAgICAzODogXCJBcnJvd1VwXCIsXG4gICAgMzk6IFwiQXJyb3dSaWdodFwiLFxuICAgIDQwOiBcIkFycm93RG93blwiLFxuICAgIDQ1OiBcIkluc2VydFwiLFxuICAgIDQ2OiBcIkRlbGV0ZVwiLFxuICAgIDExMjogXCJGMVwiLFxuICAgIDExMzogXCJGMlwiLFxuICAgIDExNDogXCJGM1wiLFxuICAgIDExNTogXCJGNFwiLFxuICAgIDExNjogXCJGNVwiLFxuICAgIDExNzogXCJGNlwiLFxuICAgIDExODogXCJGN1wiLFxuICAgIDExOTogXCJGOFwiLFxuICAgIDEyMDogXCJGOVwiLFxuICAgIDEyMTogXCJGMTBcIixcbiAgICAxMjI6IFwiRjExXCIsXG4gICAgMTIzOiBcIkYxMlwiLFxuICAgIDE0NDogXCJOdW1Mb2NrXCIsXG4gICAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgICAyMjQ6IFwiTWV0YVwiXG4gIH0sXG4gIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAgIEFsdDogXCJhbHRLZXlcIixcbiAgICBDb250cm9sOiBcImN0cmxLZXlcIixcbiAgICBNZXRhOiBcIm1ldGFLZXlcIixcbiAgICBTaGlmdDogXCJzaGlmdEtleVwiXG4gIH07XG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgbmF0aXZlRXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZVxuICAgID8gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpXG4gICAgOiAoa2V5QXJnID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXSlcbiAgICAgID8gISFuYXRpdmVFdmVudFtrZXlBcmddXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAga2V5OiBmdW5jdGlvbiAobmF0aXZlRXZlbnQpIHtcbiAgICAgIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICAgICAgaWYgKFwiVW5pZGVudGlmaWVkXCIgIT09IGtleSkgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGVcbiAgICAgICAgPyAoKG5hdGl2ZUV2ZW50ID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkpLFxuICAgICAgICAgIDEzID09PSBuYXRpdmVFdmVudCA/IFwiRW50ZXJcIiA6IFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQpKVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBuYXRpdmVFdmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICAgID8gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgXCJVbmlkZW50aWZpZWRcIlxuICAgICAgICAgIDogXCJcIjtcbiAgICB9LFxuICAgIGNvZGU6IDAsXG4gICAgbG9jYXRpb246IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICByZXBlYXQ6IDAsXG4gICAgbG9jYWxlOiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBjaGFyQ29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudCkgOiAwO1xuICAgIH0sXG4gICAga2V5Q29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlkb3duXCIgPT09IGV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICA6IDA7XG4gICAgfSxcbiAgICB3aGljaDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudClcbiAgICAgICAgOiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/IGV2ZW50LmtleUNvZGVcbiAgICAgICAgICA6IDA7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBQb2ludGVyRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBwb2ludGVySWQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHByZXNzdXJlOiAwLFxuICAgIHRhbmdlbnRpYWxQcmVzc3VyZTogMCxcbiAgICB0aWx0WDogMCxcbiAgICB0aWx0WTogMCxcbiAgICB0d2lzdDogMCxcbiAgICBwb2ludGVyVHlwZTogMCxcbiAgICBpc1ByaW1hcnk6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1BvaW50ZXJFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFBvaW50ZXJFdmVudEludGVyZmFjZSksXG4gIFRvdWNoRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICB0b3VjaGVzOiAwLFxuICAgIHRhcmdldFRvdWNoZXM6IDAsXG4gICAgY2hhbmdlZFRvdWNoZXM6IDAsXG4gICAgYWx0S2V5OiAwLFxuICAgIG1ldGFLZXk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAgfSksXG4gIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb3VjaEV2ZW50SW50ZXJmYWNlKSxcbiAgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIHByb3BlcnR5TmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpLFxuICBXaGVlbEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImRlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuZGVsdGFYXG4gICAgICAgIDogXCJ3aGVlbERlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVhcbiAgICAgICAgICA6IDA7XG4gICAgfSxcbiAgICBkZWx0YVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVlcbiAgICAgICAgOiBcIndoZWVsRGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWVxuICAgICAgICAgIDogXCJ3aGVlbERlbHRhXCIgaW4gZXZlbnRcbiAgICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFcbiAgICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWjogMCxcbiAgICBkZWx0YU1vZGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1doZWVsRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChXaGVlbEV2ZW50SW50ZXJmYWNlKSxcbiAgVG9nZ2xlRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgbmV3U3RhdGU6IDAsXG4gICAgb2xkU3RhdGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RvZ2dsZUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVG9nZ2xlRXZlbnRJbnRlcmZhY2UpLFxuICBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl0sXG4gIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSBjYW5Vc2VET00gJiYgXCJDb21wb3NpdGlvbkV2ZW50XCIgaW4gd2luZG93LFxuICBkb2N1bWVudE1vZGUgPSBudWxsO1xuY2FuVXNlRE9NICYmXG4gIFwiZG9jdW1lbnRNb2RlXCIgaW4gZG9jdW1lbnQgJiZcbiAgKGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBjYW5Vc2VET00gJiYgXCJUZXh0RXZlbnRcIiBpbiB3aW5kb3cgJiYgIWRvY3VtZW50TW9kZSxcbiAgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPVxuICAgIGNhblVzZURPTSAmJlxuICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fFxuICAgICAgKGRvY3VtZW50TW9kZSAmJiA4IDwgZG9jdW1lbnRNb2RlICYmIDExID49IGRvY3VtZW50TW9kZSkpLFxuICBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMiksXG4gIGhhc1NwYWNlS2V5cHJlc3MgPSAhMTtcbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgICByZXR1cm4gLTEgIT09IEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpO1xuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICByZXR1cm4gMjI5ICE9PSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHJldHVybiAhMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICExO1xuICB9XG59XG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5hdGl2ZUV2ZW50ICYmIFwiZGF0YVwiIGluIG5hdGl2ZUV2ZW50XG4gICAgPyBuYXRpdmVFdmVudC5kYXRhXG4gICAgOiBudWxsO1xufVxudmFyIGlzQ29tcG9zaW5nID0gITE7XG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmICgzMiAhPT0gbmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBudWxsO1xuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9ICEwO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG4gICAgY2FzZSBcInRleHRJbnB1dFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGRvbUV2ZW50TmFtZSA9IG5hdGl2ZUV2ZW50LmRhdGEpLFxuICAgICAgICBkb21FdmVudE5hbWUgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcyA/IG51bGwgOiBkb21FdmVudE5hbWVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBpZiAoaXNDb21wb3NpbmcpXG4gICAgcmV0dXJuIFwiY29tcG9zaXRpb25lbmRcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgICAoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiZcbiAgICAgICAgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKVxuICAgICAgPyAoKGRvbUV2ZW50TmFtZSA9IGdldERhdGEoKSksXG4gICAgICAgIChmYWxsYmFja1RleHQgPSBzdGFydFRleHQgPSByb290ID0gbnVsbCksXG4gICAgICAgIChpc0NvbXBvc2luZyA9ICExKSxcbiAgICAgICAgZG9tRXZlbnROYW1lKVxuICAgICAgOiBudWxsO1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICBpZiAoXG4gICAgICAgICEobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgfHxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KVxuICAgICAgKSB7XG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5jaGFyICYmIDEgPCBuYXRpdmVFdmVudC5jaGFyLmxlbmd0aClcbiAgICAgICAgICByZXR1cm4gbmF0aXZlRXZlbnQuY2hhcjtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJiBcImtvXCIgIT09IG5hdGl2ZUV2ZW50LmxvY2FsZVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gIGNvbG9yOiAhMCxcbiAgZGF0ZTogITAsXG4gIGRhdGV0aW1lOiAhMCxcbiAgXCJkYXRldGltZS1sb2NhbFwiOiAhMCxcbiAgZW1haWw6ICEwLFxuICBtb250aDogITAsXG4gIG51bWJlcjogITAsXG4gIHBhc3N3b3JkOiAhMCxcbiAgcmFuZ2U6ICEwLFxuICBzZWFyY2g6ICEwLFxuICB0ZWw6ICEwLFxuICB0ZXh0OiAhMCxcbiAgdGltZTogITAsXG4gIHVybDogITAsXG4gIHdlZWs6ICEwXG59O1xuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIFwiaW5wdXRcIiA9PT0gbm9kZU5hbWVcbiAgICA/ICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdXG4gICAgOiBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lXG4gICAgICA/ICEwXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICBkaXNwYXRjaFF1ZXVlLFxuICBpbnN0LFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0XG4pIHtcbiAgcmVzdG9yZVRhcmdldFxuICAgID8gcmVzdG9yZVF1ZXVlXG4gICAgICA/IHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldClcbiAgICAgIDogKHJlc3RvcmVRdWV1ZSA9IFt0YXJnZXRdKVxuICAgIDogKHJlc3RvcmVUYXJnZXQgPSB0YXJnZXQpO1xuICBpbnN0ID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGluc3QsIFwib25DaGFuZ2VcIik7XG4gIDAgPCBpbnN0Lmxlbmd0aCAmJlxuICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcIm9uQ2hhbmdlXCIsXG4gICAgICBcImNoYW5nZVwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgdGFyZ2V0XG4gICAgKSksXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGluc3QgfSkpO1xufVxudmFyIGFjdGl2ZUVsZW1lbnQkMSA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGRpc3BhdGNoUXVldWUpIHtcbiAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgMCk7XG59XG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCkge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCk7XG4gIGlmICh1cGRhdGVWYWx1ZUlmQ2hhbmdlZCh0YXJnZXROb2RlKSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpIHJldHVybiB0YXJnZXRJbnN0O1xufVxudmFyIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9ICExO1xuaWYgKGNhblVzZURPTSkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODI7XG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB2YXIgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTcgPSBcIm9uaW5wdXRcIiBpbiBkb2N1bWVudDtcbiAgICBpZiAoIWlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE3KSB7XG4gICAgICB2YXIgZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE4LnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIiwgXCJyZXR1cm47XCIpO1xuICAgICAgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTcgPVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE4Lm9uaW5wdXQ7XG4gICAgfVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgyID0gaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTc7XG4gIH0gZWxzZSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MiA9ICExO1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgyICYmXG4gICAgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgOSA8IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG59XG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgYWN0aXZlRWxlbWVudCQxICYmXG4gICAgKGFjdGl2ZUVsZW1lbnQkMS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpLFxuICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gYWN0aXZlRWxlbWVudCQxID0gbnVsbCkpO1xufVxuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKFxuICAgIFwidmFsdWVcIiA9PT0gbmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICYmXG4gICAgZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpXG4gICkge1xuICAgIHZhciBkaXNwYXRjaFF1ZXVlID0gW107XG4gICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0JDEsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KVxuICAgICk7XG4gICAgYmF0Y2hlZFVwZGF0ZXMkMShydW5FdmVudEluQmF0Y2gsIGRpc3BhdGNoUXVldWUpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgXCJmb2N1c2luXCIgPT09IGRvbUV2ZW50TmFtZVxuICAgID8gKHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCksXG4gICAgICAoYWN0aXZlRWxlbWVudCQxID0gdGFyZ2V0KSxcbiAgICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gdGFyZ2V0SW5zdCksXG4gICAgICBhY3RpdmVFbGVtZW50JDEuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKSlcbiAgICA6IFwiZm9jdXNvdXRcIiA9PT0gZG9tRXZlbnROYW1lICYmIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsKGRvbUV2ZW50TmFtZSkge1xuICBpZiAoXG4gICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgXCJrZXl1cFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleWRvd25cIiA9PT0gZG9tRXZlbnROYW1lXG4gIClcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNsaWNrXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImlucHV0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgcmV0dXJuICh4ID09PSB5ICYmICgwICE9PSB4IHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpO1xufVxudmFyIG9iamVjdElzID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogaXM7XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqZWN0SXMob2JqQSwgb2JqQikpIHJldHVybiAhMDtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpBIHx8XG4gICAgbnVsbCA9PT0gb2JqQSB8fFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpCIHx8XG4gICAgbnVsbCA9PT0gb2JqQlxuICApXG4gICAgcmV0dXJuICExO1xuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKSxcbiAgICBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiAhMTtcbiAgZm9yIChrZXlzQiA9IDA7IGtleXNCIDwga2V5c0EubGVuZ3RoOyBrZXlzQisrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzQVtrZXlzQl07XG4gICAgaWYgKFxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwgY3VycmVudEtleSkgfHxcbiAgICAgICFvYmplY3RJcyhvYmpBW2N1cnJlbnRLZXldLCBvYmpCW2N1cnJlbnRLZXldKVxuICAgIClcbiAgICAgIHJldHVybiAhMTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIGZvciAoOyBub2RlICYmIG5vZGUuZmlyc3RDaGlsZDsgKSBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHJvb3QgPSAwO1xuICBmb3IgKHZhciBub2RlRW5kOyBub2RlOyApIHtcbiAgICBpZiAoMyA9PT0gbm9kZS5ub2RlVHlwZSkge1xuICAgICAgbm9kZUVuZCA9IHJvb3QgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIGlmIChyb290IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldClcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogbm9kZSwgb2Zmc2V0OiBvZmZzZXQgLSByb290IH07XG4gICAgICByb290ID0gbm9kZUVuZDtcbiAgICB9XG4gICAgYToge1xuICAgICAgZm9yICg7IG5vZGU7ICkge1xuICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSB2b2lkIDA7XG4gICAgfVxuICAgIG5vZGUgPSBnZXRMZWFmTm9kZShub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIHJldHVybiBvdXRlck5vZGUgJiYgaW5uZXJOb2RlXG4gICAgPyBvdXRlck5vZGUgPT09IGlubmVyTm9kZVxuICAgICAgPyAhMFxuICAgICAgOiBvdXRlck5vZGUgJiYgMyA9PT0gb3V0ZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgID8gITFcbiAgICAgICAgOiBpbm5lck5vZGUgJiYgMyA9PT0gaW5uZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgICAgPyBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICA6IFwiY29udGFpbnNcIiBpbiBvdXRlck5vZGVcbiAgICAgICAgICAgID8gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSlcbiAgICAgICAgICAgIDogb3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG4gICAgICAgICAgICAgID8gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNilcbiAgICAgICAgICAgICAgOiAhMVxuICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50RGVlcChjb250YWluZXJJbmZvKSB7XG4gIGNvbnRhaW5lckluZm8gPVxuICAgIG51bGwgIT0gY29udGFpbmVySW5mbyAmJlxuICAgIG51bGwgIT0gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50ICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgID8gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XG4gICAgICA6IHdpbmRvdztcbiAgZm9yIChcbiAgICB2YXIgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gICAgZWxlbWVudCBpbnN0YW5jZW9mIGNvbnRhaW5lckluZm8uSFRNTElGcmFtZUVsZW1lbnQ7XG5cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZWxlbWVudC5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICB9XG4gICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgY29udGFpbmVySW5mbyA9IGVsZW1lbnQuY29udGVudFdpbmRvdztcbiAgICBlbHNlIGJyZWFrO1xuICAgIGVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KGNvbnRhaW5lckluZm8uZG9jdW1lbnQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChcbiAgICBub2RlTmFtZSAmJlxuICAgICgoXCJpbnB1dFwiID09PSBub2RlTmFtZSAmJlxuICAgICAgKFwidGV4dFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJzZWFyY2hcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidGVsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInVybFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJwYXNzd29yZFwiID09PSBlbGVtLnR5cGUpKSB8fFxuICAgICAgXCJ0ZXh0YXJlYVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgXCJ0cnVlXCIgPT09IGVsZW0uY29udGVudEVkaXRhYmxlKVxuICApO1xufVxudmFyIHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCA9XG4gICAgY2FuVXNlRE9NICYmIFwiZG9jdW1lbnRNb2RlXCIgaW4gZG9jdW1lbnQgJiYgMTEgPj0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFxuICBhY3RpdmVFbGVtZW50ID0gbnVsbCxcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsLFxuICBsYXN0U2VsZWN0aW9uID0gbnVsbCxcbiAgbW91c2VEb3duID0gITE7XG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGRvYyA9XG4gICAgbmF0aXZlRXZlbnRUYXJnZXQud2luZG93ID09PSBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgPyBuYXRpdmVFdmVudFRhcmdldC5kb2N1bWVudFxuICAgICAgOiA5ID09PSBuYXRpdmVFdmVudFRhcmdldC5ub2RlVHlwZVxuICAgICAgICA/IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgIDogbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgbW91c2VEb3duIHx8XG4gICAgbnVsbCA9PSBhY3RpdmVFbGVtZW50IHx8XG4gICAgYWN0aXZlRWxlbWVudCAhPT0gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHx8XG4gICAgKChkb2MgPSBhY3RpdmVFbGVtZW50KSxcbiAgICBcInNlbGVjdGlvblN0YXJ0XCIgaW4gZG9jICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhkb2MpXG4gICAgICA/IChkb2MgPSB7IHN0YXJ0OiBkb2Muc2VsZWN0aW9uU3RhcnQsIGVuZDogZG9jLnNlbGVjdGlvbkVuZCB9KVxuICAgICAgOiAoKGRvYyA9IChcbiAgICAgICAgICAoZG9jLm93bmVyRG9jdW1lbnQgJiYgZG9jLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIHx8XG4gICAgICAgICAgd2luZG93XG4gICAgICAgICkuZ2V0U2VsZWN0aW9uKCkpLFxuICAgICAgICAoZG9jID0ge1xuICAgICAgICAgIGFuY2hvck5vZGU6IGRvYy5hbmNob3JOb2RlLFxuICAgICAgICAgIGFuY2hvck9mZnNldDogZG9jLmFuY2hvck9mZnNldCxcbiAgICAgICAgICBmb2N1c05vZGU6IGRvYy5mb2N1c05vZGUsXG4gICAgICAgICAgZm9jdXNPZmZzZXQ6IGRvYy5mb2N1c09mZnNldFxuICAgICAgICB9KSksXG4gICAgKGxhc3RTZWxlY3Rpb24gJiYgc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGRvYykpIHx8XG4gICAgICAoKGxhc3RTZWxlY3Rpb24gPSBkb2MpLFxuICAgICAgKGRvYyA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyhhY3RpdmVFbGVtZW50SW5zdCwgXCJvblNlbGVjdFwiKSksXG4gICAgICAwIDwgZG9jLmxlbmd0aCAmJlxuICAgICAgICAoKG5hdGl2ZUV2ZW50ID0gbmV3IFN5bnRoZXRpY0V2ZW50KFxuICAgICAgICAgIFwib25TZWxlY3RcIixcbiAgICAgICAgICBcInNlbGVjdFwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgKSksXG4gICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBuYXRpdmVFdmVudCwgbGlzdGVuZXJzOiBkb2MgfSksXG4gICAgICAgIChuYXRpdmVFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50KSkpKTtcbn1cbmZ1bmN0aW9uIG1ha2VQcmVmaXhNYXAoc3R5bGVQcm9wLCBldmVudE5hbWUpIHtcbiAgdmFyIHByZWZpeGVzID0ge307XG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1tcIldlYmtpdFwiICsgc3R5bGVQcm9wXSA9IFwid2Via2l0XCIgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzW1wiTW96XCIgKyBzdHlsZVByb3BdID0gXCJtb3pcIiArIGV2ZW50TmFtZTtcbiAgcmV0dXJuIHByZWZpeGVzO1xufVxudmFyIHZlbmRvclByZWZpeGVzID0ge1xuICAgIGFuaW1hdGlvbmVuZDogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvbkVuZFwiKSxcbiAgICBhbmltYXRpb25pdGVyYXRpb246IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25JdGVyYXRpb25cIiksXG4gICAgYW5pbWF0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25TdGFydFwiKSxcbiAgICB0cmFuc2l0aW9ucnVuOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25SdW5cIiksXG4gICAgdHJhbnNpdGlvbnN0YXJ0OiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25TdGFydFwiKSxcbiAgICB0cmFuc2l0aW9uY2FuY2VsOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25DYW5jZWxcIiksXG4gICAgdHJhbnNpdGlvbmVuZDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uRW5kXCIpXG4gIH0sXG4gIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9LFxuICBzdHlsZSA9IHt9O1xuY2FuVXNlRE9NICYmXG4gICgoc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlKSxcbiAgXCJBbmltYXRpb25FdmVudFwiIGluIHdpbmRvdyB8fFxuICAgIChkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcbiAgXCJUcmFuc2l0aW9uRXZlbnRcIiBpbiB3aW5kb3cgfHxcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICBpZiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0pIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXTtcbiAgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSByZXR1cm4gZXZlbnROYW1lO1xuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXSxcbiAgICBzdHlsZVByb3A7XG4gIGZvciAoc3R5bGVQcm9wIGluIHByZWZpeE1hcClcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKVxuICAgICAgcmV0dXJuIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSA9IHByZWZpeE1hcFtzdHlsZVByb3BdKTtcbiAgcmV0dXJuIGV2ZW50TmFtZTtcbn1cbnZhciBBTklNQVRJT05fRU5EID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25lbmRcIiksXG4gIEFOSU1BVElPTl9JVEVSQVRJT04gPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxcbiAgQU5JTUFUSU9OX1NUQVJUID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25zdGFydFwiKSxcbiAgVFJBTlNJVElPTl9SVU4gPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25ydW5cIiksXG4gIFRSQU5TSVRJT05fU1RBUlQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25zdGFydFwiKSxcbiAgVFJBTlNJVElPTl9DQU5DRUwgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25jYW5jZWxcIiksXG4gIFRSQU5TSVRJT05fRU5EID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uZW5kXCIpLFxuICB0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcyA9IG5ldyBNYXAoKSxcbiAgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHMgPVxuICAgIFwiYWJvcnQgYXV4Q2xpY2sgYmVmb3JlVG9nZ2xlIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICk7XG5zaW1wbGVFdmVudFBsdWdpbkV2ZW50cy5wdXNoKFwic2Nyb2xsRW5kXCIpO1xuZnVuY3Rpb24gcmVnaXN0ZXJTaW1wbGVFdmVudChkb21FdmVudE5hbWUsIHJlYWN0TmFtZSkge1xuICB0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcy5zZXQoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUpO1xuICByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVhY3ROYW1lLCBbZG9tRXZlbnROYW1lXSk7XG59XG52YXIgQ2FwdHVyZWRTdGFja3MgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZSkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmIG51bGwgIT09IHZhbHVlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gQ2FwdHVyZWRTdGFja3MuZ2V0KHZhbHVlKTtcbiAgICBpZiAodm9pZCAwICE9PSBleGlzdGluZykgcmV0dXJuIGV4aXN0aW5nO1xuICAgIHNvdXJjZSA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gICAgfTtcbiAgICBDYXB0dXJlZFN0YWNrcy5zZXQodmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZSlcbiAgfTtcbn1cbnZhciBjb25jdXJyZW50UXVldWVzID0gW10sXG4gIGNvbmN1cnJlbnRRdWV1ZXNJbmRleCA9IDAsXG4gIGNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyA9IDA7XG5mdW5jdGlvbiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCkge1xuICBmb3IgKFxuICAgIHZhciBlbmRJbmRleCA9IGNvbmN1cnJlbnRRdWV1ZXNJbmRleCxcbiAgICAgIGkgPSAoY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCk7XG4gICAgaSA8IGVuZEluZGV4O1xuXG4gICkge1xuICAgIHZhciBmaWJlciA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgcXVldWUgPSBjb25jdXJyZW50UXVldWVzW2ldO1xuICAgIGNvbmN1cnJlbnRRdWV1ZXNbaSsrXSA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgbGFuZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUgJiYgbnVsbCAhPT0gdXBkYXRlKSB7XG4gICAgICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gICAgICBudWxsID09PSBwZW5kaW5nXG4gICAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gICAgICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgIH1cbiAgICAwICE9PSBsYW5lICYmIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCB1cGRhdGUsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBmaWJlcjtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBxdWV1ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSB1cGRhdGU7XG4gIGNvbmN1cnJlbnRRdWV1ZXNbY29uY3VycmVudFF1ZXVlc0luZGV4KytdID0gbGFuZTtcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzIHw9IGxhbmU7XG4gIGZpYmVyLmxhbmVzIHw9IGxhbmU7XG4gIGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmaWJlciAmJiAoZmliZXIubGFuZXMgfD0gbGFuZSk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBsYW5lKSB7XG4gIGVucXVldWVVcGRhdGUkMShmaWJlciwgbnVsbCwgbnVsbCwgbGFuZSk7XG4gIHJldHVybiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KHNvdXJjZUZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgc291cmNlRmliZXIubGFuZXMgfD0gbGFuZTtcbiAgdmFyIGFsdGVybmF0ZSA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUubGFuZXMgfD0gbGFuZSk7XG4gIGZvciAodmFyIGlzSGlkZGVuID0gITEsIHBhcmVudCA9IHNvdXJjZUZpYmVyLnJldHVybjsgbnVsbCAhPT0gcGFyZW50OyApXG4gICAgKHBhcmVudC5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgKGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGUpLFxuICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSBsYW5lKSxcbiAgICAgIDIyID09PSBwYXJlbnQudGFnICYmXG4gICAgICAgICgoc291cmNlRmliZXIgPSBwYXJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXIgfHwgc291cmNlRmliZXIuX3Zpc2liaWxpdHkgJiAxIHx8IChpc0hpZGRlbiA9ICEwKSksXG4gICAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5yZXR1cm4pO1xuICByZXR1cm4gMyA9PT0gc291cmNlRmliZXIudGFnXG4gICAgPyAoKHBhcmVudCA9IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSksXG4gICAgICBpc0hpZGRlbiAmJlxuICAgICAgICBudWxsICE9PSB1cGRhdGUgJiZcbiAgICAgICAgKChpc0hpZGRlbiA9IDMxIC0gY2x6MzIobGFuZSkpLFxuICAgICAgICAoc291cmNlRmliZXIgPSBwYXJlbnQuaGlkZGVuVXBkYXRlcyksXG4gICAgICAgIChhbHRlcm5hdGUgPSBzb3VyY2VGaWJlcltpc0hpZGRlbl0pLFxuICAgICAgICBudWxsID09PSBhbHRlcm5hdGVcbiAgICAgICAgICA/IChzb3VyY2VGaWJlcltpc0hpZGRlbl0gPSBbdXBkYXRlXSlcbiAgICAgICAgICA6IGFsdGVybmF0ZS5wdXNoKHVwZGF0ZSksXG4gICAgICAgICh1cGRhdGUubGFuZSA9IGxhbmUgfCA1MzY4NzA5MTIpKSxcbiAgICAgIHBhcmVudClcbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKHNvdXJjZUZpYmVyKSB7XG4gIGlmICg1MCA8IG5lc3RlZFVwZGF0ZUNvdW50KVxuICAgIHRocm93IChcbiAgICAgICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSxcbiAgICAgIChyb290V2l0aE5lc3RlZFVwZGF0ZXMgPSBudWxsKSxcbiAgICAgIEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg1KSkpXG4gICAgKTtcbiAgZm9yICh2YXIgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLCAocGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuKTtcbiAgcmV0dXJuIDMgPT09IHNvdXJjZUZpYmVyLnRhZyA/IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSA6IG51bGw7XG59XG52YXIgZW1wdHlDb250ZXh0T2JqZWN0ID0ge307XG5mdW5jdGlvbiBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMuc2libGluZyA9XG4gICAgdGhpcy5jaGlsZCA9XG4gICAgdGhpcy5yZXR1cm4gPVxuICAgIHRoaXMuc3RhdGVOb2RlID1cbiAgICB0aGlzLnR5cGUgPVxuICAgIHRoaXMuZWxlbWVudFR5cGUgPVxuICAgICAgbnVsbDtcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMucmVmQ2xlYW51cCA9IHRoaXMucmVmID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG4gIHRoaXMuZGVwZW5kZW5jaWVzID1cbiAgICB0aGlzLm1lbW9pemVkU3RhdGUgPVxuICAgIHRoaXMudXBkYXRlUXVldWUgPVxuICAgIHRoaXMubWVtb2l6ZWRQcm9wcyA9XG4gICAgICBudWxsO1xuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLnN1YnRyZWVGbGFncyA9IHRoaXMuZmxhZ3MgPSAwO1xuICB0aGlzLmRlbGV0aW9ucyA9IG51bGw7XG4gIHRoaXMuY2hpbGRMYW5lcyA9IHRoaXMubGFuZXMgPSAwO1xuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckltcGxDbGFzcyh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHJldHVybiBuZXcgRmliZXJOb2RlKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xufVxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISghQ29tcG9uZW50IHx8ICFDb21wb25lbnQuaXNSZWFjdENvbXBvbmVudCk7XG59XG5mdW5jdGlvbiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBwZW5kaW5nUHJvcHMpIHtcbiAgdmFyIHdvcmtJblByb2dyZXNzID0gY3VycmVudC5hbHRlcm5hdGU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzXG4gICAgPyAoKHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgIGN1cnJlbnQudGFnLFxuICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgIGN1cnJlbnQua2V5LFxuICAgICAgICBjdXJyZW50Lm1vZGVcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID0gY3VycmVudC5lbGVtZW50VHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQpLFxuICAgICAgKGN1cnJlbnQuYWx0ZXJuYXRlID0gd29ya0luUHJvZ3Jlc3MpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IGN1cnJlbnQuZmxhZ3MgJiA2NTAxMTcxMjtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQ7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgcGVuZGluZ1Byb3BzID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9XG4gICAgbnVsbCA9PT0gcGVuZGluZ1Byb3BzXG4gICAgICA/IG51bGxcbiAgICAgIDogeyBsYW5lczogcGVuZGluZ1Byb3BzLmxhbmVzLCBmaXJzdENvbnRleHQ6IHBlbmRpbmdQcm9wcy5maXJzdENvbnRleHQgfTtcbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xufVxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzcyh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gNjUwMTE3MTQ7XG4gIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICBudWxsID09PSBjdXJyZW50XG4gICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBudWxsKSlcbiAgICA6ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAocmVuZGVyTGFuZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICAgICAgbnVsbCA9PT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgbGFuZXM6IHJlbmRlckxhbmVzLmxhbmVzLFxuICAgICAgICAgICAgICBmaXJzdENvbnRleHQ6IHJlbmRlckxhbmVzLmZpcnN0Q29udGV4dFxuICAgICAgICAgICAgfSkpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gIHR5cGUsXG4gIGtleSxcbiAgcGVuZGluZ1Byb3BzLFxuICBvd25lcixcbiAgbW9kZSxcbiAgbGFuZXNcbikge1xuICB2YXIgZmliZXJUYWcgPSAwO1xuICBvd25lciA9IHR5cGU7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKSBzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiYgKGZpYmVyVGFnID0gMSk7XG4gIGVsc2UgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIGZpYmVyVGFnID0gaXNIb3N0SG9pc3RhYmxlVHlwZShcbiAgICAgIHR5cGUsXG4gICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudFxuICAgIClcbiAgICAgID8gMjZcbiAgICAgIDogXCJodG1sXCIgPT09IHR5cGUgfHwgXCJoZWFkXCIgPT09IHR5cGUgfHwgXCJib2R5XCIgPT09IHR5cGVcbiAgICAgICAgPyAyN1xuICAgICAgICA6IDU7XG4gIGVsc2VcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQUNUSVZJVFlfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMxLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfQUNUSVZJVFlfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQocGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSA4O1xuICAgICAgICBtb2RlIHw9IDI0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IDIpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEzLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxOSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlICYmIG51bGwgIT09IHR5cGUpXG4gICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSA5O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxNjtcbiAgICAgICAgICAgICAgb3duZXIgPSBudWxsO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXJUYWcgPSAyOTtcbiAgICAgICAgcGVuZGluZ1Byb3BzID0gRXJyb3IoXG4gICAgICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzAsIG51bGwgPT09IHR5cGUgPyBcIm51bGxcIiA6IHR5cGVvZiB0eXBlLCBcIlwiKVxuICAgICAgICApO1xuICAgICAgICBvd25lciA9IG51bGw7XG4gICAgfVxuICBrZXkgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhmaWJlclRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuICBrZXkuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBrZXkudHlwZSA9IG93bmVyO1xuICBrZXkubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnRzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIGVsZW1lbnRzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNywgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGVsZW1lbnRzLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBlbGVtZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVRleHQoY29udGVudCwgbW9kZSwgbGFuZXMpIHtcbiAgY29udGVudCA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDYsIGNvbnRlbnQsIG51bGwsIG1vZGUpO1xuICBjb250ZW50LmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBjb250ZW50O1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgbW9kZSwgbGFuZXMpIHtcbiAgbW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKFxuICAgIDQsXG4gICAgbnVsbCAhPT0gcG9ydGFsLmNoaWxkcmVuID8gcG9ydGFsLmNoaWxkcmVuIDogW10sXG4gICAgcG9ydGFsLmtleSxcbiAgICBtb2RlXG4gICk7XG4gIG1vZGUubGFuZXMgPSBsYW5lcztcbiAgbW9kZS5zdGF0ZU5vZGUgPSB7XG4gICAgY29udGFpbmVySW5mbzogcG9ydGFsLmNvbnRhaW5lckluZm8sXG4gICAgcGVuZGluZ0NoaWxkcmVuOiBudWxsLFxuICAgIGltcGxlbWVudGF0aW9uOiBwb3J0YWwuaW1wbGVtZW50YXRpb25cbiAgfTtcbiAgcmV0dXJuIG1vZGU7XG59XG52YXIgZm9ya1N0YWNrID0gW10sXG4gIGZvcmtTdGFja0luZGV4ID0gMCxcbiAgdHJlZUZvcmtQcm92aWRlciA9IG51bGwsXG4gIHRyZWVGb3JrQ291bnQgPSAwLFxuICBpZFN0YWNrID0gW10sXG4gIGlkU3RhY2tJbmRleCA9IDAsXG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSBudWxsLFxuICB0cmVlQ29udGV4dElkID0gMSxcbiAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IFwiXCI7XG5mdW5jdGlvbiBwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4pIHtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtDb3VudDtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtQcm92aWRlcjtcbiAgdHJlZUZvcmtQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB0cmVlRm9ya0NvdW50ID0gdG90YWxDaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4sIGluZGV4KSB7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRJZDtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0UHJvdmlkZXI7XG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIGJhc2VJZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICB2YXIgYmFzZUxlbmd0aCA9IDMyIC0gY2x6MzIoYmFzZUlkV2l0aExlYWRpbmdCaXQpIC0gMTtcbiAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJj0gfigxIDw8IGJhc2VMZW5ndGgpO1xuICBpbmRleCArPSAxO1xuICB2YXIgbGVuZ3RoID0gMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGg7XG4gIGlmICgzMCA8IGxlbmd0aCkge1xuICAgIHZhciBudW1iZXJPZk92ZXJmbG93Qml0cyA9IGJhc2VMZW5ndGggLSAoYmFzZUxlbmd0aCAlIDUpO1xuICAgIGxlbmd0aCA9IChcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ICZcbiAgICAgICgoMSA8PCBudW1iZXJPZk92ZXJmbG93Qml0cykgLSAxKVxuICAgICkudG9TdHJpbmcoMzIpO1xuICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ID4+PSBudW1iZXJPZk92ZXJmbG93Qml0cztcbiAgICBiYXNlTGVuZ3RoIC09IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgKDMyIC0gY2x6MzIodG90YWxDaGlsZHJlbikgKyBiYXNlTGVuZ3RoKSkgfFxuICAgICAgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHxcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0O1xuICAgIHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBsZW5ndGggKyB3b3JrSW5Qcm9ncmVzcztcbiAgfSBlbHNlXG4gICAgKHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgbGVuZ3RoKSB8IChpbmRleCA8PCBiYXNlTGVuZ3RoKSB8IGJhc2VJZFdpdGhMZWFkaW5nQml0KSxcbiAgICAgICh0cmVlQ29udGV4dE92ZXJmbG93ID0gd29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcykge1xuICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4gJiZcbiAgICAocHVzaFRyZWVGb3JrKHdvcmtJblByb2dyZXNzLCAxKSwgcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgMSwgMCkpO1xufVxuZnVuY3Rpb24gcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlRm9ya1Byb3ZpZGVyOyApXG4gICAgKHRyZWVGb3JrUHJvdmlkZXIgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlRm9ya0NvdW50ID0gZm9ya1N0YWNrWy0tZm9ya1N0YWNrSW5kZXhdKSxcbiAgICAgIChmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXhdID0gbnVsbCk7XG4gIGZvciAoOyB3b3JrSW5Qcm9ncmVzcyA9PT0gdHJlZUNvbnRleHRQcm92aWRlcjsgKVxuICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRJZCA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKTtcbn1cbnZhciBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGwsXG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsLFxuICBpc0h5ZHJhdGluZyA9ICExLFxuICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEsXG4gIEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MTkpKTtcbmZ1bmN0aW9uIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChmaWJlcikge1xuICB2YXIgZXJyb3IgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOCwgXCJcIikpO1xuICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBmaWJlcikpO1xuICB0aHJvdyBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbjtcbn1cbmZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UoZmliZXIpIHtcbiAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLFxuICAgIHR5cGUgPSBmaWJlci50eXBlLFxuICAgIHByb3BzID0gZmliZXIubWVtb2l6ZWRQcm9wcztcbiAgaW5zdGFuY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBmaWJlcjtcbiAgaW5zdGFuY2VbaW50ZXJuYWxQcm9wc0tleV0gPSBwcm9wcztcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2xvc2VcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlmcmFtZVwiOlxuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yICh0eXBlID0gMDsgdHlwZSA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IHR5cGUrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbdHlwZV0sIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImltYWdlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGluaXRJbnB1dChcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIHByb3BzLmNoZWNrZWQsXG4gICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICBwcm9wcy5uYW1lLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICAgIHRyYWNrKGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpLFxuICAgICAgICBpbml0VGV4dGFyZWEoaW5zdGFuY2UsIHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHByb3BzLmNoaWxkcmVuKSxcbiAgICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICB9XG4gIHR5cGUgPSBwcm9wcy5jaGlsZHJlbjtcbiAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJudW1iZXJcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJpZ2ludFwiICE9PSB0eXBlb2YgdHlwZSkgfHxcbiAgaW5zdGFuY2UudGV4dENvbnRlbnQgPT09IFwiXCIgKyB0eXBlIHx8XG4gICEwID09PSBwcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgfHxcbiAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KGluc3RhbmNlLnRleHRDb250ZW50LCB0eXBlKVxuICAgID8gKG51bGwgIT0gcHJvcHMucG9wb3ZlciAmJlxuICAgICAgICAobGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImJlZm9yZXRvZ2dsZVwiLCBpbnN0YW5jZSksXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgaW5zdGFuY2UpKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGwgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uU2Nyb2xsRW5kICYmXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgaW5zdGFuY2UpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vbkNsaWNrICYmIChpbnN0YW5jZS5vbmNsaWNrID0gbm9vcCQxKSxcbiAgICAgIChpbnN0YW5jZSA9ICEwKSlcbiAgICA6IChpbnN0YW5jZSA9ICExKTtcbiAgaW5zdGFuY2UgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpIHtcbiAgZm9yIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyLnJldHVybjsgaHlkcmF0aW9uUGFyZW50RmliZXI7IClcbiAgICBzd2l0Y2ggKGh5ZHJhdGlvblBhcmVudEZpYmVyLnRhZykge1xuICAgICAgY2FzZSA1OlxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICExO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIDI3OlxuICAgICAgY2FzZSAzOlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gaHlkcmF0aW9uUGFyZW50RmliZXIucmV0dXJuO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBvcEh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gIGlmIChmaWJlciAhPT0gaHlkcmF0aW9uUGFyZW50RmliZXIpIHJldHVybiAhMTtcbiAgaWYgKCFpc0h5ZHJhdGluZykgcmV0dXJuIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpLCAoaXNIeWRyYXRpbmcgPSAhMCksICExO1xuICB2YXIgdGFnID0gZmliZXIudGFnLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSAzICE9PSB0YWcgJiYgMjcgIT09IHRhZykpIHtcbiAgICBpZiAoKEpTQ29tcGlsZXJfdGVtcCA9IDUgPT09IHRhZykpXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gZmliZXIudHlwZSksXG4gICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICEoXCJmb3JtXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJiBcImJ1dHRvblwiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcykpO1xuICAgIEpTQ29tcGlsZXJfdGVtcCA9ICFKU0NvbXBpbGVyX3RlbXA7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wICYmIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgJiYgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbiAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gIGlmICgxMyA9PT0gdGFnKSB7XG4gICAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICAgIGZpYmVyID0gbnVsbCAhPT0gZmliZXIgPyBmaWJlci5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICBpZiAoIWZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgIGE6IHtcbiAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICBmb3IgKHRhZyA9IDA7IGZpYmVyOyApIHtcbiAgICAgICAgaWYgKDggPT09IGZpYmVyLm5vZGVUeXBlKVxuICAgICAgICAgIGlmICgoKEpTQ29tcGlsZXJfdGVtcCA9IGZpYmVyLmRhdGEpLCBcIi8kXCIgPT09IEpTQ29tcGlsZXJfdGVtcCkpIHtcbiAgICAgICAgICAgIGlmICgwID09PSB0YWcpIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhZy0tO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKFwiJFwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkIVwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkP1wiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgICAgIHRhZysrO1xuICAgICAgICBmaWJlciA9IGZpYmVyLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9IGVsc2VcbiAgICAyNyA9PT0gdGFnXG4gICAgICA/ICgodGFnID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSksXG4gICAgICAgIGlzU2luZ2xldG9uU2NvcGUoZmliZXIudHlwZSlcbiAgICAgICAgICA/ICgoZmliZXIgPSBwcmV2aW91c0h5ZHJhdGFibGVPbkVudGVyaW5nU2NvcGVkU2luZ2xldG9uKSxcbiAgICAgICAgICAgIChwcmV2aW91c0h5ZHJhdGFibGVPbkVudGVyaW5nU2NvcGVkU2luZ2xldG9uID0gbnVsbCksXG4gICAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGZpYmVyKSlcbiAgICAgICAgICA6IChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gdGFnKSlcbiAgICAgIDogKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlclxuICAgICAgICAgID8gZ2V0TmV4dEh5ZHJhdGFibGUoZmliZXIuc3RhdGVOb2RlLm5leHRTaWJsaW5nKVxuICAgICAgICAgIDogbnVsbCk7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG4gIGlzSHlkcmF0aW5nID0gITE7XG59XG5mdW5jdGlvbiB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpIHtcbiAgdmFyIHF1ZXVlZEVycm9ycyA9IGh5ZHJhdGlvbkVycm9ycztcbiAgbnVsbCAhPT0gcXVldWVkRXJyb3JzICYmXG4gICAgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzXG4gICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IHF1ZXVlZEVycm9ycylcbiAgICAgIDogd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMucHVzaC5hcHBseShcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICBxdWV1ZWRFcnJvcnNcbiAgICAgICAgKSxcbiAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpO1xuICByZXR1cm4gcXVldWVkRXJyb3JzO1xufVxuZnVuY3Rpb24gcXVldWVIeWRyYXRpb25FcnJvcihlcnJvcikge1xuICBudWxsID09PSBoeWRyYXRpb25FcnJvcnNcbiAgICA/IChoeWRyYXRpb25FcnJvcnMgPSBbZXJyb3JdKVxuICAgIDogaHlkcmF0aW9uRXJyb3JzLnB1c2goZXJyb3IpO1xufVxudmFyIHZhbHVlQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbCxcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbmZ1bmN0aW9uIHB1c2hQcm92aWRlcihwcm92aWRlckZpYmVyLCBjb250ZXh0LCBuZXh0VmFsdWUpIHtcbiAgcHVzaCh2YWx1ZUN1cnNvciwgY29udGV4dC5fY3VycmVudFZhbHVlKTtcbiAgY29udGV4dC5fY3VycmVudFZhbHVlID0gbmV4dFZhbHVlO1xufVxuZnVuY3Rpb24gcG9wUHJvdmlkZXIoY29udGV4dCkge1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSB2YWx1ZUN1cnNvci5jdXJyZW50O1xuICBwb3AodmFsdWVDdXJzb3IpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChwYXJlbnQsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgZm9yICg7IG51bGwgIT09IHBhcmVudDsgKSB7XG4gICAgdmFyIGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgKHBhcmVudC5jaGlsZExhbmVzICYgcmVuZGVyTGFuZXMpICE9PSByZW5kZXJMYW5lc1xuICAgICAgPyAoKHBhcmVudC5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcykpXG4gICAgICA6IG51bGwgIT09IGFsdGVybmF0ZSAmJlxuICAgICAgICAoYWx0ZXJuYXRlLmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gICAgaWYgKHBhcmVudCA9PT0gcHJvcGFnYXRpb25Sb290KSBicmVhaztcbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGNvbnRleHRzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgdmFyIGZpYmVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyk7XG4gIGZvciAoOyBudWxsICE9PSBmaWJlcjsgKSB7XG4gICAgdmFyIGxpc3QgPSBmaWJlci5kZXBlbmRlbmNpZXM7XG4gICAgaWYgKG51bGwgIT09IGxpc3QpIHtcbiAgICAgIHZhciBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgIGxpc3QgPSBsaXN0LmZpcnN0Q29udGV4dDtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBsaXN0OyApIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gZmliZXI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGV4dHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgaWYgKGRlcGVuZGVuY3kuY29udGV4dCA9PT0gY29udGV4dHNbaV0pIHtcbiAgICAgICAgICAgIGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICBkZXBlbmRlbmN5ID0gbGlzdC5hbHRlcm5hdGU7XG4gICAgICAgICAgICBudWxsICE9PSBkZXBlbmRlbmN5ICYmIChkZXBlbmRlbmN5LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoXG4gICAgICAgICAgICAgIGxpc3QucmV0dXJuLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUgfHwgKG5leHRGaWJlciA9IG51bGwpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIGxpc3QgPSBkZXBlbmRlbmN5Lm5leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgxOCA9PT0gZmliZXIudGFnKSB7XG4gICAgICBuZXh0RmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgICBpZiAobnVsbCA9PT0gbmV4dEZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MSkpO1xuICAgICAgbmV4dEZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICAgICAgbGlzdCA9IG5leHRGaWJlci5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBsaXN0ICYmIChsaXN0LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgobmV4dEZpYmVyLCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICB9IGVsc2UgbmV4dEZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IG5leHRGaWJlcikgbmV4dEZpYmVyLnJldHVybiA9IGZpYmVyO1xuICAgIGVsc2VcbiAgICAgIGZvciAobmV4dEZpYmVyID0gZmliZXI7IG51bGwgIT09IG5leHRGaWJlcjsgKSB7XG4gICAgICAgIGlmIChuZXh0RmliZXIgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmaWJlciA9IG5leHRGaWJlci5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICAgICAgICBmaWJlci5yZXR1cm4gPSBuZXh0RmliZXIucmV0dXJuO1xuICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRGaWJlciA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICB9XG4gICAgZmliZXIgPSBuZXh0RmliZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgcmVuZGVyTGFuZXMsXG4gIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBmb3IgKFxuICAgIHZhciBwYXJlbnQgPSB3b3JrSW5Qcm9ncmVzcywgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMTtcbiAgICBudWxsICE9PSBwYXJlbnQ7XG5cbiAgKSB7XG4gICAgaWYgKCFpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dClcbiAgICAgIGlmICgwICE9PSAocGFyZW50LmZsYWdzICYgNTI0Mjg4KSkgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMDtcbiAgICAgIGVsc2UgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiAyNjIxNDQpKSBicmVhaztcbiAgICBpZiAoMTAgPT09IHBhcmVudC50YWcpIHtcbiAgICAgIHZhciBjdXJyZW50UGFyZW50ID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gcGFyZW50LnR5cGU7XG4gICAgICAgIG9iamVjdElzKHBhcmVudC5wZW5kaW5nUHJvcHMudmFsdWUsIGN1cnJlbnRQYXJlbnQudmFsdWUpIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LnB1c2goY29udGV4dCkgOiAoY3VycmVudCA9IFtjb250ZXh0XSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50ID09PSBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAhPT1cbiAgICAgICAgcGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAobnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gY3VycmVudC5wdXNoKEhvc3RUcmFuc2l0aW9uQ29udGV4dClcbiAgICAgICAgICA6IChjdXJyZW50ID0gW0hvc3RUcmFuc2l0aW9uQ29udGV4dF0pKTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIGN1cnJlbnQsXG4gICAgICByZW5kZXJMYW5lcyxcbiAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuICAgICk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI2MjE0NDtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50RGVwZW5kZW5jaWVzKSB7XG4gIGZvciAoXG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0O1xuICAgIG51bGwgIT09IGN1cnJlbnREZXBlbmRlbmNpZXM7XG5cbiAgKSB7XG4gICAgaWYgKFxuICAgICAgIW9iamVjdElzKFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLmNvbnRleHQuX2N1cnJlbnRWYWx1ZSxcbiAgICAgICAgY3VycmVudERlcGVuZGVuY2llcy5tZW1vaXplZFZhbHVlXG4gICAgICApXG4gICAgKVxuICAgICAgcmV0dXJuICEwO1xuICAgIGN1cnJlbnREZXBlbmRlbmNpZXMgPSBjdXJyZW50RGVwZW5kZW5jaWVzLm5leHQ7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IHdvcmtJblByb2dyZXNzO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcztcbiAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgKHdvcmtJblByb2dyZXNzLmZpcnN0Q29udGV4dCA9IG51bGwpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gcmVhZENvbnRleHRGb3JDb25zdW1lcihjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24oY29uc3VtZXIsIGNvbnRleHQpIHtcbiAgbnVsbCA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSAmJiBwcmVwYXJlVG9SZWFkQ29udGV4dChjb25zdW1lcik7XG4gIHJldHVybiByZWFkQ29udGV4dEZvckNvbnN1bWVyKGNvbnN1bWVyLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpIHtcbiAgdmFyIHZhbHVlID0gY29udGV4dC5fY3VycmVudFZhbHVlO1xuICBjb250ZXh0ID0geyBjb250ZXh0OiBjb250ZXh0LCBtZW1vaXplZFZhbHVlOiB2YWx1ZSwgbmV4dDogbnVsbCB9O1xuICBpZiAobnVsbCA9PT0gbGFzdENvbnRleHREZXBlbmRlbmN5KSB7XG4gICAgaWYgKG51bGwgPT09IGNvbnN1bWVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwOCkpO1xuICAgIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGNvbnRleHQ7XG4gICAgY29uc3VtZXIuZGVwZW5kZW5jaWVzID0geyBsYW5lczogMCwgZmlyc3RDb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29uc3VtZXIuZmxhZ3MgfD0gNTI0Mjg4O1xuICB9IGVsc2UgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbGFzdENvbnRleHREZXBlbmRlbmN5Lm5leHQgPSBjb250ZXh0O1xuICByZXR1cm4gdmFsdWU7XG59XG52YXIgQWJvcnRDb250cm9sbGVyTG9jYWwgPVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBBYm9ydENvbnRyb2xsZXJcbiAgICAgID8gQWJvcnRDb250cm9sbGVyXG4gICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW10sXG4gICAgICAgICAgICBzaWduYWwgPSAodGhpcy5zaWduYWwgPSB7XG4gICAgICAgICAgICAgIGFib3J0ZWQ6ICExLFxuICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzaWduYWwuYWJvcnRlZCA9ICEwO1xuICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgc2NoZWR1bGVDYWxsYmFjayQyID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssXG4gIE5vcm1hbFByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICBDYWNoZUNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBDb25zdW1lcjogbnVsbCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBfY3VycmVudFZhbHVlOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWUyOiBudWxsLFxuICAgIF90aHJlYWRDb3VudDogMFxuICB9O1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlckxvY2FsKCksXG4gICAgZGF0YTogbmV3IE1hcCgpLFxuICAgIHJlZkNvdW50OiAwXG4gIH07XG59XG5mdW5jdGlvbiByZWxlYXNlQ2FjaGUoY2FjaGUpIHtcbiAgY2FjaGUucmVmQ291bnQtLTtcbiAgMCA9PT0gY2FjaGUucmVmQ291bnQgJiZcbiAgICBzY2hlZHVsZUNhbGxiYWNrJDIoTm9ybWFsUHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhY2hlLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB9KTtcbn1cbnZhciBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbCxcbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDAsXG4gIGN1cnJlbnRFbnRhbmdsZWRMYW5lID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbmZ1bmN0aW9uIGVudGFuZ2xlQXN5bmNBY3Rpb24odHJhbnNpdGlvbiwgdGhlbmFibGUpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMpIHtcbiAgICB2YXIgZW50YW5nbGVkTGlzdGVuZXJzID0gKGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBbXSk7XG4gICAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSB7XG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGVudGFuZ2xlZExpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCsrO1xuICB0aGVuYWJsZS50aGVuKHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUsIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUpO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlKCkge1xuICBpZiAoXG4gICAgMCA9PT0gLS1jdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ICYmXG4gICAgbnVsbCAhPT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVyc1xuICApIHtcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgJiZcbiAgICAgIChjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIik7XG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnM7XG4gICAgY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IG51bGw7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNoYWluVGhlbmFibGVWYWx1ZSh0aGVuYWJsZSwgcmVzdWx0KSB7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICB0aGVuYWJsZVdpdGhPdmVycmlkZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHJlYXNvbjogbnVsbCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIHRoZW5hYmxlLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnZhbHVlID0gcmVzdWx0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKHJlc3VsdCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnJlYXNvbiA9IGVycm9yO1xuICAgICAgZm9yIChlcnJvciA9IDA7IGVycm9yIDwgbGlzdGVuZXJzLmxlbmd0aDsgZXJyb3IrKylcbiAgICAgICAgKDAsIGxpc3RlbmVyc1tlcnJvcl0pKHZvaWQgMCk7XG4gICAgfVxuICApO1xuICByZXR1cm4gdGhlbmFibGVXaXRoT3ZlcnJpZGU7XG59XG52YXIgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcblJlYWN0U2hhcmVkSW50ZXJuYWxzLlMgPSBmdW5jdGlvbiAodHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpIHtcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gIG51bGwgIT09IHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgIHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG59O1xudmFyIHJlc3VtZWRDYWNoZSA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHBlZWtDYWNoZUZyb21Qb29sKCkge1xuICB2YXIgY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyID0gcmVzdW1lZENhY2hlLmN1cnJlbnQ7XG4gIHJldHVybiBudWxsICE9PSBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXJcbiAgICA/IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290LnBvb2xlZENhY2hlO1xufVxuZnVuY3Rpb24gcHVzaFRyYW5zaXRpb24ob2Zmc2NyZWVuV29ya0luUHJvZ3Jlc3MsIHByZXZDYWNoZVBvb2wpIHtcbiAgbnVsbCA9PT0gcHJldkNhY2hlUG9vbFxuICAgID8gcHVzaChyZXN1bWVkQ2FjaGUsIHJlc3VtZWRDYWNoZS5jdXJyZW50KVxuICAgIDogcHVzaChyZXN1bWVkQ2FjaGUsIHByZXZDYWNoZVBvb2wucG9vbCk7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRDYWNoZSgpIHtcbiAgdmFyIGNhY2hlRnJvbVBvb2wgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICByZXR1cm4gbnVsbCA9PT0gY2FjaGVGcm9tUG9vbFxuICAgID8gbnVsbFxuICAgIDogeyBwYXJlbnQ6IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlLCBwb29sOiBjYWNoZUZyb21Qb29sIH07XG59XG52YXIgU3VzcGVuc2VFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MCkpLFxuICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NCkpLFxuICBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTQyKSksXG4gIG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSA9IHsgdGhlbjogZnVuY3Rpb24gKCkge30gfTtcbmZ1bmN0aW9uIGlzVGhlbmFibGVSZXNvbHZlZCh0aGVuYWJsZSkge1xuICB0aGVuYWJsZSA9IHRoZW5hYmxlLnN0YXR1cztcbiAgcmV0dXJuIFwiZnVsZmlsbGVkXCIgPT09IHRoZW5hYmxlIHx8IFwicmVqZWN0ZWRcIiA9PT0gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBub29wJDMoKSB7fVxuZnVuY3Rpb24gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KSB7XG4gIGluZGV4ID0gdGhlbmFibGVTdGF0ZVtpbmRleF07XG4gIHZvaWQgMCA9PT0gaW5kZXhcbiAgICA/IHRoZW5hYmxlU3RhdGUucHVzaCh0aGVuYWJsZSlcbiAgICA6IGluZGV4ICE9PSB0aGVuYWJsZSAmJiAodGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyksICh0aGVuYWJsZSA9IGluZGV4KSk7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhyb3cgKFxuICAgICAgICAoKHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb24pLFxuICAgICAgICBjaGVja0lmVXNlV3JhcHBlZEluQXN5bmNDYXRjaCh0aGVuYWJsZVN0YXRlKSxcbiAgICAgICAgdGhlbmFibGVTdGF0ZSlcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzKSB0aGVuYWJsZS50aGVuKG5vb3AkMywgbm9vcCQzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGVuYWJsZVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgICBpZiAobnVsbCAhPT0gdGhlbmFibGVTdGF0ZSAmJiAxMDAgPCB0aGVuYWJsZVN0YXRlLnNoZWxsU3VzcGVuZENvdW50ZXIpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODIpKTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICB2YXIgZnVsZmlsbGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIHJlamVjdGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUucmVhc29uID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhyb3cgKFxuICAgICAgICAgICAgKCh0aGVuYWJsZVN0YXRlID0gdGhlbmFibGUucmVhc29uKSxcbiAgICAgICAgICAgIGNoZWNrSWZVc2VXcmFwcGVkSW5Bc3luY0NhdGNoKHRoZW5hYmxlU3RhdGUpLFxuICAgICAgICAgICAgdGhlbmFibGVTdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3VzcGVuZGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgIHRocm93IFN1c3BlbnNlRXhjZXB0aW9uO1xuICB9XG59XG52YXIgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRUaGVuYWJsZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTkpKTtcbiAgdmFyIHRoZW5hYmxlID0gc3VzcGVuZGVkVGhlbmFibGU7XG4gIHN1c3BlbmRlZFRoZW5hYmxlID0gbnVsbDtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gY2hlY2tJZlVzZVdyYXBwZWRJbkFzeW5jQ2F0Y2gocmVqZWN0ZWRSZWFzb24pIHtcbiAgaWYgKFxuICAgIHJlamVjdGVkUmVhc29uID09PSBTdXNwZW5zZUV4Y2VwdGlvbiB8fFxuICAgIHJlamVjdGVkUmVhc29uID09PSBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvblxuICApXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbn1cbnZhciBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKGZpYmVyKSB7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7IHBlbmRpbmc6IG51bGwsIGxhbmVzOiAwLCBoaWRkZW5DYWxsYmFja3M6IG51bGwgfSxcbiAgICBjYWxsYmFja3M6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID09PSBjdXJyZW50ICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0ge1xuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50LmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogY3VycmVudC5maXJzdEJhc2VVcGRhdGUsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogY3VycmVudC5sYXN0QmFzZVVwZGF0ZSxcbiAgICAgIHNoYXJlZDogY3VycmVudC5zaGFyZWQsXG4gICAgICBjYWxsYmFja3M6IG51bGxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShsYW5lKSB7XG4gIHJldHVybiB7IGxhbmU6IGxhbmUsIHRhZzogMCwgcGF5bG9hZDogbnVsbCwgY2FsbGJhY2s6IG51bGwsIG5leHQ6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgPT09IHVwZGF0ZVF1ZXVlKSByZXR1cm4gbnVsbDtcbiAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5zaGFyZWQ7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpKSB7XG4gICAgdmFyIHBlbmRpbmcgPSB1cGRhdGVRdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICAgIHVwZGF0ZVF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgdXBkYXRlID0gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG4gICAgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIG51bGwsIGxhbmUpO1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH1cbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCB1cGRhdGVRdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSkge1xuICBmaWJlciA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgKChmaWJlciA9IGZpYmVyLnNoYXJlZCksIDAgIT09IChsYW5lICYgNDE5NDA0OCkpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBmaWJlci5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBmaWJlci5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY2FwdHVyZWRVcGRhdGUpIHtcbiAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUsXG4gICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSwgcXVldWUgPT09IGN1cnJlbnQpXG4gICkge1xuICAgIHZhciBuZXdGaXJzdCA9IG51bGwsXG4gICAgICBuZXdMYXN0ID0gbnVsbDtcbiAgICBxdWV1ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGxhbmU6IHF1ZXVlLmxhbmUsXG4gICAgICAgICAgdGFnOiBxdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIG51bGwgPT09IG5ld0xhc3RcbiAgICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjbG9uZSlcbiAgICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2xvbmUpO1xuICAgICAgICBxdWV1ZSA9IHF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlIChudWxsICE9PSBxdWV1ZSk7XG4gICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgID8gKG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlKVxuICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICAgIH0gZWxzZSBuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZTtcbiAgICBxdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IG5ld0ZpcnN0LFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IG5ld0xhc3QsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBjdXJyZW50LmNhbGxiYWNrc1xuICAgIH07XG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBxdWV1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MgPSBxdWV1ZS5sYXN0QmFzZVVwZGF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/IChxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzcy5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGNhcHR1cmVkVXBkYXRlO1xufVxudmFyIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMTtcbmZ1bmN0aW9uIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSB7XG4gIGlmIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKSB7XG4gICAgdmFyIGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICAgIGlmIChudWxsICE9PSBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSkgdGhyb3cgZW50YW5nbGVkQWN0aW9uVGhlbmFibGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVRdWV1ZShcbiAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gIHByb3BzLFxuICBpbnN0YW5jZSRqc2NvbXAkMCxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLnVwZGF0ZVF1ZXVlO1xuICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICB2YXIgZmlyc3RCYXNlVXBkYXRlID0gcXVldWUuZmlyc3RCYXNlVXBkYXRlLFxuICAgIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmc7XG4gIGlmIChudWxsICE9PSBwZW5kaW5nUXVldWUpIHtcbiAgICBxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIGxhc3RQZW5kaW5nVXBkYXRlID0gcGVuZGluZ1F1ZXVlLFxuICAgICAgZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUubmV4dDtcbiAgICBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDtcbiAgICBudWxsID09PSBsYXN0QmFzZVVwZGF0ZVxuICAgICAgPyAoZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgOiAobGFzdEJhc2VVcGRhdGUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSk7XG4gICAgbGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIChwZW5kaW5nUXVldWUgPSBjdXJyZW50Lmxhc3RCYXNlVXBkYXRlKSxcbiAgICAgIHBlbmRpbmdRdWV1ZSAhPT0gbGFzdEJhc2VVcGRhdGUgJiZcbiAgICAgICAgKG51bGwgPT09IHBlbmRpbmdRdWV1ZVxuICAgICAgICAgID8gKGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgICAgIDogKHBlbmRpbmdRdWV1ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlKSxcbiAgICAgICAgKGN1cnJlbnQubGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZSkpKTtcbiAgfVxuICBpZiAobnVsbCAhPT0gZmlyc3RCYXNlVXBkYXRlKSB7XG4gICAgdmFyIG5ld1N0YXRlID0gcXVldWUuYmFzZVN0YXRlO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gMDtcbiAgICBjdXJyZW50ID0gZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUgPSBudWxsO1xuICAgIHBlbmRpbmdRdWV1ZSA9IGZpcnN0QmFzZVVwZGF0ZTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5sYW5lICYgLTUzNjg3MDkxMyxcbiAgICAgICAgaXNIaWRkZW5VcGRhdGUgPSB1cGRhdGVMYW5lICE9PSBwZW5kaW5nUXVldWUubGFuZTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNIaWRkZW5VcGRhdGVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIDAgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICB1cGRhdGVMYW5lID09PSBjdXJyZW50RW50YW5nbGVkTGFuZSAmJlxuICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITApO1xuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHBlbmRpbmdRdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCxcbiAgICAgICAgICAgIHVwZGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICAgICAgICB1cGRhdGVMYW5lID0gcHJvcHM7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2UkanNjb21wJDA7XG4gICAgICAgICAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAtNjU1MzcpIHwgMTI4O1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICB1cGRhdGVMYW5lID1cbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgPyB3b3JrSW5Qcm9ncmVzcy5jYWxsKGluc3RhbmNlLCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSlcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB1cGRhdGVMYW5lIHx8IHZvaWQgMCA9PT0gdXBkYXRlTGFuZSkgYnJlYWsgYTtcbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSBhc3NpZ24oe30sIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgaGFzRm9yY2VVcGRhdGUgPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5jYWxsYmFjaztcbiAgICAgICAgbnVsbCAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gNjQpLFxuICAgICAgICAgIGlzSGlkZGVuVXBkYXRlICYmICh3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBxdWV1ZS5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgPT09IGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgICA/IChxdWV1ZS5jYWxsYmFja3MgPSBbdXBkYXRlTGFuZV0pXG4gICAgICAgICAgICA6IGlzSGlkZGVuVXBkYXRlLnB1c2godXBkYXRlTGFuZSkpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHRhZzogcGVuZGluZ1F1ZXVlLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogcGVuZGluZ1F1ZXVlLmNhbGxiYWNrLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgICAgPyAoKGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGN1cnJlbnQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAgIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgKGxhc3RCYXNlVXBkYXRlIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgcGVuZGluZ1F1ZXVlID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBpZiAobnVsbCA9PT0gcGVuZGluZ1F1ZXVlKVxuICAgICAgICBpZiAoKChwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZyksIG51bGwgPT09IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBwZW5kaW5nUXVldWUpLFxuICAgICAgICAgICAgKHBlbmRpbmdRdWV1ZSA9IGlzSGlkZGVuVXBkYXRlLm5leHQpLFxuICAgICAgICAgICAgKGlzSGlkZGVuVXBkYXRlLm5leHQgPSBudWxsKSxcbiAgICAgICAgICAgIChxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAgIChxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGwpO1xuICAgIH0gd2hpbGUgKDEpO1xuICAgIG51bGwgPT09IGN1cnJlbnQgJiYgKGxhc3RQZW5kaW5nVXBkYXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmJhc2VTdGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlO1xuICAgIHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGN1cnJlbnQ7XG4gICAgbnVsbCA9PT0gZmlyc3RCYXNlVXBkYXRlICYmIChxdWV1ZS5zaGFyZWQubGFuZXMgPSAwKTtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubGFuZXMgPSBsYXN0QmFzZVVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2FsbGJhY2spXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTEsIGNhbGxiYWNrKSk7XG4gIGNhbGxiYWNrLmNhbGwoY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGNvbnRleHQpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcztcbiAgaWYgKG51bGwgIT09IGNhbGxiYWNrcylcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUuY2FsbGJhY2tzID0gbnVsbCwgdXBkYXRlUXVldWUgPSAwO1xuICAgICAgdXBkYXRlUXVldWUgPCBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgdXBkYXRlUXVldWUrK1xuICAgIClcbiAgICAgIGNhbGxDYWxsYmFjayhjYWxsYmFja3NbdXBkYXRlUXVldWVdLCBjb250ZXh0KTtcbn1cbnZhciBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IgPSBjcmVhdGVDdXJzb3IoMCk7XG5mdW5jdGlvbiBwdXNoSGlkZGVuQ29udGV4dChmaWJlciwgY29udGV4dCkge1xuICBmaWJlciA9IGVudGFuZ2xlZFJlbmRlckxhbmVzO1xuICBwdXNoKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciwgZmliZXIpO1xuICBwdXNoKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IsIGNvbnRleHQpO1xuICBlbnRhbmdsZWRSZW5kZXJMYW5lcyA9IGZpYmVyIHwgY29udGV4dC5iYXNlTGFuZXM7XG59XG5mdW5jdGlvbiByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCkge1xuICBwdXNoKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciwgZW50YW5nbGVkUmVuZGVyTGFuZXMpO1xuICBwdXNoKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IsIGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudCk7XG59XG5mdW5jdGlvbiBwb3BIaWRkZW5Db250ZXh0KCkge1xuICBlbnRhbmdsZWRSZW5kZXJMYW5lcyA9IHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvci5jdXJyZW50O1xuICBwb3AoY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvcik7XG4gIHBvcChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IpO1xufVxudmFyIHJlbmRlckxhbmVzID0gMCxcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsLFxuICBjdXJyZW50SG9vayA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGwsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSAhMSxcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITEsXG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITEsXG4gIGxvY2FsSWRDb3VudGVyID0gMCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSA9IDAsXG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGwsXG4gIGdsb2JhbENsaWVudElkQ291bnRlciA9IDA7XG5mdW5jdGlvbiB0aHJvd0ludmFsaWRIb29rRXJyb3IoKSB7XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzIxKSk7XG59XG5mdW5jdGlvbiBhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSB7XG4gIGlmIChudWxsID09PSBwcmV2RGVwcykgcmV0dXJuICExO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZEZXBzLmxlbmd0aCAmJiBpIDwgbmV4dERlcHMubGVuZ3RoOyBpKyspXG4gICAgaWYgKCFvYmplY3RJcyhuZXh0RGVwc1tpXSwgcHJldkRlcHNbaV0pKSByZXR1cm4gITE7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlbmRlcldpdGhIb29rcyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgcHJvcHMsXG4gIHNlY29uZEFyZyxcbiAgbmV4dFJlbmRlckxhbmVzXG4pIHtcbiAgcmVuZGVyTGFuZXMgPSBuZXh0UmVuZGVyTGFuZXM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzLmxhbmVzID0gMDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9XG4gICAgbnVsbCA9PT0gY3VycmVudCB8fCBudWxsID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgID8gSG9va3NEaXNwYXRjaGVyT25Nb3VudFxuICAgICAgOiBIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZTtcbiAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgPSAhMTtcbiAgbmV4dFJlbmRlckxhbmVzID0gQ29tcG9uZW50KHByb3BzLCBzZWNvbmRBcmcpO1xuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgJiZcbiAgICAobmV4dFJlbmRlckxhbmVzID0gcmVuZGVyV2l0aEhvb2tzQWdhaW4oXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIHByb3BzLFxuICAgICAgc2Vjb25kQXJnXG4gICAgKSk7XG4gIGZpbmlzaFJlbmRlcmluZ0hvb2tzKGN1cnJlbnQpO1xuICByZXR1cm4gbmV4dFJlbmRlckxhbmVzO1xufVxuZnVuY3Rpb24gZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCkge1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuICB2YXIgZGlkUmVuZGVyVG9vRmV3SG9va3MgPSBudWxsICE9PSBjdXJyZW50SG9vayAmJiBudWxsICE9PSBjdXJyZW50SG9vay5uZXh0O1xuICByZW5kZXJMYW5lcyA9IDA7XG4gIHdvcmtJblByb2dyZXNzSG9vayA9IGN1cnJlbnRIb29rID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICBpZiAoZGlkUmVuZGVyVG9vRmV3SG9va3MpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAwKSk7XG4gIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICBkaWRSZWNlaXZlVXBkYXRlIHx8XG4gICAgKChjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXMpLFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSAmJlxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzQWdhaW4od29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIHNlY29uZEFyZykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgbnVtYmVyT2ZSZVJlbmRlcnMgPSAwO1xuICBkbyB7XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzICYmICh0aGVuYWJsZVN0YXRlJDEgPSBudWxsKTtcbiAgICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMDtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgICBpZiAoMjUgPD0gbnVtYmVyT2ZSZVJlbmRlcnMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAxKSk7XG4gICAgbnVtYmVyT2ZSZVJlbmRlcnMgKz0gMTtcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IG51bGw7XG4gICAgaWYgKG51bGwgIT0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgY2hpbGRyZW4ubGFzdEVmZmVjdCA9IG51bGw7XG4gICAgICBjaGlsZHJlbi5ldmVudHMgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uc3RvcmVzID0gbnVsbDtcbiAgICAgIG51bGwgIT0gY2hpbGRyZW4ubWVtb0NhY2hlICYmIChjaGlsZHJlbi5tZW1vQ2FjaGUuaW5kZXggPSAwKTtcbiAgICB9XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXI7XG4gICAgY2hpbGRyZW4gPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIH0gd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIFRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQoKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCxcbiAgICBtYXliZVRoZW5hYmxlID0gZGlzcGF0Y2hlci51c2VTdGF0ZSgpWzBdO1xuICBtYXliZVRoZW5hYmxlID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZVRoZW5hYmxlLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUobWF5YmVUaGVuYWJsZSlcbiAgICAgIDogbWF5YmVUaGVuYWJsZTtcbiAgZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgKG51bGwgIT09IGN1cnJlbnRIb29rID8gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGwpICE9PSBkaXNwYXRjaGVyICYmXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmZsYWdzIHw9IDEwMjQpO1xuICByZXR1cm4gbWF5YmVUaGVuYWJsZTtcbn1cbmZ1bmN0aW9uIGNoZWNrRGlkUmVuZGVySWRIb29rKCkge1xuICB2YXIgZGlkUmVuZGVySWRIb29rID0gMCAhPT0gbG9jYWxJZENvdW50ZXI7XG4gIGxvY2FsSWRDb3VudGVyID0gMDtcbiAgcmV0dXJuIGRpZFJlbmRlcklkSG9vaztcbn1cbmZ1bmN0aW9uIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjA1MztcbiAgY3VycmVudC5sYW5lcyAmPSB+bGFuZXM7XG59XG5mdW5jdGlvbiByZXNldEhvb2tzT25VbndpbmQod29ya0luUHJvZ3Jlc3MpIHtcbiAgaWYgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUpIHtcbiAgICBmb3IgKFxuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3M7XG5cbiAgICApIHtcbiAgICAgIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnF1ZXVlO1xuICAgICAgbnVsbCAhPT0gcXVldWUgJiYgKHF1ZXVlLnBlbmRpbmcgPSBudWxsKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MubmV4dDtcbiAgICB9XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExO1xuICB9XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9ICExO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gbG9jYWxJZENvdW50ZXIgPSAwO1xuICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIHZhciBob29rID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IG51bGwsXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBob29rKVxuICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gaG9vayk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIGlmIChudWxsID09PSBjdXJyZW50SG9vaykge1xuICAgIHZhciBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5hbHRlcm5hdGU7XG4gICAgbmV4dEN1cnJlbnRIb29rID1cbiAgICAgIG51bGwgIT09IG5leHRDdXJyZW50SG9vayA/IG5leHRDdXJyZW50SG9vay5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgfSBlbHNlIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRIb29rLm5leHQ7XG4gIHZhciBuZXh0V29ya0luUHJvZ3Jlc3NIb29rID1cbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gY3VycmVudGx5UmVuZGVyaW5nRmliZXIubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcbiAgaWYgKG51bGwgIT09IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spXG4gICAgKHdvcmtJblByb2dyZXNzSG9vayA9IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spLFxuICAgICAgKGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgPT09IG5leHRDdXJyZW50SG9vaykge1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmFsdGVybmF0ZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjcpKTtcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzEwKSk7XG4gICAgfVxuICAgIGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rO1xuICAgIG5leHRDdXJyZW50SG9vayA9IHtcbiAgICAgIG1lbW9pemVkU3RhdGU6IGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnRIb29rLmJhc2VTdGF0ZSxcbiAgICAgIGJhc2VRdWV1ZTogY3VycmVudEhvb2suYmFzZVF1ZXVlLFxuICAgICAgcXVldWU6IGN1cnJlbnRIb29rLnF1ZXVlLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5tZW1vaXplZFN0YXRlID0gd29ya0luUHJvZ3Jlc3NIb29rID1cbiAgICAgICAgICBuZXh0Q3VycmVudEhvb2spXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCA9IG5leHRDdXJyZW50SG9vayk7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSB7XG4gIHJldHVybiB7IGxhc3RFZmZlY3Q6IG51bGwsIGV2ZW50czogbnVsbCwgc3RvcmVzOiBudWxsLCBtZW1vQ2FjaGU6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIHVzZVRoZW5hYmxlKHRoZW5hYmxlKSB7XG4gIHZhciBpbmRleCA9IHRoZW5hYmxlSW5kZXhDb3VudGVyJDE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgKz0gMTtcbiAgbnVsbCA9PT0gdGhlbmFibGVTdGF0ZSQxICYmICh0aGVuYWJsZVN0YXRlJDEgPSBbXSk7XG4gIHRoZW5hYmxlID0gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSQxLCB0aGVuYWJsZSwgaW5kZXgpO1xuICBpbmRleCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyO1xuICBudWxsID09PVxuICAgIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gaW5kZXgubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCkgJiZcbiAgICAoKGluZGV4ID0gaW5kZXguYWx0ZXJuYXRlKSxcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9XG4gICAgICBudWxsID09PSBpbmRleCB8fCBudWxsID09PSBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gSG9va3NEaXNwYXRjaGVyT25Nb3VudFxuICAgICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlKSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHVzZSh1c2FibGUpIHtcbiAgaWYgKG51bGwgIT09IHVzYWJsZSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXNhYmxlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVzYWJsZS50aGVuKSByZXR1cm4gdXNlVGhlbmFibGUodXNhYmxlKTtcbiAgICBpZiAodXNhYmxlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpIHJldHVybiByZWFkQ29udGV4dCh1c2FibGUpO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM4LCBTdHJpbmcodXNhYmxlKSkpO1xufVxuZnVuY3Rpb24gdXNlTWVtb0NhY2hlKHNpemUpIHtcbiAgdmFyIG1lbW9DYWNoZSA9IG51bGwsXG4gICAgdXBkYXRlUXVldWUgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZTtcbiAgbnVsbCAhPT0gdXBkYXRlUXVldWUgJiYgKG1lbW9DYWNoZSA9IHVwZGF0ZVF1ZXVlLm1lbW9DYWNoZSk7XG4gIGlmIChudWxsID09IG1lbW9DYWNoZSkge1xuICAgIHZhciBjdXJyZW50ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAoKGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9DYWNoZSksXG4gICAgICAgIG51bGwgIT0gY3VycmVudCAmJlxuICAgICAgICAgIChtZW1vQ2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEubWFwKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICB9KSkpO1xuICB9XG4gIG51bGwgPT0gbWVtb0NhY2hlICYmIChtZW1vQ2FjaGUgPSB7IGRhdGE6IFtdLCBpbmRleDogMCB9KTtcbiAgbnVsbCA9PT0gdXBkYXRlUXVldWUgJiZcbiAgICAoKHVwZGF0ZVF1ZXVlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZSkpO1xuICB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUgPSBtZW1vQ2FjaGU7XG4gIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XTtcbiAgaWYgKHZvaWQgMCA9PT0gdXBkYXRlUXVldWUpXG4gICAgZm9yIChcbiAgICAgIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XSA9IEFycmF5KHNpemUpLCBjdXJyZW50ID0gMDtcbiAgICAgIGN1cnJlbnQgPCBzaXplO1xuICAgICAgY3VycmVudCsrXG4gICAgKVxuICAgICAgdXBkYXRlUXVldWVbY3VycmVudF0gPSBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMO1xuICBtZW1vQ2FjaGUuaW5kZXgrKztcbiAgcmV0dXJuIHVwZGF0ZVF1ZXVlO1xufVxuZnVuY3Rpb24gYmFzaWNTdGF0ZVJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uID8gYWN0aW9uKHN0YXRlKSA6IGFjdGlvbjtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZHVjZXIocmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudEhvb2ssIHJlZHVjZXIpO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudCwgcmVkdWNlcikge1xuICB2YXIgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgYmFzZVF1ZXVlID0gaG9vay5iYXNlUXVldWUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUucGVuZGluZztcbiAgaWYgKG51bGwgIT09IHBlbmRpbmdRdWV1ZSkge1xuICAgIGlmIChudWxsICE9PSBiYXNlUXVldWUpIHtcbiAgICAgIHZhciBiYXNlRmlyc3QgPSBiYXNlUXVldWUubmV4dDtcbiAgICAgIGJhc2VRdWV1ZS5uZXh0ID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBwZW5kaW5nUXVldWUubmV4dCA9IGJhc2VGaXJzdDtcbiAgICB9XG4gICAgY3VycmVudC5iYXNlUXVldWUgPSBiYXNlUXVldWUgPSBwZW5kaW5nUXVldWU7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gIH1cbiAgcGVuZGluZ1F1ZXVlID0gaG9vay5iYXNlU3RhdGU7XG4gIGlmIChudWxsID09PSBiYXNlUXVldWUpIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgZWxzZSB7XG4gICAgY3VycmVudCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgIHZhciBuZXdCYXNlUXVldWVGaXJzdCA9IChiYXNlRmlyc3QgPSBudWxsKSxcbiAgICAgIG5ld0Jhc2VRdWV1ZUxhc3QgPSBudWxsLFxuICAgICAgdXBkYXRlID0gY3VycmVudCxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kMzIgPSAhMTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHVwZGF0ZS5sYW5lICYgLTUzNjg3MDkxMztcbiAgICAgIGlmIChcbiAgICAgICAgdXBkYXRlTGFuZSAhPT0gdXBkYXRlLmxhbmVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXZlcnRMYW5lID0gdXBkYXRlLnJldmVydExhbmU7XG4gICAgICAgIGlmICgwID09PSByZXZlcnRMYW5lKVxuICAgICAgICAgIG51bGwgIT09IG5ld0Jhc2VRdWV1ZUxhc3QgJiZcbiAgICAgICAgICAgIChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID1cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0TGFuZTogMCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICAgICAgaGFzRWFnZXJTdGF0ZTogdXBkYXRlLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHVwZGF0ZUxhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDMyID0gITApO1xuICAgICAgICBlbHNlIGlmICgocmVuZGVyTGFuZXMgJiByZXZlcnRMYW5lKSA9PT0gcmV2ZXJ0TGFuZSkge1xuICAgICAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgICAgIHJldmVydExhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQzMiA9ICEwKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgKHVwZGF0ZUxhbmUgPSB7XG4gICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgICA/ICgobmV3QmFzZVF1ZXVlRmlyc3QgPSBuZXdCYXNlUXVldWVMYXN0ID0gdXBkYXRlTGFuZSksXG4gICAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5sYW5lcyB8PSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gcmV2ZXJ0TGFuZSk7XG4gICAgICAgIHVwZGF0ZUxhbmUgPSB1cGRhdGUuYWN0aW9uO1xuICAgICAgICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViAmJlxuICAgICAgICAgIHJlZHVjZXIocGVuZGluZ1F1ZXVlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgcGVuZGluZ1F1ZXVlID0gdXBkYXRlLmhhc0VhZ2VyU3RhdGVcbiAgICAgICAgICA/IHVwZGF0ZS5lYWdlclN0YXRlXG4gICAgICAgICAgOiByZWR1Y2VyKHBlbmRpbmdRdWV1ZSwgdXBkYXRlTGFuZSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgKHJldmVydExhbmUgPSB7XG4gICAgICAgICAgbGFuZTogdXBkYXRlTGFuZSxcbiAgICAgICAgICByZXZlcnRMYW5lOiB1cGRhdGUucmV2ZXJ0TGFuZSxcbiAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgaGFzRWFnZXJTdGF0ZTogdXBkYXRlLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9KSxcbiAgICAgICAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICAgICAgICA/ICgobmV3QmFzZVF1ZXVlRmlyc3QgPSBuZXdCYXNlUXVldWVMYXN0ID0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgICAgIChiYXNlRmlyc3QgPSBwZW5kaW5nUXVldWUpKVxuICAgICAgICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IHJldmVydExhbmUpLFxuICAgICAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5sYW5lcyB8PSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAobnVsbCAhPT0gdXBkYXRlICYmIHVwZGF0ZSAhPT0gY3VycmVudCk7XG4gICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgPyAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKVxuICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gbmV3QmFzZVF1ZXVlRmlyc3QpO1xuICAgIGlmIChcbiAgICAgICFvYmplY3RJcyhwZW5kaW5nUXVldWUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kMzIgJiZcbiAgICAgICAgKChyZWR1Y2VyID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlKSwgbnVsbCAhPT0gcmVkdWNlcikpXG4gICAgKVxuICAgICAgdGhyb3cgcmVkdWNlcjtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgaG9vay5iYXNlU3RhdGUgPSBiYXNlRmlyc3Q7XG4gICAgaG9vay5iYXNlUXVldWUgPSBuZXdCYXNlUXVldWVMYXN0O1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICB9XG4gIG51bGwgPT09IGJhc2VRdWV1ZSAmJiAocXVldWUubGFuZXMgPSAwKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIHF1ZXVlLmRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgZGlzcGF0Y2ggPSBxdWV1ZS5kaXNwYXRjaCxcbiAgICBsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBxdWV1ZS5wZW5kaW5nLFxuICAgIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gbGFzdFJlbmRlclBoYXNlVXBkYXRlKSB7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IChsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUubmV4dCk7XG4gICAgZG8gKG5ld1N0YXRlID0gcmVkdWNlcihuZXdTdGF0ZSwgdXBkYXRlLmFjdGlvbikpLCAodXBkYXRlID0gdXBkYXRlLm5leHQpO1xuICAgIHdoaWxlICh1cGRhdGUgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSk7XG4gICAgb2JqZWN0SXMobmV3U3RhdGUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gICAgbnVsbCA9PT0gaG9vay5iYXNlUXVldWUgJiYgKGhvb2suYmFzZVN0YXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbiAgcmV0dXJuIFtuZXdTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuZnVuY3Rpb24gdXBkYXRlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGlzSHlkcmF0aW5nJGpzY29tcCQwID0gaXNIeWRyYXRpbmc7XG4gIGlmIChpc0h5ZHJhdGluZyRqc2NvbXAkMCkge1xuICAgIGlmICh2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQwNykpO1xuICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgfSBlbHNlIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgdmFyIHNuYXBzaG90Q2hhbmdlZCA9ICFvYmplY3RJcyhcbiAgICAoY3VycmVudEhvb2sgfHwgaG9vaykubWVtb2l6ZWRTdGF0ZSxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xuICBzbmFwc2hvdENoYW5nZWQgJiZcbiAgICAoKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGdldFNlcnZlclNuYXBzaG90KSwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xuICBob29rID0gaG9vay5xdWV1ZTtcbiAgdmFyIGNyZWF0ZSA9IHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaG9vaywgc3Vic2NyaWJlKTtcbiAgdXBkYXRlRWZmZWN0SW1wbCgyMDQ4LCA4LCBjcmVhdGUsIFtzdWJzY3JpYmVdKTtcbiAgaWYgKFxuICAgIGhvb2suZ2V0U25hcHNob3QgIT09IGdldFNuYXBzaG90IHx8XG4gICAgc25hcHNob3RDaGFuZ2VkIHx8XG4gICAgKG51bGwgIT09IHdvcmtJblByb2dyZXNzSG9vayAmJiB3b3JrSW5Qcm9ncmVzc0hvb2subWVtb2l6ZWRTdGF0ZS50YWcgJiAxKVxuICApIHtcbiAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgIHB1c2hTaW1wbGVFZmZlY3QoXG4gICAgICA5LFxuICAgICAgY3JlYXRlRWZmZWN0SW5zdGFuY2UoKSxcbiAgICAgIHVwZGF0ZVN0b3JlSW5zdGFuY2UuYmluZChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZmliZXIsXG4gICAgICAgIGhvb2ssXG4gICAgICAgIGdldFNlcnZlclNuYXBzaG90LFxuICAgICAgICBnZXRTbmFwc2hvdFxuICAgICAgKSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgfHxcbiAgICAgIDAgIT09IChyZW5kZXJMYW5lcyAmIDEyNCkgfHxcbiAgICAgIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCk7XG4gIH1cbiAgcmV0dXJuIGdldFNlcnZlclNuYXBzaG90O1xufVxuZnVuY3Rpb24gcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIHJlbmRlcmVkU25hcHNob3QpIHtcbiAgZmliZXIuZmxhZ3MgfD0gMTYzODQ7XG4gIGZpYmVyID0geyBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QsIHZhbHVlOiByZW5kZXJlZFNuYXBzaG90IH07XG4gIGdldFNuYXBzaG90ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGdldFNuYXBzaG90XG4gICAgPyAoKGdldFNuYXBzaG90ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZSA9IGdldFNuYXBzaG90KSxcbiAgICAgIChnZXRTbmFwc2hvdC5zdG9yZXMgPSBbZmliZXJdKSlcbiAgICA6ICgocmVuZGVyZWRTbmFwc2hvdCA9IGdldFNuYXBzaG90LnN0b3JlcyksXG4gICAgICBudWxsID09PSByZW5kZXJlZFNuYXBzaG90XG4gICAgICAgID8gKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pXG4gICAgICAgIDogcmVuZGVyZWRTbmFwc2hvdC5wdXNoKGZpYmVyKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdG9yZUluc3RhbmNlKGZpYmVyLCBpbnN0LCBuZXh0U25hcHNob3QsIGdldFNuYXBzaG90KSB7XG4gIGluc3QudmFsdWUgPSBuZXh0U25hcHNob3Q7XG4gIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDtcbiAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlVG9TdG9yZShmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSB7XG4gIHJldHVybiBzdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkgJiYgZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpIHtcbiAgdmFyIGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgaW5zdCA9IGluc3QudmFsdWU7XG4gIHRyeSB7XG4gICAgdmFyIG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFvYmplY3RJcyhpbnN0LCBuZXh0VmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAhMDtcbiAgfVxufVxuZnVuY3Rpb24gZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKSB7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDIpO1xufVxuZnVuY3Rpb24gbW91bnRTdGF0ZUltcGwoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBpbml0aWFsU3RhdGVJbml0aWFsaXplciA9IGluaXRpYWxTdGF0ZTtcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGhvb2sucXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIHJldHVybiBob29rO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudCwgcGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIHVwZGF0ZVJlZHVjZXJJbXBsKFxuICAgIGhvb2ssXG4gICAgY3VycmVudEhvb2ssXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVkdWNlciA/IHJlZHVjZXIgOiBiYXNpY1N0YXRlUmVkdWNlclxuICApO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hBY3Rpb25TdGF0ZShcbiAgZmliZXIsXG4gIGFjdGlvblF1ZXVlLFxuICBzZXRQZW5kaW5nU3RhdGUsXG4gIHNldFN0YXRlLFxuICBwYXlsb2FkXG4pIHtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4NSkpO1xuICBmaWJlciA9IGFjdGlvblF1ZXVlLmFjdGlvbjtcbiAgaWYgKG51bGwgIT09IGZpYmVyKSB7XG4gICAgdmFyIGFjdGlvbk5vZGUgPSB7XG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgYWN0aW9uOiBmaWJlcixcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgICBpc1RyYW5zaXRpb246ICEwLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBhY3Rpb25Ob2RlLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG51bGwgIT09IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlRcbiAgICAgID8gc2V0UGVuZGluZ1N0YXRlKCEwKVxuICAgICAgOiAoYWN0aW9uTm9kZS5pc1RyYW5zaXRpb24gPSAhMSk7XG4gICAgc2V0U3RhdGUoYWN0aW9uTm9kZSk7XG4gICAgc2V0UGVuZGluZ1N0YXRlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgICBudWxsID09PSBzZXRQZW5kaW5nU3RhdGVcbiAgICAgID8gKChhY3Rpb25Ob2RlLm5leHQgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gYWN0aW9uTm9kZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlKSlcbiAgICAgIDogKChhY3Rpb25Ob2RlLm5leHQgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gc2V0UGVuZGluZ1N0YXRlLm5leHQgPSBhY3Rpb25Ob2RlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBub2RlKSB7XG4gIHZhciBhY3Rpb24gPSBub2RlLmFjdGlvbixcbiAgICBwYXlsb2FkID0gbm9kZS5wYXlsb2FkLFxuICAgIHByZXZTdGF0ZSA9IGFjdGlvblF1ZXVlLnN0YXRlO1xuICBpZiAobm9kZS5pc1RyYW5zaXRpb24pIHtcbiAgICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGFjdGlvbihwcmV2U3RhdGUsIHBheWxvYWQpLFxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgICAgaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gICAgfVxuICB9IGVsc2VcbiAgICB0cnkge1xuICAgICAgKHByZXZUcmFuc2l0aW9uID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCkpLFxuICAgICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcHJldlRyYW5zaXRpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yJDM4KSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvciQzOCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKSB7XG4gIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgPyByZXR1cm5WYWx1ZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAobmV4dFN0YXRlKSB7XG4gICAgICAgICAgb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBub2RlLCBuZXh0U3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgOiBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbn1cbmZ1bmN0aW9uIG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgbmV4dFN0YXRlKSB7XG4gIGFjdGlvbk5vZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgYWN0aW9uTm9kZS52YWx1ZSA9IG5leHRTdGF0ZTtcbiAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpO1xuICBhY3Rpb25RdWV1ZS5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgIT09IGFjdGlvbk5vZGUgJiZcbiAgICAoKG5leHRTdGF0ZSA9IGFjdGlvbk5vZGUubmV4dCksXG4gICAgbmV4dFN0YXRlID09PSBhY3Rpb25Ob2RlXG4gICAgICA/IChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbClcbiAgICAgIDogKChuZXh0U3RhdGUgPSBuZXh0U3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25Ob2RlLm5leHQgPSBuZXh0U3RhdGUpLFxuICAgICAgICBydW5BY3Rpb25TdGF0ZUFjdGlvbihhY3Rpb25RdWV1ZSwgbmV4dFN0YXRlKSkpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgZXJyb3IpIHtcbiAgdmFyIGxhc3QgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgaWYgKG51bGwgIT09IGxhc3QpIHtcbiAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIGRvXG4gICAgICAoYWN0aW9uTm9kZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLFxuICAgICAgICAoYWN0aW9uTm9kZS5yZWFzb24gPSBlcnJvciksXG4gICAgICAgIG5vdGlmeUFjdGlvbkxpc3RlbmVycyhhY3Rpb25Ob2RlKSxcbiAgICAgICAgKGFjdGlvbk5vZGUgPSBhY3Rpb25Ob2RlLm5leHQpO1xuICAgIHdoaWxlIChhY3Rpb25Ob2RlICE9PSBsYXN0KTtcbiAgfVxuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBudWxsO1xufVxuZnVuY3Rpb24gbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpIHtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubGlzdGVuZXJzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGlvbk5vZGUubGVuZ3RoOyBpKyspICgwLCBhY3Rpb25Ob2RlW2ldKSgpO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVSZWR1Y2VyKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICByZXR1cm4gbmV3U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEFjdGlvblN0YXRlKGFjdGlvbiwgaW5pdGlhbFN0YXRlUHJvcCkge1xuICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICB2YXIgc3NyRm9ybVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290LmZvcm1TdGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gc3NyRm9ybVN0YXRlKSB7XG4gICAgICBhOiB7XG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcjtcbiAgICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgaWYgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG4gICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgdmFyIGluUm9vdE9yU2luZ2xldG9uID0gcm9vdE9yU2luZ2xldG9uQ29udGV4dDtcbiAgICAgICAgICAgICAgICA4ICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubm9kZVR5cGU7XG5cbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpblJvb3RPclNpbmdsZXRvbikge1xuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5Sb290T3JTaW5nbGV0b24gPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGF0YTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID1cbiAgICAgICAgICAgICAgICBcIkYhXCIgPT09IGluUm9vdE9yU2luZ2xldG9uIHx8IFwiRlwiID09PSBpblJvb3RPclNpbmdsZXRvblxuICAgICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDBcbiAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgICAgIFwiRiFcIiA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRhdGE7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgICAgfVxuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmIChpbml0aWFsU3RhdGVQcm9wID0gc3NyRm9ybVN0YXRlWzBdKTtcbiAgICB9XG4gIH1cbiAgc3NyRm9ybVN0YXRlID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgc3NyRm9ybVN0YXRlLm1lbW9pemVkU3RhdGUgPSBzc3JGb3JtU3RhdGUuYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlUHJvcDtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0ge1xuICAgIHBlbmRpbmc6IG51bGwsXG4gICAgbGFuZXM6IDAsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYWN0aW9uU3RhdGVSZWR1Y2VyLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVQcm9wXG4gIH07XG4gIHNzckZvcm1TdGF0ZS5xdWV1ZSA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgc3NyRm9ybVN0YXRlID0gZGlzcGF0Y2hTZXRTdGF0ZS5iaW5kKFxuICAgIG51bGwsXG4gICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRTdGF0ZUltcGwoITEpO1xuICBpblJvb3RPclNpbmdsZXRvbiA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAhMSxcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0ge1xuICAgIHN0YXRlOiBpbml0aWFsU3RhdGVQcm9wLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIHBlbmRpbmc6IG51bGxcbiAgfTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwO1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaEFjdGlvblN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAsXG4gICAgaW5Sb290T3JTaW5nbGV0b24sXG4gICAgc3NyRm9ybVN0YXRlXG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0Lm1lbW9pemVkU3RhdGUgPSBhY3Rpb247XG4gIHJldHVybiBbaW5pdGlhbFN0YXRlUHJvcCwgc3NyRm9ybVN0YXRlLCAhMV07XG59XG5mdW5jdGlvbiB1cGRhdGVBY3Rpb25TdGF0ZShhY3Rpb24pIHtcbiAgdmFyIHN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudEhvb2ssIGFjdGlvbik7XG59XG5mdW5jdGlvbiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50U3RhdGVIb29rLCBhY3Rpb24pIHtcbiAgY3VycmVudFN0YXRlSG9vayA9IHVwZGF0ZVJlZHVjZXJJbXBsKFxuICAgIHN0YXRlSG9vayxcbiAgICBjdXJyZW50U3RhdGVIb29rLFxuICAgIGFjdGlvblN0YXRlUmVkdWNlclxuICApWzBdO1xuICBzdGF0ZUhvb2sgPSB1cGRhdGVSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKVswXTtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rICYmXG4gICAgbnVsbCAhPT0gY3VycmVudFN0YXRlSG9vayAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGN1cnJlbnRTdGF0ZUhvb2sudGhlblxuICApXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0ZSA9IHVzZVRoZW5hYmxlKGN1cnJlbnRTdGF0ZUhvb2spO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIGlmICh4ID09PSBTdXNwZW5zZUV4Y2VwdGlvbikgdGhyb3cgU3VzcGVuc2VBY3Rpb25FeGNlcHRpb247XG4gICAgICB0aHJvdyB4O1xuICAgIH1cbiAgZWxzZSBzdGF0ZSA9IGN1cnJlbnRTdGF0ZUhvb2s7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIGFjdGlvblF1ZXVlID0gY3VycmVudFN0YXRlSG9vay5xdWV1ZSxcbiAgICBkaXNwYXRjaCA9IGFjdGlvblF1ZXVlLmRpc3BhdGNoO1xuICBhY3Rpb24gIT09IGN1cnJlbnRTdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIuZmxhZ3MgfD0gMjA0OCksXG4gICAgcHVzaFNpbXBsZUVmZmVjdChcbiAgICAgIDksXG4gICAgICBjcmVhdGVFZmZlY3RJbnN0YW5jZSgpLFxuICAgICAgYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QuYmluZChudWxsLCBhY3Rpb25RdWV1ZSwgYWN0aW9uKSxcbiAgICAgIG51bGxcbiAgICApKTtcbiAgcmV0dXJuIFtzdGF0ZSwgZGlzcGF0Y2gsIHN0YXRlSG9va107XG59XG5mdW5jdGlvbiBhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdChhY3Rpb25RdWV1ZSwgYWN0aW9uKSB7XG4gIGFjdGlvblF1ZXVlLmFjdGlvbiA9IGFjdGlvbjtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyQWN0aW9uU3RhdGUoYWN0aW9uKSB7XG4gIHZhciBzdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICBjdXJyZW50U3RhdGVIb29rID0gY3VycmVudEhvb2s7XG4gIGlmIChudWxsICE9PSBjdXJyZW50U3RhdGVIb29rKVxuICAgIHJldHVybiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50U3RhdGVIb29rLCBhY3Rpb24pO1xuICB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgc3RhdGVIb29rID0gc3RhdGVIb29rLm1lbW9pemVkU3RhdGU7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIGRpc3BhdGNoID0gY3VycmVudFN0YXRlSG9vay5xdWV1ZS5kaXNwYXRjaDtcbiAgY3VycmVudFN0YXRlSG9vay5tZW1vaXplZFN0YXRlID0gYWN0aW9uO1xuICByZXR1cm4gW3N0YXRlSG9vaywgZGlzcGF0Y2gsICExXTtcbn1cbmZ1bmN0aW9uIHB1c2hTaW1wbGVFZmZlY3QodGFnLCBpbnN0LCBjcmVhdGUsIGNyZWF0ZURlcHMpIHtcbiAgdGFnID0geyB0YWc6IHRhZywgY3JlYXRlOiBjcmVhdGUsIGRlcHM6IGNyZWF0ZURlcHMsIGluc3Q6IGluc3QsIG5leHQ6IG51bGwgfTtcbiAgaW5zdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBudWxsID09PSBpbnN0ICYmXG4gICAgKChpbnN0ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWUgPSBpbnN0KSk7XG4gIGNyZWF0ZSA9IGluc3QubGFzdEVmZmVjdDtcbiAgbnVsbCA9PT0gY3JlYXRlXG4gICAgPyAoaW5zdC5sYXN0RWZmZWN0ID0gdGFnLm5leHQgPSB0YWcpXG4gICAgOiAoKGNyZWF0ZURlcHMgPSBjcmVhdGUubmV4dCksXG4gICAgICAoY3JlYXRlLm5leHQgPSB0YWcpLFxuICAgICAgKHRhZy5uZXh0ID0gY3JlYXRlRGVwcyksXG4gICAgICAoaW5zdC5sYXN0RWZmZWN0ID0gdGFnKSk7XG4gIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiBjcmVhdGVFZmZlY3RJbnN0YW5jZSgpIHtcbiAgcmV0dXJuIHsgZGVzdHJveTogdm9pZCAwLCByZXNvdXJjZTogdm9pZCAwIH07XG59XG5mdW5jdGlvbiB1cGRhdGVSZWYoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnRFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIGhvb2tGbGFncywgY3JlYXRlLCBjcmVhdGVEZXBzKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgY3JlYXRlRGVwcyA9IHZvaWQgMCA9PT0gY3JlYXRlRGVwcyA/IG51bGwgOiBjcmVhdGVEZXBzO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5mbGFncyB8PSBmaWJlckZsYWdzO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoU2ltcGxlRWZmZWN0KFxuICAgIDEgfCBob29rRmxhZ3MsXG4gICAgY3JlYXRlRWZmZWN0SW5zdGFuY2UoKSxcbiAgICBjcmVhdGUsXG4gICAgY3JlYXRlRGVwc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRWZmZWN0SW1wbChmaWJlckZsYWdzLCBob29rRmxhZ3MsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBpbnN0ID0gaG9vay5tZW1vaXplZFN0YXRlLmluc3Q7XG4gIG51bGwgIT09IGN1cnJlbnRIb29rICYmXG4gIG51bGwgIT09IGRlcHMgJiZcbiAgYXJlSG9va0lucHV0c0VxdWFsKGRlcHMsIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUuZGVwcylcbiAgICA/IChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoU2ltcGxlRWZmZWN0KGhvb2tGbGFncywgaW5zdCwgY3JlYXRlLCBkZXBzKSlcbiAgICA6ICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIuZmxhZ3MgfD0gZmliZXJGbGFncyksXG4gICAgICAoaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaFNpbXBsZUVmZmVjdChcbiAgICAgICAgMSB8IGhvb2tGbGFncyxcbiAgICAgICAgaW5zdCxcbiAgICAgICAgY3JlYXRlLFxuICAgICAgICBkZXBzXG4gICAgICApKSk7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdChjcmVhdGUsIGNyZWF0ZURlcHMpIHtcbiAgbW91bnRFZmZlY3RJbXBsKDgzOTA2NTYsIDgsIGNyZWF0ZSwgY3JlYXRlRGVwcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBjcmVhdGVEZXBzKSB7XG4gIHVwZGF0ZUVmZmVjdEltcGwoMjA0OCwgOCwgY3JlYXRlLCBjcmVhdGVEZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QoY3JlYXRlLCByZWYpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZikge1xuICAgIGNyZWF0ZSA9IGNyZWF0ZSgpO1xuICAgIHZhciByZWZDbGVhbnVwID0gcmVmKGNyZWF0ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXAgPyByZWZDbGVhbnVwKCkgOiByZWYobnVsbCk7XG4gICAgfTtcbiAgfVxuICBpZiAobnVsbCAhPT0gcmVmICYmIHZvaWQgMCAhPT0gcmVmKVxuICAgIHJldHVybiAoXG4gICAgICAoY3JlYXRlID0gY3JlYXRlKCkpLFxuICAgICAgKHJlZi5jdXJyZW50ID0gY3JlYXRlKSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gIGRlcHMgPSBudWxsICE9PSBkZXBzICYmIHZvaWQgMCAhPT0gZGVwcyA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSwgZGVwcyk7XG59XG5mdW5jdGlvbiBtb3VudERlYnVnVmFsdWUoKSB7fVxuZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBbY2FsbGJhY2ssIGRlcHNdO1xuICByZXR1cm4gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vKG5leHRDcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBwcmV2U3RhdGUgPSBuZXh0Q3JlYXRlKCk7XG4gIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICB0cnkge1xuICAgICAgbmV4dENyZWF0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgfVxuICB9XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtwcmV2U3RhdGUsIGRlcHNdO1xuICByZXR1cm4gcHJldlN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmICh2b2lkIDAgPT09IGluaXRpYWxWYWx1ZSB8fCAwICE9PSAocmVuZGVyTGFuZXMgJiAxMDczNzQxODI0KSlcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5sYW5lcyB8PSBob29rO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gaG9vaztcbiAgcmV0dXJuIGluaXRpYWxWYWx1ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHByZXZWYWx1ZSwgdmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICBpZiAob2JqZWN0SXModmFsdWUsIHByZXZWYWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudClcbiAgICByZXR1cm4gKFxuICAgICAgKGhvb2sgPSBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpKSxcbiAgICAgIG9iamVjdElzKGhvb2ssIHByZXZWYWx1ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCksXG4gICAgICBob29rXG4gICAgKTtcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIDQyKSlcbiAgICByZXR1cm4gKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCksIChob29rLm1lbW9pemVkU3RhdGUgPSB2YWx1ZSk7XG4gIGhvb2sgPSByZXF1ZXN0RGVmZXJyZWRMYW5lKCk7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gcHJldlZhbHVlO1xufVxuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uKGZpYmVyLCBxdWV1ZSwgcGVuZGluZ1N0YXRlLCBmaW5pc2hlZFN0YXRlLCBjYWxsYmFjaykge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPVxuICAgIDAgIT09IHByZXZpb3VzUHJpb3JpdHkgJiYgOCA+IHByZXZpb3VzUHJpb3JpdHkgPyBwcmV2aW91c1ByaW9yaXR5IDogODtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCAhMSwgcXVldWUsIHBlbmRpbmdTdGF0ZSk7XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gY2FsbGJhY2soKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlID0gY2hhaW5UaGVuYWJsZVZhbHVlKFxuICAgICAgICByZXR1cm5WYWx1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZVxuICAgICAgKTtcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICB0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUsXG4gICAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKGZpYmVyKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICBmaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgZmliZXIsXG4gICAgICBxdWV1ZSxcbiAgICAgIHsgdGhlbjogZnVuY3Rpb24gKCkge30sIHN0YXR1czogXCJyZWplY3RlZFwiLCByZWFzb246IGVycm9yIH0sXG4gICAgICByZXF1ZXN0VXBkYXRlTGFuZSgpXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5mdW5jdGlvbiBzdGFydEhvc3RUcmFuc2l0aW9uKGZvcm1GaWJlciwgcGVuZGluZ1N0YXRlLCBhY3Rpb24sIGZvcm1EYXRhKSB7XG4gIGlmICg1ICE9PSBmb3JtRmliZXIudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NikpO1xuICB2YXIgcXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLnF1ZXVlO1xuICBzdGFydFRyYW5zaXRpb24oXG4gICAgZm9ybUZpYmVyLFxuICAgIHF1ZXVlLFxuICAgIHBlbmRpbmdTdGF0ZSxcbiAgICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIG51bGwgPT09IGFjdGlvblxuICAgICAgPyBub29wJDJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtRmliZXIpO1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZm9ybURhdGEpO1xuICAgICAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpIHtcbiAgdmFyIGV4aXN0aW5nU3RhdGVIb29rID0gZm9ybUZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBleGlzdGluZ1N0YXRlSG9vaykgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xuICBleGlzdGluZ1N0YXRlSG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIGJhc2VTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdFxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICB2YXIgaW5pdGlhbFJlc2V0U3RhdGUgPSB7fTtcbiAgZXhpc3RpbmdTdGF0ZUhvb2submV4dCA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZToge1xuICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgIGxhbmVzOiAwLFxuICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZVxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rO1xuICBmb3JtRmliZXIgPSBmb3JtRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmb3JtRmliZXIgJiYgKGZvcm1GaWJlci5tZW1vaXplZFN0YXRlID0gZXhpc3RpbmdTdGF0ZUhvb2spO1xuICByZXR1cm4gZXhpc3RpbmdTdGF0ZUhvb2s7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKSB7XG4gIHZhciByZXNldFN0YXRlUXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLm5leHQucXVldWU7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmb3JtRmliZXIsIHJlc2V0U3RhdGVRdWV1ZSwge30sIHJlcXVlc3RVcGRhdGVMYW5lKCkpO1xufVxuZnVuY3Rpb24gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMoKSB7XG4gIHJldHVybiByZWFkQ29udGV4dChIb3N0VHJhbnNpdGlvbkNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlSWQoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVmcmVzaCgpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiByZWZyZXNoQ2FjaGUoZmliZXIpIHtcbiAgZm9yICh2YXIgcHJvdmlkZXIgPSBmaWJlci5yZXR1cm47IG51bGwgIT09IHByb3ZpZGVyOyApIHtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyLnRhZykge1xuICAgICAgY2FzZSAyNDpcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgICAgICBmaWJlciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICAgICAgdmFyIHJvb3QkNDEgPSBlbnF1ZXVlVXBkYXRlKHByb3ZpZGVyLCBmaWJlciwgbGFuZSk7XG4gICAgICAgIG51bGwgIT09IHJvb3QkNDEgJiZcbiAgICAgICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QkNDEsIHByb3ZpZGVyLCBsYW5lKSxcbiAgICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QkNDEsIHByb3ZpZGVyLCBsYW5lKSk7XG4gICAgICAgIHByb3ZpZGVyID0geyBjYWNoZTogY3JlYXRlQ2FjaGUoKSB9O1xuICAgICAgICBmaWJlci5wYXlsb2FkID0gcHJvdmlkZXI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvdmlkZXIgPSBwcm92aWRlci5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoUmVkdWNlckFjdGlvbihmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpXG4gICAgPyBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIGFjdGlvbilcbiAgICA6ICgoYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKSksXG4gICAgICBudWxsICE9PSBhY3Rpb24gJiZcbiAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihhY3Rpb24sIGZpYmVyLCBsYW5lKSxcbiAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKGFjdGlvbiwgcXVldWUsIGxhbmUpKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkge1xuICB2YXIgdXBkYXRlID0ge1xuICAgIGxhbmU6IGxhbmUsXG4gICAgcmV2ZXJ0TGFuZTogMCxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIGVsc2Uge1xuICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKFxuICAgICAgMCA9PT0gZmliZXIubGFuZXMgJiZcbiAgICAgIChudWxsID09PSBhbHRlcm5hdGUgfHwgMCA9PT0gYWx0ZXJuYXRlLmxhbmVzKSAmJlxuICAgICAgKChhbHRlcm5hdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyKSwgbnVsbCAhPT0gYWx0ZXJuYXRlKVxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlID0gYWx0ZXJuYXRlKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdXBkYXRlLmhhc0VhZ2VyU3RhdGUgPSAhMDtcbiAgICAgICAgdXBkYXRlLmVhZ2VyU3RhdGUgPSBlYWdlclN0YXRlO1xuICAgICAgICBpZiAob2JqZWN0SXMoZWFnZXJTdGF0ZSwgY3VycmVudFN0YXRlKSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCAwKSxcbiAgICAgICAgICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgIH1cbiAgICBhY3Rpb24gPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICAgIGlmIChudWxsICE9PSBhY3Rpb24pXG4gICAgICByZXR1cm4gKFxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUoZmliZXIsIHRocm93SWZEdXJpbmdSZW5kZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uID0ge1xuICAgIGxhbmU6IDIsXG4gICAgcmV2ZXJ0TGFuZTogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCksXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkge1xuICAgIGlmICh0aHJvd0lmRHVyaW5nUmVuZGVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3OSkpO1xuICB9IGVsc2VcbiAgICAodGhyb3dJZkR1cmluZ1JlbmRlciA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICBhY3Rpb24sXG4gICAgICAyXG4gICAgKSksXG4gICAgICBudWxsICE9PSB0aHJvd0lmRHVyaW5nUmVuZGVyICYmXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcih0aHJvd0lmRHVyaW5nUmVuZGVyLCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIHJldHVybiAoXG4gICAgZmliZXIgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyIHx8XG4gICAgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyKVxuICApO1xufVxuZnVuY3Rpb24gZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlKHF1ZXVlLCB1cGRhdGUpIHtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9XG4gICAgITA7XG4gIHZhciBwZW5kaW5nID0gcXVldWUucGVuZGluZztcbiAgbnVsbCA9PT0gcGVuZGluZ1xuICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgcXVldWUucGVuZGluZyA9IHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShyb290LCBxdWV1ZSwgbGFuZSkge1xuICBpZiAoMCAhPT0gKGxhbmUgJiA0MTk0MDQ4KSkge1xuICAgIHZhciBxdWV1ZUxhbmVzID0gcXVldWUubGFuZXM7XG4gICAgcXVldWVMYW5lcyAmPSByb290LnBlbmRpbmdMYW5lcztcbiAgICBsYW5lIHw9IHF1ZXVlTGFuZXM7XG4gICAgcXVldWUubGFuZXMgPSBsYW5lO1xuICAgIG1hcmtSb290RW50YW5nbGVkKHJvb3QsIGxhbmUpO1xuICB9XG59XG52YXIgQ29udGV4dE9ubHlEaXNwYXRjaGVyID0ge1xuICAgIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2U6IHVzZSxcbiAgICB1c2VDYWxsYmFjazogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUNvbnRleHQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlTGF5b3V0RWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlTWVtbzogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZVJlZHVjZXI6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VSZWY6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VTdGF0ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZURlYnVnVmFsdWU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlVHJhbnNpdGlvbjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlSWQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VIb3N0VHJhbnNpdGlvblN0YXR1czogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUZvcm1TdGF0ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUFjdGlvblN0YXRlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlT3B0aW1pc3RpYzogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZU1lbW9DYWNoZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUNhY2hlUmVmcmVzaDogdGhyb3dJbnZhbGlkSG9va0Vycm9yXG4gIH0sXG4gIEhvb2tzRGlzcGF0Y2hlck9uTW91bnQgPSB7XG4gICAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZTogdXNlLFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IFtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzXG4gICAgICBdO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gICAgdXNlRWZmZWN0OiBtb3VudEVmZmVjdCxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGRlcHMgPSBudWxsICE9PSBkZXBzICYmIHZvaWQgMCAhPT0gZGVwcyA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gICAgICBtb3VudEVmZmVjdEltcGwoXG4gICAgICAgIDQxOTQzMDgsXG4gICAgICAgIDQsXG4gICAgICAgIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QuYmluZChudWxsLCBjcmVhdGUsIHJlZiksXG4gICAgICAgIGRlcHNcbiAgICAgICk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIHJldHVybiBtb3VudEVmZmVjdEltcGwoNDE5NDMwOCwgNCwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgbW91bnRFZmZlY3RJbXBsKDQsIDIsIGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VNZW1vOiBmdW5jdGlvbiAobmV4dENyZWF0ZSwgZGVwcykge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICAgICAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV4dENyZWF0ZSgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgZGVwc107XG4gICAgICByZXR1cm4gbmV4dFZhbHVlO1xuICAgIH0sXG4gICAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IGluaXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW5pdChpbml0aWFsQXJnKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxBcmc7XG4gICAgICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgIHJlZHVjZXIgPSB7XG4gICAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICAgIGxhbmVzOiAwLFxuICAgICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogcmVkdWNlcixcbiAgICAgICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxTdGF0ZVxuICAgICAgfTtcbiAgICAgIGhvb2sucXVldWUgPSByZWR1Y2VyO1xuICAgICAgcmVkdWNlciA9IHJlZHVjZXIuZGlzcGF0Y2ggPSBkaXNwYXRjaFJlZHVjZXJBY3Rpb24uYmluZChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgICAgIHJlZHVjZXJcbiAgICAgICk7XG4gICAgICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgcmVkdWNlcl07XG4gICAgfSxcbiAgICB1c2VSZWY6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIGluaXRpYWxWYWx1ZSA9IHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH07XG4gICAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGluaXRpYWxWYWx1ZSk7XG4gICAgfSxcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgICAgaW5pdGlhbFN0YXRlID0gbW91bnRTdGF0ZUltcGwoaW5pdGlhbFN0YXRlKTtcbiAgICAgIHZhciBxdWV1ZSA9IGluaXRpYWxTdGF0ZS5xdWV1ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIsIHF1ZXVlKTtcbiAgICAgIHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gICAgICByZXR1cm4gW2luaXRpYWxTdGF0ZS5tZW1vaXplZFN0YXRlLCBkaXNwYXRjaF07XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gICAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlSG9vayA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgICAgIHN0YXRlSG9vayA9IHN0YXJ0VHJhbnNpdGlvbi5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAgICAgc3RhdGVIb29rLnF1ZXVlLFxuICAgICAgICAhMCxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgICBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSBzdGF0ZUhvb2s7XG4gICAgICByZXR1cm4gWyExLCBzdGF0ZUhvb2tdO1xuICAgIH0sXG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmU6IGZ1bmN0aW9uIChzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICAgICAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgICAgIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90KVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdClcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0OSkpO1xuICAgICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiAxMjQpIHx8XG4gICAgICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgICAgIH1cbiAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGdldFNlcnZlclNuYXBzaG90O1xuICAgICAgdmFyIGluc3QgPSB7IHZhbHVlOiBnZXRTZXJ2ZXJTbmFwc2hvdCwgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90IH07XG4gICAgICBob29rLnF1ZXVlID0gaW5zdDtcbiAgICAgIG1vdW50RWZmZWN0KHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSwgW1xuICAgICAgICBzdWJzY3JpYmVcbiAgICAgIF0pO1xuICAgICAgZmliZXIuZmxhZ3MgfD0gMjA0ODtcbiAgICAgIHB1c2hTaW1wbGVFZmZlY3QoXG4gICAgICAgIDksXG4gICAgICAgIGNyZWF0ZUVmZmVjdEluc3RhbmNlKCksXG4gICAgICAgIHVwZGF0ZVN0b3JlSW5zdGFuY2UuYmluZChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZpYmVyLFxuICAgICAgICAgIGluc3QsXG4gICAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICAgKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgICB9LFxuICAgIHVzZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgICAgIGlkZW50aWZpZXJQcmVmaXggPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuaWRlbnRpZmllclByZWZpeDtcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdHJlZUNvbnRleHRPdmVyZmxvdztcbiAgICAgICAgdmFyIGlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgIChcbiAgICAgICAgICAgIGlkV2l0aExlYWRpbmdCaXQgJiB+KDEgPDwgKDMyIC0gY2x6MzIoaWRXaXRoTGVhZGluZ0JpdCkgLSAxKSlcbiAgICAgICAgICApLnRvU3RyaW5nKDMyKSArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgICAgXCJcXHUwMGFiXCIgKyBpZGVudGlmaWVyUHJlZml4ICsgXCJSXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGxvY2FsSWRDb3VudGVyKys7XG4gICAgICAgIDAgPCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAgICAgICAoaWRlbnRpZmllclByZWZpeCArPSBcIkhcIiArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikpO1xuICAgICAgICBpZGVudGlmaWVyUHJlZml4ICs9IFwiXFx1MDBiYlwiO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnbG9iYWxDbGllbnRJZENvdW50ZXIrKyksXG4gICAgICAgICAgKGlkZW50aWZpZXJQcmVmaXggPVxuICAgICAgICAgICAgXCJcXHUwMGFiXCIgK1xuICAgICAgICAgICAgaWRlbnRpZmllclByZWZpeCArXG4gICAgICAgICAgICBcInJcIiArXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQudG9TdHJpbmcoMzIpICtcbiAgICAgICAgICAgIFwiXFx1MDBiYlwiKTtcbiAgICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gaWRlbnRpZmllclByZWZpeCk7XG4gICAgfSxcbiAgICB1c2VIb3N0VHJhbnNpdGlvblN0YXR1czogdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMsXG4gICAgdXNlRm9ybVN0YXRlOiBtb3VudEFjdGlvblN0YXRlLFxuICAgIHVzZUFjdGlvblN0YXRlOiBtb3VudEFjdGlvblN0YXRlLFxuICAgIHVzZU9wdGltaXN0aWM6IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCkge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgICAgIHZhciBxdWV1ZSA9IHtcbiAgICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgICAgbGFuZXM6IDAsXG4gICAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBudWxsLFxuICAgICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogbnVsbFxuICAgICAgfTtcbiAgICAgIGhvb2sucXVldWUgPSBxdWV1ZTtcbiAgICAgIGhvb2sgPSBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAgICAgITAsXG4gICAgICAgIHF1ZXVlXG4gICAgICApO1xuICAgICAgcXVldWUuZGlzcGF0Y2ggPSBob29rO1xuICAgICAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9va107XG4gICAgfSxcbiAgICB1c2VNZW1vQ2FjaGU6IHVzZU1lbW9DYWNoZSxcbiAgICB1c2VDYWNoZVJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAobW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gcmVmcmVzaENhY2hlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyXG4gICAgICApKTtcbiAgICB9XG4gIH0sXG4gIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlID0ge1xuICAgIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2U6IHVzZSxcbiAgICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gICAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gICAgdXNlRWZmZWN0OiB1cGRhdGVFZmZlY3QsXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgICB1c2VJbnNlcnRpb25FZmZlY3Q6IHVwZGF0ZUluc2VydGlvbkVmZmVjdCxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IHVwZGF0ZUxheW91dEVmZmVjdCxcbiAgICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICAgIHVzZVJlZHVjZXI6IHVwZGF0ZVJlZHVjZXIsXG4gICAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1cGRhdGVSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKTtcbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgICAgaG9vayxcbiAgICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGluaXRpYWxWYWx1ZVxuICAgICAgKTtcbiAgICB9LFxuICAgIHVzZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICAgIDogdXNlVGhlbmFibGUoYm9vbGVhbk9yVGhlbmFibGUpLFxuICAgICAgICBzdGFydFxuICAgICAgXTtcbiAgICB9LFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgICB1c2VJZDogdXBkYXRlSWQsXG4gICAgdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM6IHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzLFxuICAgIHVzZUZvcm1TdGF0ZTogdXBkYXRlQWN0aW9uU3RhdGUsXG4gICAgdXNlQWN0aW9uU3RhdGU6IHVwZGF0ZUFjdGlvblN0YXRlLFxuICAgIHVzZU9wdGltaXN0aWM6IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICAgICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50SG9vaywgcGFzc3Rocm91Z2gsIHJlZHVjZXIpO1xuICAgIH0sXG4gICAgdXNlTWVtb0NhY2hlOiB1c2VNZW1vQ2FjaGUsXG4gICAgdXNlQ2FjaGVSZWZyZXNoOiB1cGRhdGVSZWZyZXNoXG4gIH0sXG4gIEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIgPSB7XG4gICAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZTogdXNlLFxuICAgIHVzZUNhbGxiYWNrOiB1cGRhdGVDYWxsYmFjayxcbiAgICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlLFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogdXBkYXRlSW5zZXJ0aW9uRWZmZWN0LFxuICAgIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICAgIHVzZU1lbW86IHVwZGF0ZU1lbW8sXG4gICAgdXNlUmVkdWNlcjogcmVyZW5kZXJSZWR1Y2VyLFxuICAgIHVzZVJlZjogdXBkYXRlUmVmLFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVyZW5kZXJSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKTtcbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiBudWxsID09PSBjdXJyZW50SG9va1xuICAgICAgICA/IG1vdW50RGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgdmFsdWUsIGluaXRpYWxWYWx1ZSlcbiAgICAgICAgOiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgICAgICAgIGhvb2ssXG4gICAgICAgICAgICBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWVcbiAgICAgICAgICApO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJvb2xlYW5PclRoZW5hYmxlID0gcmVyZW5kZXJSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKVswXSxcbiAgICAgICAgc3RhcnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICAgID8gYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgICAgc3RhcnRcbiAgICAgIF07XG4gICAgfSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogdXBkYXRlU3luY0V4dGVybmFsU3RvcmUsXG4gICAgdXNlSWQ6IHVwZGF0ZUlkLFxuICAgIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzOiB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cyxcbiAgICB1c2VGb3JtU3RhdGU6IHJlcmVuZGVyQWN0aW9uU3RhdGUsXG4gICAgdXNlQWN0aW9uU3RhdGU6IHJlcmVuZGVyQWN0aW9uU3RhdGUsXG4gICAgdXNlT3B0aW1pc3RpYzogZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gICAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRIb29rKVxuICAgICAgICByZXR1cm4gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudEhvb2ssIHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbiAgICAgIGhvb2suYmFzZVN0YXRlID0gcGFzc3Rocm91Z2g7XG4gICAgICByZXR1cm4gW3Bhc3N0aHJvdWdoLCBob29rLnF1ZXVlLmRpc3BhdGNoXTtcbiAgICB9LFxuICAgIHVzZU1lbW9DYWNoZTogdXNlTWVtb0NhY2hlLFxuICAgIHVzZUNhY2hlUmVmcmVzaDogdXBkYXRlUmVmcmVzaFxuICB9LFxuICB0aGVuYWJsZVN0YXRlID0gbnVsbCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwO1xuZnVuY3Rpb24gdW53cmFwVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXI7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUgJiYgKHRoZW5hYmxlU3RhdGUgPSBbXSk7XG4gIHJldHVybiB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpO1xufVxuZnVuY3Rpb24gY29lcmNlUmVmKHdvcmtJblByb2dyZXNzLCBlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBlbGVtZW50LnByb3BzLnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmID0gdm9pZCAwICE9PSBlbGVtZW50ID8gZWxlbWVudCA6IG51bGw7XG59XG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSlcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyNSkpO1xuICByZXR1cm5GaWJlciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCk7XG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICAzMSxcbiAgICAgIFwiW29iamVjdCBPYmplY3RdXCIgPT09IHJldHVybkZpYmVyXG4gICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICA6IHJldHVybkZpYmVyXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUxhenkobGF6eVR5cGUpIHtcbiAgdmFyIGluaXQgPSBsYXp5VHlwZS5faW5pdDtcbiAgcmV0dXJuIGluaXQobGF6eVR5cGUuX3BheWxvYWQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgdmFyIGRlbGV0aW9ucyA9IHJldHVybkZpYmVyLmRlbGV0aW9ucztcbiAgICAgIG51bGwgPT09IGRlbGV0aW9uc1xuICAgICAgICA/ICgocmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdKSwgKHJldHVybkZpYmVyLmZsYWdzIHw9IDE2KSlcbiAgICAgICAgOiBkZWxldGlvbnMucHVzaChjaGlsZFRvRGVsZXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKDsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG1hcFJlbWFpbmluZ0NoaWxkcmVuKGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgZm9yICh2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG5ldyBNYXAoKTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkLmtleVxuICAgICAgICA/IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmtleSwgY3VycmVudEZpcnN0Q2hpbGQpXG4gICAgICAgIDogZXhpc3RpbmdDaGlsZHJlbi5zZXQoY3VycmVudEZpcnN0Q2hpbGQuaW5kZXgsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cbiAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHBlbmRpbmdQcm9wcykge1xuICAgIGZpYmVyID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZmliZXIsIHBlbmRpbmdQcm9wcyk7XG4gICAgZmliZXIuaW5kZXggPSAwO1xuICAgIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpXG4gICAgICByZXR1cm4gKG5ld0ZpYmVyLmZsYWdzIHw9IDEwNDg1NzYpLCBsYXN0UGxhY2VkSW5kZXg7XG4gICAgbmV3SW5kZXggPSBuZXdGaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgIT09IG5ld0luZGV4KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0luZGV4ID0gbmV3SW5kZXguaW5kZXgpLFxuICAgICAgICBuZXdJbmRleCA8IGxhc3RQbGFjZWRJbmRleFxuICAgICAgICAgID8gKChuZXdGaWJlci5mbGFncyB8PSA2NzEwODg2NiksIGxhc3RQbGFjZWRJbmRleClcbiAgICAgICAgICA6IG5ld0luZGV4XG4gICAgICApO1xuICAgIG5ld0ZpYmVyLmZsYWdzIHw9IDY3MTA4ODY2O1xuICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VTaW5nbGVDaGlsZChuZXdGaWJlcikge1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgKG5ld0ZpYmVyLmZsYWdzIHw9IDY3MTA4ODY2KTtcbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnQsIHRleHRDb250ZW50LCBsYW5lcykge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDYgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIHRleHRDb250ZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQsIGxhbmVzKSB7XG4gICAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICAgIGlmIChlbGVtZW50VHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSlcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGxhbmVzLFxuICAgICAgICBlbGVtZW50LmtleVxuICAgICAgKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoY3VycmVudC5lbGVtZW50VHlwZSA9PT0gZWxlbWVudFR5cGUgfHxcbiAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIG51bGwgIT09IGVsZW1lbnRUeXBlICYmXG4gICAgICAgICAgZWxlbWVudFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgIHJlc29sdmVMYXp5KGVsZW1lbnRUeXBlKSA9PT0gY3VycmVudC50eXBlKSlcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMpKSxcbiAgICAgICAgY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIGVsZW1lbnQudHlwZSxcbiAgICAgIGVsZW1lbnQua2V5LFxuICAgICAgZWxlbWVudC5wcm9wcyxcbiAgICAgIG51bGwsXG4gICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgbGFuZXNcbiAgICApO1xuICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBsYW5lcykge1xuICAgIGlmIChcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgIDQgIT09IGN1cnJlbnQudGFnIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBwb3J0YWwuY2hpbGRyZW4gfHwgW10pO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGZyYWdtZW50LCBsYW5lcywga2V5KSB7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgNyAhPT0gY3VycmVudC50YWcpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAga2V5XG4gICAgICAgICkpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGZyYWdtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21UZXh0KFxuICAgICAgICAgIFwiXCIgKyBuZXdDaGlsZCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBuZXdDaGlsZFxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICBuZXdDaGlsZCA9IGluaXQobmV3Q2hpbGQuX3BheWxvYWQpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksIGxhbmVzKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHZhciBrZXkgPSBudWxsICE9PSBvbGRGaWJlciA/IG9sZEZpYmVyLmtleSA6IG51bGw7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGwgIT09IGtleVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgb2xkRmliZXIsIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKFxuICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgcmV0dXJuRmliZXIsXG4gICAgbmV3SWR4LFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChleGlzdGluZ0NoaWxkcmVuID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsKSxcbiAgICAgICAgdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICApO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPVxuICAgICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmdldChcbiAgICAgICAgICAgICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgKSB8fCBudWxsKSxcbiAgICAgICAgICAgIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgICAgdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKSB7XG4gICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeFxuICAgICAgICA/ICgobmV4dE9sZEZpYmVyID0gb2xkRmliZXIpLCAob2xkRmliZXIgPSBudWxsKSlcbiAgICAgICAgOiAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZyk7XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICBvbGRGaWJlciAmJlxuICAgICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChuZXdGaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCk7XG4gICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcilcbiAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXIpO1xuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKVxuICAgICAgICAob2xkRmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBvbGRGaWJlciAmJlxuICAgICAgICAgICAgKChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG9sZEZpYmVyKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBvbGRGaWJlciksXG4gICAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IG9sZEZpYmVyKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgbmV3SWR4KytcbiAgICApXG4gICAgICAobmV4dE9sZEZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBuZXdJZHgsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApKSxcbiAgICAgICAgbnVsbCAhPT0gbmV4dE9sZEZpYmVyICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIG9sZEZpYmVyLmRlbGV0ZShcbiAgICAgICAgICAgICAgbnVsbCA9PT0gbmV4dE9sZEZpYmVyLmtleSA/IG5ld0lkeCA6IG5leHRPbGRGaWJlci5rZXlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChcbiAgICAgICAgICAgIG5leHRPbGRGaWJlcixcbiAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgKSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5leHRPbGRGaWJlcilcbiAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5leHRPbGRGaWJlciksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBuZXh0T2xkRmliZXIpKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChudWxsID09IG5ld0NoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MSkpO1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbCxcbiAgICAgICAgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIHN0ZXAudmFsdWUsIGxhbmVzKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAoc3RlcC5kb25lKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKSxcbiAgICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpLFxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkXG4gICAgICApO1xuICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKVxuICAgICAgICAoc3RlcCA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICAgIG51bGwgIT09IHN0ZXAgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKHN0ZXAsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IHN0ZXApLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgIXN0ZXAuZG9uZTtcbiAgICAgIG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpXG4gICAgKVxuICAgICAgKHN0ZXAgPSB1cGRhdGVGcm9tTWFwKG9sZEZpYmVyLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHN0ZXAuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUobnVsbCA9PT0gc3RlcC5rZXkgPyBuZXdJZHggOiBzdGVwLmtleSksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IHN0ZXApKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGQsXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmXG4gICAgICBudWxsICE9PSBuZXdDaGlsZCAmJlxuICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJlxuICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ICYmXG4gICAgICAobmV3Q2hpbGQgPSBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgPSBuZXdDaGlsZC5rZXk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gbmV3Q2hpbGQudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNyA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuZWxlbWVudFR5cGUgPT09IGtleSB8fFxuICAgICAgICAgICAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBrZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0ga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVMYXp5KGtleSkgPT09IGN1cnJlbnRGaXJzdENoaWxkLnR5cGUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5wcm9wcyk7XG4gICAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFXG4gICAgICAgICAgICAgID8gKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAoa2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSlcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICA0ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWcgJiZcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5jb250YWluZXJJbmZvICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICBrZXkgPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGtleSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTApKTtcbiAgICAgICAgbmV3Q2hpbGQgPSBrZXkuY2FsbChuZXdDaGlsZCk7XG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICAgID8gKChuZXdDaGlsZCA9IFwiXCIgKyBuZXdDaGlsZCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkICYmIDYgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZ1xuICAgICAgICAgID8gKGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKSxcbiAgICAgICAgICAgIChsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCkpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICA6IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVGV4dChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpLFxuICAgICAgICBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKSlcbiAgICAgIDogZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgICAgIHZhciBmaXJzdENoaWxkRmliZXIgPSByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgdGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gZmlyc3RDaGlsZEZpYmVyO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIGlmICh4ID09PSBTdXNwZW5zZUV4Y2VwdGlvbiB8fCB4ID09PSBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvbikgdGhyb3cgeDtcbiAgICAgIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDI5LCB4LCBudWxsLCByZXR1cm5GaWJlci5tb2RlKTtcbiAgICAgIGZpYmVyLmxhbmVzID0gbGFuZXM7XG4gICAgICBmaWJlci5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBmaWJlcjtcbiAgICB9IGZpbmFsbHkge1xuICAgIH1cbiAgfTtcbn1cbnZhciByZWNvbmNpbGVDaGlsZEZpYmVycyA9IGNyZWF0ZUNoaWxkUmVjb25jaWxlcighMCksXG4gIG1vdW50Q2hpbGRGaWJlcnMgPSBjcmVhdGVDaGlsZFJlY29uY2lsZXIoITEpLFxuICBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgc2hlbGxCb3VuZGFyeSA9IG51bGw7XG5mdW5jdGlvbiBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIoaGFuZGxlcikge1xuICB2YXIgY3VycmVudCA9IGhhbmRsZXIuYWx0ZXJuYXRlO1xuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBoYW5kbGVyKTtcbiAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSAmJlxuICAgIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgPyAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpXG4gICAgICA6IG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJiAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpKTtcbn1cbmZ1bmN0aW9uIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgaWYgKDIyID09PSBmaWJlci50YWcpIHtcbiAgICBpZiAoXG4gICAgICAocHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSlcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKHNoZWxsQm91bmRhcnkgPSBmaWJlcik7XG4gICAgfVxuICB9IGVsc2UgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjaygpIHtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcFN1c3BlbnNlSGFuZGxlcihmaWJlcikge1xuICBwb3Aoc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IpO1xuICBzaGVsbEJvdW5kYXJ5ID09PSBmaWJlciAmJiAoc2hlbGxCb3VuZGFyeSA9IG51bGwpO1xuICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIGZpbmRGaXJzdFN1c3BlbmRlZChyb3cpIHtcbiAgZm9yICh2YXIgbm9kZSA9IHJvdzsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgaWYgKDEzID09PSBub2RlLnRhZykge1xuICAgICAgdmFyIHN0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBzdGF0ZSAmJlxuICAgICAgICAoKHN0YXRlID0gc3RhdGUuZGVoeWRyYXRlZCksXG4gICAgICAgIG51bGwgPT09IHN0YXRlIHx8XG4gICAgICAgICAgXCIkP1wiID09PSBzdGF0ZS5kYXRhIHx8XG4gICAgICAgICAgaXNTdXNwZW5zZUluc3RhbmNlRmFsbGJhY2soc3RhdGUpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKDE5ID09PSBub2RlLnRhZyAmJiB2b2lkIDAgIT09IG5vZGUubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcikge1xuICAgICAgaWYgKDAgIT09IChub2RlLmZsYWdzICYgMTI4KSkgcmV0dXJuIG5vZGU7XG4gICAgfSBlbHNlIGlmIChudWxsICE9PSBub2RlLmNoaWxkKSB7XG4gICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gcm93KSBicmVhaztcbiAgICBmb3IgKDsgbnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gcm93KSByZXR1cm4gbnVsbDtcbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGN0b3IsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgbmV4dFByb3BzXG4pIHtcbiAgY3RvciA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIGN0b3IpO1xuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPVxuICAgIG51bGwgPT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCB2b2lkIDAgPT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1xuICAgICAgPyBjdG9yXG4gICAgICA6IGFzc2lnbih7fSwgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKTtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3MubGFuZXMgJiZcbiAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKTtcbn1cbnZhciBjbGFzc0NvbXBvbmVudFVwZGF0ZXIgPSB7XG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKGluc3QsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIHBheWxvYWQgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gcGF5bG9hZCAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihwYXlsb2FkLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMocGF5bG9hZCwgaW5zdCwgbGFuZSkpO1xuICB9LFxuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoaW5zdCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS50YWcgPSAxO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgcGF5bG9hZCA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBwYXlsb2FkICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHBheWxvYWQsIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhwYXlsb2FkLCBpbnN0LCBsYW5lKSk7XG4gIH0sXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKGluc3QsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUudGFnID0gMjtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgY2FsbGJhY2sgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gY2FsbGJhY2sgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIoY2FsbGJhY2ssIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhjYWxsYmFjaywgaW5zdCwgbGFuZSkpO1xuICB9XG59O1xuZnVuY3Rpb24gY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUoXG4gIHdvcmtJblByb2dyZXNzLFxuICBjdG9yLFxuICBvbGRQcm9wcyxcbiAgbmV3UHJvcHMsXG4gIG9sZFN0YXRlLFxuICBuZXdTdGF0ZSxcbiAgbmV4dENvbnRleHRcbikge1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdvcmtJblByb2dyZXNzLnNob3VsZENvbXBvbmVudFVwZGF0ZVxuICAgID8gd29ya0luUHJvZ3Jlc3Muc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpXG4gICAgOiBjdG9yLnByb3RvdHlwZSAmJiBjdG9yLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudFxuICAgICAgPyAhc2hhbGxvd0VxdWFsKG9sZFByb3BzLCBuZXdQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChvbGRTdGF0ZSwgbmV3U3RhdGUpXG4gICAgICA6ICEwO1xufVxuZnVuY3Rpb24gY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoXG4gIHdvcmtJblByb2dyZXNzLFxuICBpbnN0YW5jZSxcbiAgbmV3UHJvcHMsXG4gIG5leHRDb250ZXh0XG4pIHtcbiAgd29ya0luUHJvZ3Jlc3MgPSBpbnN0YW5jZS5zdGF0ZTtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAmJlxuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICBpbnN0YW5jZS5zdGF0ZSAhPT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShpbnN0YW5jZSwgaW5zdGFuY2Uuc3RhdGUsIG51bGwpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoQ29tcG9uZW50LCBiYXNlUHJvcHMpIHtcbiAgdmFyIG5ld1Byb3BzID0gYmFzZVByb3BzO1xuICBpZiAoXCJyZWZcIiBpbiBiYXNlUHJvcHMpIHtcbiAgICBuZXdQcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGJhc2VQcm9wcylcbiAgICAgIFwicmVmXCIgIT09IHByb3BOYW1lICYmIChuZXdQcm9wc1twcm9wTmFtZV0gPSBiYXNlUHJvcHNbcHJvcE5hbWVdKTtcbiAgfVxuICBpZiAoKENvbXBvbmVudCA9IENvbXBvbmVudC5kZWZhdWx0UHJvcHMpKSB7XG4gICAgbmV3UHJvcHMgPT09IGJhc2VQcm9wcyAmJiAobmV3UHJvcHMgPSBhc3NpZ24oe30sIG5ld1Byb3BzKSk7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUkNzMgaW4gQ29tcG9uZW50KVxuICAgICAgdm9pZCAwID09PSBuZXdQcm9wc1twcm9wTmFtZSQ3M10gJiZcbiAgICAgICAgKG5ld1Byb3BzW3Byb3BOYW1lJDczXSA9IENvbXBvbmVudFtwcm9wTmFtZSQ3M10pO1xuICB9XG4gIHJldHVybiBuZXdQcm9wcztcbn1cbnZhciByZXBvcnRHbG9iYWxFcnJvciA9XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlcG9ydEVycm9yXG4gICAgPyByZXBvcnRFcnJvclxuICAgIDogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygd2luZG93ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd2luZG93LkVycm9yRXZlbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IHdpbmRvdy5FcnJvckV2ZW50KFwiZXJyb3JcIiwge1xuICAgICAgICAgICAgYnViYmxlczogITAsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiAhMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlcnJvciAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBlcnJvciAmJlxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCF3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCkpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvY2VzcyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByb2Nlc3MuZW1pdFxuICAgICAgICApIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoXCJ1bmNhdWdodEV4Y2VwdGlvblwiLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfTtcbmZ1bmN0aW9uIGRlZmF1bHRPblVuY2F1Z2h0RXJyb3IoZXJyb3IpIHtcbiAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uQ2F1Z2h0RXJyb3IoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yKGVycm9yKSB7XG4gIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGxvZ1VuY2F1Z2h0RXJyb3Iocm9vdCwgZXJyb3JJbmZvKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9uVW5jYXVnaHRFcnJvciA9IHJvb3Qub25VbmNhdWdodEVycm9yO1xuICAgIG9uVW5jYXVnaHRFcnJvcihlcnJvckluZm8udmFsdWUsIHsgY29tcG9uZW50U3RhY2s6IGVycm9ySW5mby5zdGFjayB9KTtcbiAgfSBjYXRjaCAoZSQ3NCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZSQ3NDtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gbG9nQ2F1Z2h0RXJyb3Iocm9vdCwgYm91bmRhcnksIGVycm9ySW5mbykge1xuICB0cnkge1xuICAgIHZhciBvbkNhdWdodEVycm9yID0gcm9vdC5vbkNhdWdodEVycm9yO1xuICAgIG9uQ2F1Z2h0RXJyb3IoZXJyb3JJbmZvLnZhbHVlLCB7XG4gICAgICBjb21wb25lbnRTdGFjazogZXJyb3JJbmZvLnN0YWNrLFxuICAgICAgZXJyb3JCb3VuZGFyeTogMSA9PT0gYm91bmRhcnkudGFnID8gYm91bmRhcnkuc3RhdGVOb2RlIDogbnVsbFxuICAgIH0pO1xuICB9IGNhdGNoIChlJDc1KSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlJDc1O1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSb290RXJyb3JVcGRhdGUocm9vdCwgZXJyb3JJbmZvLCBsYW5lKSB7XG4gIGxhbmUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGxhbmUudGFnID0gMztcbiAgbGFuZS5wYXlsb2FkID0geyBlbGVtZW50OiBudWxsIH07XG4gIGxhbmUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihyb290LCBlcnJvckluZm8pO1xuICB9O1xuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUobGFuZSkge1xuICBsYW5lID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICBsYW5lLnRhZyA9IDM7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUodXBkYXRlLCByb290LCBmaWJlciwgZXJyb3JJbmZvKSB7XG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPSBmaWJlci50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcikge1xuICAgIHZhciBlcnJvciA9IGVycm9ySW5mby52YWx1ZTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgdXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ2F1Z2h0RXJyb3Iocm9vdCwgZmliZXIsIGVycm9ySW5mbyk7XG4gICAgfTtcbiAgfVxuICB2YXIgaW5zdCA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgbnVsbCAhPT0gaW5zdCAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3QuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAodXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ2F1Z2h0RXJyb3Iocm9vdCwgZmliZXIsIGVycm9ySW5mbyk7XG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgJiZcbiAgICAgICAgKG51bGwgPT09IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkXG4gICAgICAgICAgPyAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBuZXcgU2V0KFt0aGlzXSkpXG4gICAgICAgICAgOiBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5hZGQodGhpcykpO1xuICAgICAgdmFyIHN0YWNrID0gZXJyb3JJbmZvLnN0YWNrO1xuICAgICAgdGhpcy5jb21wb25lbnREaWRDYXRjaChlcnJvckluZm8udmFsdWUsIHtcbiAgICAgICAgY29tcG9uZW50U3RhY2s6IG51bGwgIT09IHN0YWNrID8gc3RhY2sgOiBcIlwiXG4gICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKFxuICByb290LFxuICByZXR1cm5GaWJlcixcbiAgc291cmNlRmliZXIsXG4gIHZhbHVlLFxuICByb290UmVuZGVyTGFuZXNcbikge1xuICBzb3VyY2VGaWJlci5mbGFncyB8PSAzMjc2ODtcbiAgaWYgKFxuICAgIG51bGwgIT09IHZhbHVlICYmXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudGhlblxuICApIHtcbiAgICByZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSByZXR1cm5GaWJlciAmJlxuICAgICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBzb3VyY2VGaWJlcixcbiAgICAgICAgcm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBzb3VyY2VGaWJlciA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKG51bGwgIT09IHNvdXJjZUZpYmVyKSB7XG4gICAgICBzd2l0Y2ggKHNvdXJjZUZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBudWxsID09PSBzaGVsbEJvdW5kYXJ5XG4gICAgICAgICAgICAgID8gcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpXG4gICAgICAgICAgICAgIDogbnVsbCA9PT0gc291cmNlRmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICAgICAgMCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgJj0gLTI1NyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzID0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIHZhbHVlID09PSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGVcbiAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIuZmxhZ3MgfD0gMTYzODQpXG4gICAgICAgICAgICAgIDogKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgICBudWxsID09PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIudXBkYXRlUXVldWUgPSBuZXcgU2V0KFt2YWx1ZV0pKVxuICAgICAgICAgICAgICAgICAgOiByZXR1cm5GaWJlci5hZGQodmFsdWUpLFxuICAgICAgICAgICAgICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICB2YWx1ZSA9PT0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlXG4gICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDE2Mzg0KVxuICAgICAgICAgICAgICA6ICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSksXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgID8gKChyZXR1cm5GaWJlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJJbnN0YW5jZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgcmV0cnlRdWV1ZTogbmV3IFNldChbdmFsdWVdKVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlID0gcmV0dXJuRmliZXIpKVxuICAgICAgICAgICAgICAgICAgOiAoKHNvdXJjZUZpYmVyID0gcmV0dXJuRmliZXIucmV0cnlRdWV1ZSksXG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHNvdXJjZUZpYmVyXG4gICAgICAgICAgICAgICAgICAgICAgPyAocmV0dXJuRmliZXIucmV0cnlRdWV1ZSA9IG5ldyBTZXQoW3ZhbHVlXSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiBzb3VyY2VGaWJlci5hZGQodmFsdWUpKSxcbiAgICAgICAgICAgICAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzUsIHNvdXJjZUZpYmVyLnRhZykpO1xuICAgIH1cbiAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcyk7XG4gICAgcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpO1xuICAgIHJldHVybiAhMTtcbiAgfVxuICBpZiAoaXNIeWRyYXRpbmcpXG4gICAgcmV0dXJuIChcbiAgICAgIChyZXR1cm5GaWJlciA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgbnVsbCAhPT0gcmV0dXJuRmliZXJcbiAgICAgICAgPyAoMCA9PT0gKHJldHVybkZpYmVyLmZsYWdzICYgNjU1MzYpICYmIChyZXR1cm5GaWJlci5mbGFncyB8PSAyNTYpLFxuICAgICAgICAgIChyZXR1cm5GaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgKHJldHVybkZpYmVyLmxhbmVzID0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICB2YWx1ZSAhPT0gSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gJiZcbiAgICAgICAgICAgICgocm9vdCA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDIyKSwgeyBjYXVzZTogdmFsdWUgfSkpLFxuICAgICAgICAgICAgcXVldWVIeWRyYXRpb25FcnJvcihjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihyb290LCBzb3VyY2VGaWJlcikpKSlcbiAgICAgICAgOiAodmFsdWUgIT09IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uICYmXG4gICAgICAgICAgICAoKHJldHVybkZpYmVyID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjMpLCB7XG4gICAgICAgICAgICAgIGNhdXNlOiB2YWx1ZVxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgcXVldWVIeWRyYXRpb25FcnJvcihcbiAgICAgICAgICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIocmV0dXJuRmliZXIsIHNvdXJjZUZpYmVyKVxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgKHJvb3QgPSByb290LmN1cnJlbnQuYWx0ZXJuYXRlKSxcbiAgICAgICAgICAocm9vdC5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyAmPSAtcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAocm9vdC5sYW5lcyB8PSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICh2YWx1ZSA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2VGaWJlcikpLFxuICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUoXG4gICAgICAgICAgICByb290LnN0YXRlTm9kZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgcm9vdFJlbmRlckxhbmVzXG4gICAgICAgICAgKSksXG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHJvb3QsIHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgNCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAyKSksXG4gICAgICAhMVxuICAgICk7XG4gIHZhciB3cmFwcGVyRXJyb3IgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyMCksIHsgY2F1c2U6IHZhbHVlIH0pO1xuICB3cmFwcGVyRXJyb3IgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih3cmFwcGVyRXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9yc1xuICAgID8gKHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBbd3JhcHBlckVycm9yXSlcbiAgICA6IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMucHVzaCh3cmFwcGVyRXJyb3IpO1xuICA0ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMik7XG4gIGlmIChudWxsID09PSByZXR1cm5GaWJlcikgcmV0dXJuICEwO1xuICB2YWx1ZSA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gcmV0dXJuRmliZXI7XG4gIGRvIHtcbiAgICBzd2l0Y2ggKHNvdXJjZUZpYmVyLnRhZykge1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgKHJvb3QgPSByb290UmVuZGVyTGFuZXMgJiAtcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgfD0gcm9vdCksXG4gICAgICAgICAgKHJvb3QgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUoc291cmNlRmliZXIuc3RhdGVOb2RlLCB2YWx1ZSwgcm9vdCkpLFxuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShzb3VyY2VGaWJlciwgcm9vdCksXG4gICAgICAgICAgITFcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci50eXBlKSxcbiAgICAgICAgICAod3JhcHBlckVycm9yID0gc291cmNlRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgICAgICAwID09PSAoc291cmNlRmliZXIuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmV0dXJuRmliZXIuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIHx8XG4gICAgICAgICAgICAgIChudWxsICE9PSB3cmFwcGVyRXJyb3IgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3cmFwcGVyRXJyb3IuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgfHxcbiAgICAgICAgICAgICAgICAgICFsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5oYXMod3JhcHBlckVycm9yKSkpKSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyAmPSAtcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyB8PSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUocm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICBpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZShcbiAgICAgICAgICAgICAgcm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICByb290LFxuICAgICAgICAgICAgICBzb3VyY2VGaWJlcixcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUoc291cmNlRmliZXIsIHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgfVxuICAgIHNvdXJjZUZpYmVyID0gc291cmNlRmliZXIucmV0dXJuO1xuICB9IHdoaWxlIChudWxsICE9PSBzb3VyY2VGaWJlcik7XG4gIHJldHVybiAhMTtcbn1cbnZhciBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MSkpLFxuICBkaWRSZWNlaXZlVXBkYXRlID0gITE7XG5mdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9XG4gICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgPyBtb3VudENoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKVxuICAgICAgOiByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgIG5leHRDaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRm9yd2FyZFJlZihcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIENvbXBvbmVudCA9IENvbXBvbmVudC5yZW5kZXI7XG4gIHZhciByZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIGlmIChcInJlZlwiIGluIG5leHRQcm9wcykge1xuICAgIHZhciBwcm9wc1dpdGhvdXRSZWYgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV4dFByb3BzKVxuICAgICAgXCJyZWZcIiAhPT0ga2V5ICYmIChwcm9wc1dpdGhvdXRSZWZba2V5XSA9IG5leHRQcm9wc1trZXldKTtcbiAgfSBlbHNlIHByb3BzV2l0aG91dFJlZiA9IG5leHRQcm9wcztcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBuZXh0UHJvcHMgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgcHJvcHNXaXRob3V0UmVmLFxuICAgIHJlZixcbiAgICByZW5kZXJMYW5lc1xuICApO1xuICBrZXkgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAhZGlkUmVjZWl2ZVVwZGF0ZSlcbiAgICByZXR1cm4gKFxuICAgICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyksXG4gICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICApO1xuICBpc0h5ZHJhdGluZyAmJiBrZXkgJiYgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgdmFyIHR5cGUgPSBDb21wb25lbnQudHlwZTtcbiAgICBpZiAoXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlICYmXG4gICAgICAhc2hvdWxkQ29uc3RydWN0KHR5cGUpICYmXG4gICAgICB2b2lkIDAgPT09IHR5cGUuZGVmYXVsdFByb3BzICYmXG4gICAgICBudWxsID09PSBDb21wb25lbnQuY29tcGFyZVxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy50YWcgPSAxNSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gdHlwZSksXG4gICAgICAgIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApXG4gICAgICApO1xuICAgIGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICBDb21wb25lbnQudHlwZSxcbiAgICAgIG51bGwsXG4gICAgICBuZXh0UHJvcHMsXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIHdvcmtJblByb2dyZXNzLm1vZGUsXG4gICAgICByZW5kZXJMYW5lc1xuICAgICk7XG4gICAgY3VycmVudC5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gICAgY3VycmVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudCk7XG4gIH1cbiAgdHlwZSA9IGN1cnJlbnQuY2hpbGQ7XG4gIGlmICghY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpKSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHR5cGUubWVtb2l6ZWRQcm9wcztcbiAgICBDb21wb25lbnQgPSBDb21wb25lbnQuY29tcGFyZTtcbiAgICBDb21wb25lbnQgPSBudWxsICE9PSBDb21wb25lbnQgPyBDb21wb25lbnQgOiBzaGFsbG93RXF1YWw7XG4gICAgaWYgKENvbXBvbmVudChwcmV2UHJvcHMsIG5leHRQcm9wcykgJiYgY3VycmVudC5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZilcbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgY3VycmVudCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHR5cGUsIG5leHRQcm9wcyk7XG4gIGN1cnJlbnQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBjdXJyZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudCk7XG59XG5mdW5jdGlvbiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQpIHtcbiAgICB2YXIgcHJldlByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgIGlmIChcbiAgICAgIHNoYWxsb3dFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykgJiZcbiAgICAgIGN1cnJlbnQucmVmID09PSB3b3JrSW5Qcm9ncmVzcy5yZWZcbiAgICApXG4gICAgICBpZiAoXG4gICAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IG5leHRQcm9wcyA9IHByZXZQcm9wcyksXG4gICAgICAgIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSlcbiAgICAgIClcbiAgICAgICAgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpICYmIChkaWRSZWNlaXZlVXBkYXRlID0gITApO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXMpLFxuICAgICAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICAgICApO1xuICB9XG4gIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIENvbXBvbmVudCxcbiAgICBuZXh0UHJvcHMsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW4sXG4gICAgcHJldlN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIGlmIChcImhpZGRlblwiID09PSBuZXh0UHJvcHMubW9kZSkge1xuICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKSB7XG4gICAgICBuZXh0UHJvcHMgPVxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMgOiByZW5kZXJMYW5lcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICAgIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgZm9yIChwcmV2U3RhdGUgPSAwOyBudWxsICE9PSBuZXh0Q2hpbGRyZW47IClcbiAgICAgICAgICAocHJldlN0YXRlID1cbiAgICAgICAgICAgIHByZXZTdGF0ZSB8IG5leHRDaGlsZHJlbi5sYW5lcyB8IG5leHRDaGlsZHJlbi5jaGlsZExhbmVzKSxcbiAgICAgICAgICAgIChuZXh0Q2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW4uc2libGluZyk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSBwcmV2U3RhdGUgJiB+bmV4dFByb3BzO1xuICAgICAgfSBlbHNlICh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gMCksICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpO1xuICAgICAgcmV0dXJuIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikpXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHsgYmFzZUxhbmVzOiAwLCBjYWNoZVBvb2w6IG51bGwgfSksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBwdXNoVHJhbnNpdGlvbihcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmNhY2hlUG9vbCA6IG51bGxcbiAgICAgICAgICApLFxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGVcbiAgICAgICAgICA/IHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpXG4gICAgICAgICAgOiByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSA1MzY4NzA5MTIpLFxuICAgICAgICBkZWZlckhpZGRlbk9mZnNjcmVlbkNvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5iYXNlTGFuZXMgfCByZW5kZXJMYW5lcyA6IHJlbmRlckxhbmVzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gIH0gZWxzZVxuICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgPyAocHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZS5jYWNoZVBvb2wpLFxuICAgICAgICBwdXNoSGlkZGVuQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSlcbiAgICAgIDogKG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpLFxuICAgICAgICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcykpO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dEJhc2VMYW5lcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcGVla0NhY2hlRnJvbVBvb2woKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICBudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgIGJhc2VMYW5lczogbmV4dEJhc2VMYW5lcyxcbiAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICB9O1xuICBudWxsICE9PSBjdXJyZW50ICYmIHB1c2hUcmFuc2l0aW9uKHdvcmtJblByb2dyZXNzLCBudWxsKTtcbiAgcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpO1xuICBwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgITApO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKG51bGwgPT09IHJlZilcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LnJlZiAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQ4MTYpO1xuICBlbHNlIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcmVmICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiByZWYpXG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI4NCkpO1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IGN1cnJlbnQucmVmICE9PSByZWYpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0ODE2O1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgQ29tcG9uZW50ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICB2b2lkIDAsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAgbmV4dFByb3BzID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgbmV4dFByb3BzICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dFByb3BzLFxuICBDb21wb25lbnQsXG4gIHNlY29uZEFyZyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzQWdhaW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBzZWNvbmRBcmdcbiAgKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIENvbXBvbmVudCA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIENvbXBvbmVudCAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0LFxuICAgICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSAmJlxuICAgICAgKGNvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSkpO1xuICAgIGNvbnRleHQgPSBuZXcgQ29tcG9uZW50KG5leHRQcm9wcywgY29udGV4dCk7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICBudWxsICE9PSBjb250ZXh0LnN0YXRlICYmIHZvaWQgMCAhPT0gY29udGV4dC5zdGF0ZSA/IGNvbnRleHQuc3RhdGUgOiBudWxsO1xuICAgIGNvbnRleHQudXBkYXRlciA9IGNsYXNzQ29tcG9uZW50VXBkYXRlcjtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjb250ZXh0O1xuICAgIGNvbnRleHQuX3JlYWN0SW50ZXJuYWxzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjb250ZXh0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQucmVmcyA9IHt9O1xuICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dC5jb250ZXh0ID1cbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJiBudWxsICE9PSBjb250ZXh0VHlwZVxuICAgICAgICA/IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKVxuICAgICAgICA6IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgY29udGV4dFR5cGUsXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKSxcbiAgICAgIChjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQpIHx8XG4gICAgICAoKGNvbnRleHRUeXBlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgY29udGV4dFR5cGUgIT09IGNvbnRleHQuc3RhdGUgJiZcbiAgICAgICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoY29udGV4dCwgY29udGV4dC5zdGF0ZSwgbnVsbCksXG4gICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpLFxuICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpO1xuICAgIG5leHRQcm9wcyA9ICEwO1xuICB9IGVsc2UgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLFxuICAgICAgb2xkUHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIHVucmVzb2x2ZWRPbGRQcm9wcyk7XG4gICAgY29udGV4dC5wcm9wcyA9IG9sZFByb3BzO1xuICAgIHZhciBvbGRDb250ZXh0ID0gY29udGV4dC5jb250ZXh0LFxuICAgICAgY29udGV4dFR5cGUkanNjb21wJDAgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dFR5cGUgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSRqc2NvbXAkMCAmJlxuICAgICAgKGNvbnRleHRUeXBlID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUkanNjb21wJDApKTtcbiAgICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzICE9PSB1bnJlc29sdmVkT2xkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgodW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZENvbnRleHQgIT09IGNvbnRleHRUeXBlKSAmJlxuICAgICAgICBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICApKTtcbiAgICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICAgIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkQ29udGV4dCB8fCBoYXNGb3JjZVVwZGF0ZVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChvbGRDb250ZXh0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpLFxuICAgICAgICAob2xkUHJvcHMgPVxuICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgICAgICAgY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIG9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgb2xkU3RhdGUsXG4gICAgICAgICAgICBvbGRDb250ZXh0LFxuICAgICAgICAgICAgY29udGV4dFR5cGVcbiAgICAgICAgICApKVxuICAgICAgICAgID8gKGNvbnRleHRUeXBlJGpzY29tcCQwIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQoKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCkpXG4gICAgICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG9sZENvbnRleHQpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG9sZENvbnRleHQpLFxuICAgICAgICAoY29udGV4dC5jb250ZXh0ID0gY29udGV4dFR5cGUpLFxuICAgICAgICAobmV4dFByb3BzID0gb2xkUHJvcHMpKVxuICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGNvbnRleHRUeXBlKTtcbiAgICBjb250ZXh0LnByb3BzID0gY29udGV4dFR5cGUkanNjb21wJDA7XG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIG9sZFN0YXRlID0gY29udGV4dC5jb250ZXh0O1xuICAgIG9sZENvbnRleHQgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgb2xkUHJvcHMgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9sZENvbnRleHQgJiZcbiAgICAgIG51bGwgIT09IG9sZENvbnRleHQgJiZcbiAgICAgIChvbGRQcm9wcyA9IHJlYWRDb250ZXh0KG9sZENvbnRleHQpKTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIChvbGRDb250ZXh0ID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSkgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgoY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkUHJvcHMpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgb2xkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQuc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpO1xuICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICB2YXIgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlICE9PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICBvbGRTdGF0ZSAhPT0gbmV3U3RhdGUgfHxcbiAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgIChudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LmRlcGVuZGVuY2llcyAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQuZGVwZW5kZW5jaWVzKSlcbiAgICAgID8gKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyAmJlxuICAgICAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgdW5yZXNvbHZlZE9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzXG4gICAgICAgICAgKSxcbiAgICAgICAgICAobmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgY29udGV4dFR5cGUkanNjb21wJDAsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICApIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICAgICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKSlcbiAgICAgICAgICA/IChvbGRDb250ZXh0IHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV3U3RhdGUsIG9sZFByb3BzKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBuZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTAyNCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlKSksXG4gICAgICAgIChjb250ZXh0LnByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgKGNvbnRleHQuc3RhdGUgPSBuZXdTdGF0ZSksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBvbGRQcm9wcyksXG4gICAgICAgIChuZXh0UHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMCkpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH1cbiAgY29udGV4dCA9IG5leHRQcm9wcztcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gIGNvbnRleHQgfHwgbmV4dFByb3BzXG4gICAgPyAoKGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpLFxuICAgICAgKENvbXBvbmVudCA9XG4gICAgICAgIG5leHRQcm9wcyAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiBjb250ZXh0LnJlbmRlcigpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgbmV4dFByb3BzXG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICkpKVxuICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSlcbiAgICA6IChjdXJyZW50ID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIG5leHRDaGlsZHJlbixcbiAgcmVuZGVyTGFuZXNcbikge1xuICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI1NjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG52YXIgU1VTUEVOREVEX01BUktFUiA9IHtcbiAgZGVoeWRyYXRlZDogbnVsbCxcbiAgdHJlZUNvbnRleHQ6IG51bGwsXG4gIHJldHJ5TGFuZTogMCxcbiAgaHlkcmF0aW9uRXJyb3JzOiBudWxsXG59O1xuZnVuY3Rpb24gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSB7XG4gIHJldHVybiB7IGJhc2VMYW5lczogcmVuZGVyTGFuZXMsIGNhY2hlUG9vbDogZ2V0U3VzcGVuZGVkQ2FjaGUoKSB9O1xufVxuZnVuY3Rpb24gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gIGN1cnJlbnQsXG4gIHByaW1hcnlUcmVlRGlkRGVmZXIsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgY3VycmVudCA9IG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LmNoaWxkTGFuZXMgJiB+cmVuZGVyTGFuZXMgOiAwO1xuICBwcmltYXJ5VHJlZURpZERlZmVyICYmIChjdXJyZW50IHw9IHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICBzaG93RmFsbGJhY2sgPSAhMSxcbiAgICBkaWRTdXNwZW5kID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSxcbiAgICBKU0NvbXBpbGVyX3RlbXA7XG4gIChKU0NvbXBpbGVyX3RlbXAgPSBkaWRTdXNwZW5kKSB8fFxuICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBudWxsID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IDAgIT09IChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAyKSk7XG4gIEpTQ29tcGlsZXJfdGVtcCAmJiAoKHNob3dGYWxsYmFjayA9ICEwKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xMjkpKTtcbiAgSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMzIpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMzM7XG4gIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgPyBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgIDogcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICB2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgIGlmICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlKSkge1xuICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICghbmV4dEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZGVoeWRyYXRlZDogbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHRyZWVDb250ZXh0OlxuICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdHJlZUNvbnRleHRQcm92aWRlclxuICAgICAgICAgICAgICAgICAgICA/IHsgaWQ6IHRyZWVDb250ZXh0SWQsIG92ZXJmbG93OiB0cmVlQ29udGV4dE92ZXJmbG93IH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIHJldHJ5TGFuZTogNTM2ODcwOTEyLFxuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkVycm9yczogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKFxuICAgICAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnN0YXRlTm9kZSA9IG5leHRJbnN0YW5jZSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApLFxuICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbCksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSAhMCkpXG4gICAgICAgICAgICA6IChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwIHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBuZXh0SW5zdGFuY2UgJiZcbiAgICAgICAgKChuZXh0SW5zdGFuY2UgPSBuZXh0SW5zdGFuY2UuZGVoeWRyYXRlZCksIG51bGwgIT09IG5leHRJbnN0YW5jZSlcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhuZXh0SW5zdGFuY2UpXG4gICAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDMyKVxuICAgICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA1MzY4NzA5MTIpLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIG5leHRJbnN0YW5jZSA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgICBuZXh0UHJvcHMgPSBuZXh0UHJvcHMuZmFsbGJhY2s7XG4gICAgaWYgKHNob3dGYWxsYmFjaylcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChzaG93RmFsbGJhY2sgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZSA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICAgICAgICB7IG1vZGU6IFwiaGlkZGVuXCIsIGNoaWxkcmVuOiBuZXh0SW5zdGFuY2UgfSxcbiAgICAgICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgKSksXG4gICAgICAgIChuZXh0UHJvcHMgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgc2hvd0ZhbGxiYWNrLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKSksXG4gICAgICAgIChuZXh0SW5zdGFuY2UucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZS5zaWJsaW5nID0gbmV4dFByb3BzKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dEluc3RhbmNlKSxcbiAgICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgKHNob3dGYWxsYmFjay5tZW1vaXplZFN0YXRlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSksXG4gICAgICAgIChzaG93RmFsbGJhY2suY2hpbGRMYW5lcyA9IGdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgICBuZXh0UHJvcHNcbiAgICAgICk7XG4gICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgbmV4dEluc3RhbmNlKTtcbiAgfVxuICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgJiZcbiAgICAoKG5leHRJbnN0YW5jZSA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5kZWh5ZHJhdGVkKSxcbiAgICBudWxsICE9PSBuZXh0SW5zdGFuY2UpXG4gICkge1xuICAgIGlmIChkaWRTdXNwZW5kKVxuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTZcbiAgICAgICAgPyAocHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTI1NyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICkpKVxuICAgICAgICA6IG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGVcbiAgICAgICAgICA/IChyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpKVxuICAgICAgICAgIDogKHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrID0gbmV4dFByb3BzLmZhbGxiYWNrKSxcbiAgICAgICAgICAgIChuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgICAgIHsgbW9kZTogXCJ2aXNpYmxlXCIsIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW4gfSxcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgICAgc2hvd0ZhbGxiYWNrLFxuICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2suZmxhZ3MgfD0gMiksXG4gICAgICAgICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5zaWJsaW5nID0gc2hvd0ZhbGxiYWNrKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICAgICAgICAgIG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHNob3dGYWxsYmFjaykpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhuZXh0SW5zdGFuY2UpKVxuICAgICkge1xuICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nICYmIG5leHRJbnN0YW5jZS5uZXh0U2libGluZy5kYXRhc2V0O1xuICAgICAgaWYgKEpTQ29tcGlsZXJfdGVtcCkgdmFyIGRpZ2VzdCA9IEpTQ29tcGlsZXJfdGVtcC5kZ3N0O1xuICAgICAgSlNDb21waWxlcl90ZW1wID0gZGlnZXN0O1xuICAgICAgbmV4dFByb3BzID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MTkpKTtcbiAgICAgIG5leHRQcm9wcy5zdGFjayA9IFwiXCI7XG4gICAgICBuZXh0UHJvcHMuZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wO1xuICAgICAgcXVldWVIeWRyYXRpb25FcnJvcih7IHZhbHVlOiBuZXh0UHJvcHMsIHNvdXJjZTogbnVsbCwgc3RhY2s6IG51bGwgfSk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIChkaWRSZWNlaXZlVXBkYXRlIHx8XG4gICAgICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgITEpLFxuICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9IDAgIT09IChyZW5kZXJMYW5lcyAmIGN1cnJlbnQuY2hpbGRMYW5lcykpLFxuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSB8fCBKU0NvbXBpbGVyX3RlbXApXG4gICAgKSB7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAoKG5leHRQcm9wcyA9IHJlbmRlckxhbmVzICYgLXJlbmRlckxhbmVzKSxcbiAgICAgICAgKG5leHRQcm9wcyA9XG4gICAgICAgICAgMCAhPT0gKG5leHRQcm9wcyAmIDQyKVxuICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICA6IGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUobmV4dFByb3BzKSksXG4gICAgICAgIChuZXh0UHJvcHMgPVxuICAgICAgICAgIDAgIT09IChuZXh0UHJvcHMgJiAoSlNDb21waWxlcl90ZW1wLnN1c3BlbmRlZExhbmVzIHwgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IG5leHRQcm9wcyksXG4gICAgICAgIDAgIT09IG5leHRQcm9wcyAmJiBuZXh0UHJvcHMgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXRyeUxhbmUpXG4gICAgICApXG4gICAgICAgIHRocm93IChcbiAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXRyeUxhbmUgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgIGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShjdXJyZW50LCBuZXh0UHJvcHMpLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihKU0NvbXBpbGVyX3RlbXAsIGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uKVxuICAgICAgICApO1xuICAgICAgXCIkP1wiID09PSBuZXh0SW5zdGFuY2UuZGF0YSB8fCByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgfSBlbHNlXG4gICAgICBcIiQ/XCIgPT09IG5leHRJbnN0YW5jZS5kYXRhXG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxOTIpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpKVxuICAgICAgICA6ICgoY3VycmVudCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC50cmVlQ29udGV4dCksXG4gICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZ1xuICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAoaXNIeWRyYXRpbmcgPSAhMCksXG4gICAgICAgICAgKGh5ZHJhdGlvbkVycm9ycyA9IG51bGwpLFxuICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgICgoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkKSxcbiAgICAgICAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3cpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlciksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRJZCA9IGN1cnJlbnQuaWQpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBjdXJyZW50Lm92ZXJmbG93KSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3MpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDA5NikpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgIHJldHVybiAoXG4gICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5jaGlsZCksXG4gICAgICAoZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnNpYmxpbmcpLFxuICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCwge1xuICAgICAgICBtb2RlOiBcImhpZGRlblwiLFxuICAgICAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gICAgICB9KSksXG4gICAgICAobmV4dFByb3BzLnN1YnRyZWVGbGFncyA9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdWJ0cmVlRmxhZ3MgJiA2NTAxMTcxMiksXG4gICAgICBudWxsICE9PSBkaWdlc3RcbiAgICAgICAgPyAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZGlnZXN0LCBzaG93RmFsbGJhY2spKVxuICAgICAgICA6ICgoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpKSxcbiAgICAgIChzaG93RmFsbGJhY2sucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgIChuZXh0UHJvcHMgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSBjdXJyZW50LmNoaWxkLm1lbW9pemVkU3RhdGUpLFxuICAgICAgbnVsbCA9PT0gbmV4dEluc3RhbmNlXG4gICAgICAgID8gKG5leHRJbnN0YW5jZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpXG4gICAgICAgIDogKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UuY2FjaGVQb29sKSxcbiAgICAgICAgICBudWxsICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICAgID8gKChkaWdlc3QgPSBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5wYXJlbnQgIT09IGRpZ2VzdFxuICAgICAgICAgICAgICAgICAgPyB7IHBhcmVudDogZGlnZXN0LCBwb29sOiBkaWdlc3QgfVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0U3VzcGVuZGVkQ2FjaGUoKSksXG4gICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHtcbiAgICAgICAgICAgIGJhc2VMYW5lczogbmV4dEluc3RhbmNlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgY2FjaGVQb29sOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICB9KSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgIG5leHRQcm9wc1xuICAgICk7XG4gIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIHJlbmRlckxhbmVzID0gY3VycmVudC5jaGlsZDtcbiAgY3VycmVudCA9IHJlbmRlckxhbmVzLnNpYmxpbmc7XG4gIHJlbmRlckxhbmVzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MocmVuZGVyTGFuZXMsIHtcbiAgICBtb2RlOiBcInZpc2libGVcIixcbiAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gIH0pO1xuICByZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmVuZGVyTGFuZXMuc2libGluZyA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyksXG4gICAgbnVsbCA9PT0gSlNDb21waWxlcl90ZW1wXG4gICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gW2N1cnJlbnRdKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE2KSlcbiAgICAgIDogSlNDb21waWxlcl90ZW1wLnB1c2goY3VycmVudCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIHJlbmRlckxhbmVzO1xufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgcHJpbWFyeUNoaWxkcmVuKSB7XG4gIHByaW1hcnlDaGlsZHJlbiA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuIH0sXG4gICAgd29ya0luUHJvZ3Jlc3MubW9kZVxuICApO1xuICBwcmltYXJ5Q2hpbGRyZW4ucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBwcmltYXJ5Q2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKG9mZnNjcmVlblByb3BzLCBtb2RlKSB7XG4gIG9mZnNjcmVlblByb3BzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjIsIG9mZnNjcmVlblByb3BzLCBudWxsLCBtb2RlKTtcbiAgb2Zmc2NyZWVuUHJvcHMubGFuZXMgPSAwO1xuICBvZmZzY3JlZW5Qcm9wcy5zdGF0ZU5vZGUgPSB7XG4gICAgX3Zpc2liaWxpdHk6IDEsXG4gICAgX3BlbmRpbmdNYXJrZXJzOiBudWxsLFxuICAgIF9yZXRyeUNhY2hlOiBudWxsLFxuICAgIF90cmFuc2l0aW9uczogbnVsbFxuICB9O1xuICByZXR1cm4gb2Zmc2NyZWVuUHJvcHM7XG59XG5mdW5jdGlvbiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgY3VycmVudCA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuXG4gICk7XG4gIGN1cnJlbnQuZmxhZ3MgfD0gMjtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHJldHVybiBjdXJyZW50O1xufVxuZnVuY3Rpb24gc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGZpYmVyLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KSB7XG4gIGZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KTtcbn1cbmZ1bmN0aW9uIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGlzQmFja3dhcmRzLFxuICB0YWlsLFxuICBsYXN0Q29udGVudFJvdyxcbiAgdGFpbE1vZGVcbikge1xuICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBudWxsID09PSByZW5kZXJTdGF0ZVxuICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgIGlzQmFja3dhcmRzOiBpc0JhY2t3YXJkcyxcbiAgICAgICAgcmVuZGVyaW5nOiBudWxsLFxuICAgICAgICByZW5kZXJpbmdTdGFydFRpbWU6IDAsXG4gICAgICAgIGxhc3Q6IGxhc3RDb250ZW50Um93LFxuICAgICAgICB0YWlsOiB0YWlsLFxuICAgICAgICB0YWlsTW9kZTogdGFpbE1vZGVcbiAgICAgIH0pXG4gICAgOiAoKHJlbmRlclN0YXRlLmlzQmFja3dhcmRzID0gaXNCYWNrd2FyZHMpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZyA9IG51bGwpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDApLFxuICAgICAgKHJlbmRlclN0YXRlLmxhc3QgPSBsYXN0Q29udGVudFJvdyksXG4gICAgICAocmVuZGVyU3RhdGUudGFpbCA9IHRhaWwpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWxNb2RlID0gdGFpbE1vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICByZXZlYWxPcmRlciA9IG5leHRQcm9wcy5yZXZlYWxPcmRlcixcbiAgICB0YWlsTW9kZSA9IG5leHRQcm9wcy50YWlsO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLmNoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIG5leHRQcm9wcyA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiAyKSlcbiAgICAobmV4dFByb3BzID0gKG5leHRQcm9wcyAmIDEpIHwgMiksICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpO1xuICBlbHNlIHtcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCkpXG4gICAgICBhOiBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgIGlmICgxMyA9PT0gY3VycmVudC50YWcpXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAoMTkgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihjdXJyZW50LCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBlbHNlIGlmIChudWxsICE9PSBjdXJyZW50LmNoaWxkKSB7XG4gICAgICAgICAgY3VycmVudC5jaGlsZC5yZXR1cm4gPSBjdXJyZW50O1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoaWxkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgZm9yICg7IG51bGwgPT09IGN1cnJlbnQuc2libGluZzsgKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQucmV0dXJuIHx8IGN1cnJlbnQucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQuc2libGluZy5yZXR1cm4gPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgIH1cbiAgICBuZXh0UHJvcHMgJj0gMTtcbiAgfVxuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5leHRQcm9wcyk7XG4gIHN3aXRjaCAocmV2ZWFsT3JkZXIpIHtcbiAgICBjYXNlIFwiZm9yd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHJldmVhbE9yZGVyID0gbnVsbDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgKGN1cnJlbnQgPSByZW5kZXJMYW5lcy5hbHRlcm5hdGUpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSAmJlxuICAgICAgICAgICAgKHJldmVhbE9yZGVyID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgIG51bGwgPT09IHJlbmRlckxhbmVzXG4gICAgICAgID8gKChyZXZlYWxPcmRlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCkpXG4gICAgICAgIDogKChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzLnNpYmxpbmcpLCAocmVuZGVyTGFuZXMuc2libGluZyA9IG51bGwpKTtcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICExLFxuICAgICAgICByZXZlYWxPcmRlcixcbiAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgIHRhaWxNb2RlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhY2t3YXJkc1wiOlxuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsO1xuICAgICAgcmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBudWxsOyBudWxsICE9PSByZXZlYWxPcmRlcjsgKSB7XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHJldmVhbE9yZGVyLnNpYmxpbmc7XG4gICAgICAgIHJldmVhbE9yZGVyLnNpYmxpbmcgPSByZW5kZXJMYW5lcztcbiAgICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgICAgcmV2ZWFsT3JkZXIgPSBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgITAsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICBudWxsLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0b2dldGhlclwiOlxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKHdvcmtJblByb2dyZXNzLCAhMSwgbnVsbCwgbnVsbCwgdm9pZCAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBudWxsICE9PSBjdXJyZW50ICYmICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcztcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmIHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUzKSk7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCkge1xuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICByZW5kZXJMYW5lcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIGN1cnJlbnQucGVuZGluZ1Byb3BzKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICAgIGZvciAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7IG51bGwgIT09IGN1cnJlbnQuc2libGluZzsgKVxuICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmcpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nID1cbiAgICAgICAgICBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcykpLFxuICAgICAgICAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSB7XG4gIGlmICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSkgcmV0dXJuICEwO1xuICBjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHJldHVybiBudWxsICE9PSBjdXJyZW50ICYmIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHB1c2hQcm92aWRlcihcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMudmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsICE9PSBzdGF0ZSkge1xuICAgICAgICBpZiAobnVsbCAhPT0gc3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIGlmICgwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZC5jaGlsZExhbmVzKSlcbiAgICAgICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgY3VycmVudCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuc2libGluZyA6IG51bGw7XG4gICAgICB9XG4gICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciBkaWRTdXNwZW5kQmVmb3JlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpO1xuICAgICAgc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKTtcbiAgICAgIHN0YXRlIHx8XG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIChzdGF0ZSA9IDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKSk7XG4gICAgICBpZiAoZGlkU3VzcGVuZEJlZm9yZSkge1xuICAgICAgICBpZiAoc3RhdGUpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgfVxuICAgICAgZGlkU3VzcGVuZEJlZm9yZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSBkaWRTdXNwZW5kQmVmb3JlICYmXG4gICAgICAgICgoZGlkU3VzcGVuZEJlZm9yZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUudGFpbCA9IG51bGwpLFxuICAgICAgICAoZGlkU3VzcGVuZEJlZm9yZS5sYXN0RWZmZWN0ID0gbnVsbCkpO1xuICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgICAgaWYgKHN0YXRlKSBicmVhaztcbiAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMCksXG4gICAgICAgIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgfVxuICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xufVxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBpZiAobnVsbCAhPT0gY3VycmVudClcbiAgICBpZiAoY3VycmVudC5tZW1vaXplZFByb3BzICE9PSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gITA7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAgIGF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTtcbiAgICB9XG4gIGVsc2VcbiAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEwNDg1NzYpICYmXG4gICAgICAgIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRyZWVGb3JrQ291bnQsIHdvcmtJblByb2dyZXNzLmluZGV4KTtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTY6XG4gICAgICBhOiB7XG4gICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0KGxhenlDb21wb25lbnQuX3BheWxvYWQpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gbGF6eUNvbXBvbmVudDtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxhenlDb21wb25lbnQpXG4gICAgICAgICAgc2hvdWxkQ29uc3RydWN0KGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICA/ICgoY3VycmVudCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKGxhenlDb21wb25lbnQsIGN1cnJlbnQpKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzcy50YWcgPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBsYXp5Q29tcG9uZW50ICYmIG51bGwgIT09IGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgoaW5pdCA9IGxhenlDb21wb25lbnQuJCR0eXBlb2YpLCBpbml0ID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDExO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdCA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDE0O1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgICBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUobGF6eUNvbXBvbmVudCkgfHwgbGF6eUNvbXBvbmVudDtcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwNiwgd29ya0luUHJvZ3Jlc3MsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgKGluaXQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wc1xuICAgICAgICApKSxcbiAgICAgICAgdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIGluaXQsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjYXNlIDM6XG4gICAgICBhOiB7XG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgICBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaW5pdCA9IHByZXZTdGF0ZS5lbGVtZW50O1xuICAgICAgICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBsYXp5Q29tcG9uZW50LCBudWxsLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBsYXp5Q29tcG9uZW50ID0gbmV4dFN0YXRlLmNhY2hlO1xuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbGF6eUNvbXBvbmVudCk7XG4gICAgICAgIGxhenlDb21wb25lbnQgIT09IHByZXZTdGF0ZS5jYWNoZSAmJlxuICAgICAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBbQ2FjaGVDb250ZXh0XSxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgITBcbiAgICAgICAgICApO1xuICAgICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCk7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBuZXh0U3RhdGUuZWxlbWVudDtcbiAgICAgICAgaWYgKHByZXZTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKChwcmV2U3RhdGUgPSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIGlzRGVoeWRyYXRlZDogITEsXG4gICAgICAgICAgICAgIGNhY2hlOiBuZXh0U3RhdGUuY2FjaGVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9IHByZXZTdGF0ZSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHByZXZTdGF0ZSksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXp5Q29tcG9uZW50ICE9PSBpbml0KSB7XG4gICAgICAgICAgICBpbml0ID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoXG4gICAgICAgICAgICAgIEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDI0KSksXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcXVldWVIeWRyYXRpb25FcnJvcihpbml0KTtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuYm9keTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgIFwiSFRNTFwiID09PSBjdXJyZW50Lm5vZGVOYW1lXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudC5vd25lckRvY3VtZW50LmJvZHlcbiAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGN1cnJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMDtcbiAgICAgICAgICAgIGh5ZHJhdGlvbkVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgICAgICByZW5kZXJMYW5lcyA9IG1vdW50Q2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lczsgcmVuZGVyTGFuZXM7IClcbiAgICAgICAgICAgICAgKHJlbmRlckxhbmVzLmZsYWdzID0gKHJlbmRlckxhbmVzLmZsYWdzICYgLTMpIHwgNDA5NiksXG4gICAgICAgICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKGxhenlDb21wb25lbnQgPT09IGluaXQpIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAocmVuZGVyTGFuZXMgPSBnZXRSZXNvdXJjZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApKVxuICAgICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHJlbmRlckxhbmVzKVxuICAgICAgICAgICAgOiBpc0h5ZHJhdGluZyB8fFxuICAgICAgICAgICAgICAoKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudHlwZSksXG4gICAgICAgICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnQgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoXG4gICAgICAgICAgICAgICAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgICAgICAgICApLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50W2ludGVybmFsUHJvcHNLZXldID0gY3VycmVudCksXG4gICAgICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzLCBjdXJyZW50KSxcbiAgICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGxhenlDb21wb25lbnQpKVxuICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBnZXRSZXNvdXJjZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgICAgKSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBpc0h5ZHJhdGluZyAmJlxuICAgICAgICAgICgobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9XG4gICAgICAgICAgICByZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITApLFxuICAgICAgICAgIChpbml0ID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSksXG4gICAgICAgICAgaXNTaW5nbGV0b25TY29wZSh3b3JrSW5Qcm9ncmVzcy50eXBlKVxuICAgICAgICAgICAgPyAoKHByZXZpb3VzSHlkcmF0YWJsZU9uRW50ZXJpbmdTY29wZWRTaW5nbGV0b24gPSBpbml0KSxcbiAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgKSkpXG4gICAgICAgICAgICA6IChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gaW5pdCkpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwNCksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgNTpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoaW5pdCA9IGxhenlDb21wb25lbnQgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSlcbiAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGNhbkh5ZHJhdGVJbnN0YW5jZShcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICExKSxcbiAgICAgICAgICAgICAgICAoaW5pdCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoaW5pdCA9ICExKTtcbiAgICAgICAgaW5pdCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgbmV4dFN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG4gICAgICBsYXp5Q29tcG9uZW50ID0gcHJldlN0YXRlLmNoaWxkcmVuO1xuICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoaW5pdCwgcHJldlN0YXRlKVxuICAgICAgICA/IChsYXp5Q29tcG9uZW50ID0gbnVsbClcbiAgICAgICAgOiBudWxsICE9PSBuZXh0U3RhdGUgJiZcbiAgICAgICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0U3RhdGUpICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDMyKTtcbiAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKChpbml0ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgIChIb3N0VHJhbnNpdGlvbkNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IGluaXQpKTtcbiAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICBjYXNlIDY6XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCAmJiBpc0h5ZHJhdGluZykge1xuICAgICAgICBpZiAoKGN1cnJlbnQgPSByZW5kZXJMYW5lcyA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHRcbiAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgKGN1cnJlbnQgPSAhMCkpXG4gICAgICAgICAgICAgIDogKGN1cnJlbnQgPSAhMSk7XG4gICAgICAgIGN1cnJlbnQgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICApLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgOiByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnR5cGUsIGxhenlDb21wb25lbnQudmFsdWUpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGxhenlDb21wb25lbnQuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLl9jb250ZXh0KSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChpbml0ID0gcmVhZENvbnRleHQoaW5pdCkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IGxhenlDb21wb25lbnQoaW5pdCkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcyksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgMzE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHtcbiAgICAgICAgICBtb2RlOiBsYXp5Q29tcG9uZW50Lm1vZGUsXG4gICAgICAgICAgY2hpbGRyZW46IGxhenlDb21wb25lbnQuY2hpbGRyZW5cbiAgICAgICAgfSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICgocmVuZGVyTGFuZXMgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChyZW5kZXJMYW5lcy5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWYpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHJlbmRlckxhbmVzKSlcbiAgICAgICAgICA6ICgocmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LmNoaWxkLCBsYXp5Q29tcG9uZW50KSksXG4gICAgICAgICAgICAocmVuZGVyTGFuZXMucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChyZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZW5kZXJMYW5lcykpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgKTtcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gcmVhZENvbnRleHQoQ2FjaGVDb250ZXh0KSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICgoaW5pdCA9IHBlZWtDYWNoZUZyb21Qb29sKCkpLFxuICAgICAgICAgICAgbnVsbCA9PT0gaW5pdCAmJlxuICAgICAgICAgICAgICAoKGluaXQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QpLFxuICAgICAgICAgICAgICAocHJldlN0YXRlID0gY3JlYXRlQ2FjaGUoKSksXG4gICAgICAgICAgICAgIChpbml0LnBvb2xlZENhY2hlID0gcHJldlN0YXRlKSxcbiAgICAgICAgICAgICAgcHJldlN0YXRlLnJlZkNvdW50KyssXG4gICAgICAgICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSAmJiAoaW5pdC5wb29sZWRDYWNoZUxhbmVzIHw9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgKGluaXQgPSBwcmV2U3RhdGUpKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgICAgICAgICBwYXJlbnQ6IGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIGNhY2hlOiBpbml0XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgaW5pdCkpXG4gICAgICAgICAgOiAoMCAhPT0gKGN1cnJlbnQubGFuZXMgJiByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgICAgICAgKGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG51bGwsIG51bGwsIHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpKSxcbiAgICAgICAgICAgIChpbml0ID0gY3VycmVudC5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgICAgIChwcmV2U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgICAgIGluaXQucGFyZW50ICE9PSBsYXp5Q29tcG9uZW50XG4gICAgICAgICAgICAgID8gKChpbml0ID0geyBwYXJlbnQ6IGxhenlDb21wb25lbnQsIGNhY2hlOiBsYXp5Q29tcG9uZW50IH0pLFxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICAgICAgMCA9PT0gd29ya0luUHJvZ3Jlc3MubGFuZXMgJiZcbiAgICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID1cbiAgICAgICAgICAgICAgICAgICAgICBpbml0KSxcbiAgICAgICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbGF6eUNvbXBvbmVudCkpXG4gICAgICAgICAgICAgIDogKChsYXp5Q29tcG9uZW50ID0gcHJldlN0YXRlLmNhY2hlKSxcbiAgICAgICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCAhPT0gaW5pdC5jYWNoZSAmJlxuICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICBbQ2FjaGVDb250ZXh0XSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICApKSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMjk6XG4gICAgICB0aHJvdyB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIH1cbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTYsIHdvcmtJblByb2dyZXNzLnRhZykpO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0O1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkKHdvcmtJblByb2dyZXNzLCByZXNvdXJjZSkge1xuICBpZiAoXCJzdHlsZXNoZWV0XCIgIT09IHJlc291cmNlLnR5cGUgfHwgMCAhPT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSlcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMTY3NzcyMTc7XG4gIGVsc2UgaWYgKCgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTY3NzcyMTYpLCAhcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSkpIHtcbiAgICByZXNvdXJjZSA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmVzb3VyY2UgJiZcbiAgICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA0MTk0MDQ4KSA9PT1cbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICAgID8gbnVsbCAhPT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MjkxNDU2MCkgIT09XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSkgfHxcbiAgICAgICAgICByZXNvdXJjZSAhPT0gc2hlbGxCb3VuZGFyeSlcbiAgICApXG4gICAgICB0aHJvdyAoXG4gICAgICAgICgoc3VzcGVuZGVkVGhlbmFibGUgPSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUpLFxuICAgICAgICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24pXG4gICAgICApO1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTI7XG4gIH1cbn1cbmZ1bmN0aW9uIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHJldHJ5UXVldWUpIHtcbiAgbnVsbCAhPT0gcmV0cnlRdWV1ZSAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTYzODQgJiZcbiAgICAoKHJldHJ5UXVldWUgPVxuICAgICAgMjIgIT09IHdvcmtJblByb2dyZXNzLnRhZyA/IGNsYWltTmV4dFJldHJ5TGFuZSgpIDogNTM2ODcwOTEyKSxcbiAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgfD0gcmV0cnlRdWV1ZSksXG4gICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyB8PSByZXRyeVF1ZXVlKSk7XG59XG5mdW5jdGlvbiBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjaykge1xuICBpZiAoIWlzSHlkcmF0aW5nKVxuICAgIHN3aXRjaCAocmVuZGVyU3RhdGUudGFpbE1vZGUpIHtcbiAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlID0gbnVsbDsgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrOyApXG4gICAgICAgICAgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayksXG4gICAgICAgICAgICAoaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLnNpYmxpbmcpO1xuICAgICAgICBudWxsID09PSBsYXN0VGFpbE5vZGVcbiAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUuc2libGluZyA9IG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb2xsYXBzZWRcIjpcbiAgICAgICAgbGFzdFRhaWxOb2RlID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlJDExMyA9IG51bGw7IG51bGwgIT09IGxhc3RUYWlsTm9kZTsgKVxuICAgICAgICAgIG51bGwgIT09IGxhc3RUYWlsTm9kZS5hbHRlcm5hdGUgJiYgKGxhc3RUYWlsTm9kZSQxMTMgPSBsYXN0VGFpbE5vZGUpLFxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGxhc3RUYWlsTm9kZS5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlJDExM1xuICAgICAgICAgID8gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrIHx8IG51bGwgPT09IHJlbmRlclN0YXRlLnRhaWxcbiAgICAgICAgICAgID8gKHJlbmRlclN0YXRlLnRhaWwgPSBudWxsKVxuICAgICAgICAgICAgOiAocmVuZGVyU3RhdGUudGFpbC5zaWJsaW5nID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUkMTEzLnNpYmxpbmcgPSBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBidWJibGVQcm9wZXJ0aWVzKGNvbXBsZXRlZFdvcmspIHtcbiAgdmFyIGRpZEJhaWxvdXQgPVxuICAgICAgbnVsbCAhPT0gY29tcGxldGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgIGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlLmNoaWxkID09PSBjb21wbGV0ZWRXb3JrLmNoaWxkLFxuICAgIG5ld0NoaWxkTGFuZXMgPSAwLFxuICAgIHN1YnRyZWVGbGFncyA9IDA7XG4gIGlmIChkaWRCYWlsb3V0KVxuICAgIGZvciAodmFyIGNoaWxkJDExNCA9IGNvbXBsZXRlZFdvcmsuY2hpbGQ7IG51bGwgIT09IGNoaWxkJDExNDsgKVxuICAgICAgKG5ld0NoaWxkTGFuZXMgfD0gY2hpbGQkMTE0LmxhbmVzIHwgY2hpbGQkMTE0LmNoaWxkTGFuZXMpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDExNC5zdWJ0cmVlRmxhZ3MgJiA2NTAxMTcxMiksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTE0LmZsYWdzICYgNjUwMTE3MTIpLFxuICAgICAgICAoY2hpbGQkMTE0LnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTE0ID0gY2hpbGQkMTE0LnNpYmxpbmcpO1xuICBlbHNlXG4gICAgZm9yIChjaGlsZCQxMTQgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMTQ7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDExNC5sYW5lcyB8IGNoaWxkJDExNC5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMTQuc3VidHJlZUZsYWdzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMTQuZmxhZ3MpLFxuICAgICAgICAoY2hpbGQkMTE0LnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTE0ID0gY2hpbGQkMTE0LnNpYmxpbmcpO1xuICBjb21wbGV0ZWRXb3JrLnN1YnRyZWVGbGFncyB8PSBzdWJ0cmVlRmxhZ3M7XG4gIGNvbXBsZXRlZFdvcmsuY2hpbGRMYW5lcyA9IG5ld0NoaWxkTGFuZXM7XG4gIHJldHVybiBkaWRCYWlsb3V0O1xufVxuZnVuY3Rpb24gY29tcGxldGVXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDMxOlxuICAgIGNhc2UgMTY6XG4gICAgY2FzZSAxNTpcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDc6XG4gICAgY2FzZSA4OlxuICAgIGNhc2UgMTI6XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAobmV3UHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZSAhPT0gbmV3UHJvcHMgJiZcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpO1xuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgICAgIHBvcEhvc3RDb250YWluZXIoKTtcbiAgICAgIHJlbmRlckxhbmVzLnBlbmRpbmdDb250ZXh0ICYmXG4gICAgICAgICgocmVuZGVyTGFuZXMuY29udGV4dCA9IHJlbmRlckxhbmVzLnBlbmRpbmdDb250ZXh0KSxcbiAgICAgICAgKHJlbmRlckxhbmVzLnBlbmRpbmdDb250ZXh0ID0gbnVsbCkpO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgbnVsbCA9PT0gY3VycmVudC5jaGlsZClcbiAgICAgICAgcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgPyBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgKGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQgJiZcbiAgICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2KSkgfHxcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTAyNCksXG4gICAgICAgICAgICB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAobWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICBudWxsICE9PSByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICA/IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpKVxuICAgICAgICAgIDogcmVuZGVyTGFuZXNcbiAgICAgICAgICAgID8gcmVuZGVyTGFuZXMgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpXG4gICAgICAgICAgICA6IChjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICBwb3BIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZW5kZXJMYW5lcyA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICB2YXIgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzICE9PSBuZXdQcm9wcyAmJiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSByZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UodHlwZSwgbmV3UHJvcHMsIHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCksXG4gICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpXG4gICAgICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHR5cGUgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoXG4gICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc3dpdGNoIChyZW5kZXJMYW5lcykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50LmlubmVySFRNTCA9IFwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCI7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5yZW1vdmVDaGlsZChjdXJyZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgICBuZXdQcm9wcy5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICA/IChjdXJyZW50Lm11bHRpcGxlID0gITApXG4gICAgICAgICAgICAgICAgICAgIDogbmV3UHJvcHMuc2l6ZSAmJiAoY3VycmVudC5zaXplID0gbmV3UHJvcHMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzLCB7IGlzOiBuZXdQcm9wcy5pcyB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICAgICAgICAgIGE6IGZvciAodHlwZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSB0eXBlOyApIHtcbiAgICAgICAgICAgIGlmICg1ID09PSB0eXBlLnRhZyB8fCA2ID09PSB0eXBlLnRhZylcbiAgICAgICAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZCh0eXBlLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICBlbHNlIGlmICg0ICE9PSB0eXBlLnRhZyAmJiAyNyAhPT0gdHlwZS50YWcgJiYgbnVsbCAhPT0gdHlwZS5jaGlsZCkge1xuICAgICAgICAgICAgICB0eXBlLmNoaWxkLnJldHVybiA9IHR5cGU7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLmNoaWxkO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgICAgIGZvciAoOyBudWxsID09PSB0eXBlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdHlwZS5yZXR1cm4gfHwgdHlwZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGUuc2libGluZy5yZXR1cm4gPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlLnNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgYTogc3dpdGNoIChcbiAgICAgICAgICAgIChzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50LCByZW5kZXJMYW5lcywgbmV3UHJvcHMpLCByZW5kZXJMYW5lcylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSAhIW5ld1Byb3BzLmF1dG9Gb2N1cztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgXCJpbWdcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEwO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChcInN0cmluZ1wiICE9PSB0eXBlb2YgbmV3UHJvcHMgJiYgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgIGN1cnJlbnQgPSByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBpZiAocG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgICAgIHR5cGUgPSBoeWRyYXRpb25QYXJlbnRGaWJlcjtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gdHlwZSlcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID09PSByZW5kZXJMYW5lcyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IG5ld1Byb3BzICYmICEwID09PSBuZXdQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHx8XG4gICAgICAgICAgICBjaGVja0ZvclVubWF0Y2hlZFRleHQoY3VycmVudC5ub2RlVmFsdWUsIHJlbmRlckxhbmVzKVxuICAgICAgICAgICAgICA/ICEwXG4gICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAoY3VycmVudCA9XG4gICAgICAgICAgICBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoY3VycmVudCkuY3JlYXRlVGV4dE5vZGUoXG4gICAgICAgICAgICAgIG5ld1Byb3BzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgIChudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBpZiAobnVsbCAhPT0gbmV3UHJvcHMgJiYgbnVsbCAhPT0gbmV3UHJvcHMuZGVoeWRyYXRlZCkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE4KSk7XG4gICAgICAgICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHR5cGUgPSBudWxsICE9PSB0eXBlID8gdHlwZS5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTcpKTtcbiAgICAgICAgICAgIHR5cGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSxcbiAgICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB0eXBlID0gITE7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICh0eXBlID0gdXBncmFkZUh5ZHJhdGlvbkVycm9yc1RvUmVjb3ZlcmFibGUoKSksXG4gICAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgICAgICAoY3VycmVudC5tZW1vaXplZFN0YXRlLmh5ZHJhdGlvbkVycm9ycyA9IHR5cGUpLFxuICAgICAgICAgICAgKHR5cGUgPSAhMCk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICAgIHJldHVybiBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkpXG4gICAgICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSByZW5kZXJMYW5lcyksIHdvcmtJblByb2dyZXNzO1xuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsICE9PSBuZXdQcm9wcztcbiAgICAgIGN1cnJlbnQgPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChyZW5kZXJMYW5lcykge1xuICAgICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB0eXBlID0gbnVsbDtcbiAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAodHlwZSA9IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgdmFyIGNhY2hlJDEyNyA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChjYWNoZSQxMjcgPSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgY2FjaGUkMTI3ICE9PSB0eXBlICYmIChuZXdQcm9wcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIH1cbiAgICAgIHJlbmRlckxhbmVzICE9PSBjdXJyZW50ICYmXG4gICAgICAgIHJlbmRlckxhbmVzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZC5mbGFncyB8PSA4MTkyKTtcbiAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MudHlwZSksIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG4gICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsID09PSB0eXBlKSByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgICBuZXdQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gICAgICBjYWNoZSQxMjcgPSB0eXBlLnJlbmRlcmluZztcbiAgICAgIGlmIChudWxsID09PSBjYWNoZSQxMjcpXG4gICAgICAgIGlmIChuZXdQcm9wcykgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGZvciAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBjdXJyZW50OyApIHtcbiAgICAgICAgICAgICAgY2FjaGUkMTI3ID0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY2FjaGUkMTI3KSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhY2hlJDEyNy51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgICAgZm9yIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSByZW5kZXJMYW5lczsgKVxuICAgICAgICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHB1c2goXG4gICAgICAgICAgICAgICAgICBzdXNwZW5zZVN0YWNrQ3Vyc29yLFxuICAgICAgICAgICAgICAgICAgKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpIHwgMlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gdHlwZS50YWlsICYmXG4gICAgICAgICAgICBub3coKSA+IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgJiZcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKVxuICAgICAgICAgIGlmICgoKGN1cnJlbnQgPSBmaW5kRmlyc3RTdXNwZW5kZWQoY2FjaGUkMTI3KSksIG51bGwgIT09IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMCksXG4gICAgICAgICAgICAgIG51bGwgPT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgPT09IHR5cGUudGFpbE1vZGUgJiZcbiAgICAgICAgICAgICAgICAhY2FjaGUkMTI3LmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgICFpc0h5ZHJhdGluZylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgMiAqIG5vdygpIC0gdHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAgIDUzNjg3MDkxMiAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDQxOTQzMDQpKTtcbiAgICAgICAgdHlwZS5pc0JhY2t3YXJkc1xuICAgICAgICAgID8gKChjYWNoZSQxMjcuc2libGluZyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDEyNykpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSB0eXBlLmxhc3QpLFxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgICAgICA/IChjdXJyZW50LnNpYmxpbmcgPSBjYWNoZSQxMjcpXG4gICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2FjaGUkMTI3KSxcbiAgICAgICAgICAgICh0eXBlLmxhc3QgPSBjYWNoZSQxMjcpKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSB0eXBlLnRhaWwpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdHlwZS50YWlsKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmcgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHR5cGUudGFpbCA9IHdvcmtJblByb2dyZXNzLnNpYmxpbmcpLFxuICAgICAgICAgICh0eXBlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IG5vdygpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc2libGluZyA9IG51bGwpLFxuICAgICAgICAgIChjdXJyZW50ID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgICAgICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5ld1Byb3BzID8gKGN1cnJlbnQgJiAxKSB8IDIgOiBjdXJyZW50ICYgMSksXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgcG9wSGlkZGVuQ29udGV4dCgpLFxuICAgICAgICAobmV3UHJvcHMgPSBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MilcbiAgICAgICAgICA6IG5ld1Byb3BzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICA/IDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyAmIDYgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpKVxuICAgICAgICAgIDogYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpLFxuICAgICAgICBuZXdQcm9wcyAhPT0gcmVuZGVyTGFuZXMgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmIHBvcChyZXN1bWVkQ2FjaGUpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocmVuZGVyTGFuZXMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAocmVuZGVyTGFuZXMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMzA6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG5mdW5jdGlvbiB1bndpbmRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgY3VycmVudCAmIDY1NTM2XG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksXG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIDAgIT09IChjdXJyZW50ICYgNjU1MzYpICYmIDAgPT09IChjdXJyZW50ICYgMTI4KVxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5kZWh5ZHJhdGVkKSB7XG4gICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDApKTtcbiAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzO1xuICAgICAgcmV0dXJuIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiBudWxsO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpLCBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwb3BIb3N0Q29udGFpbmVyKCksIG51bGw7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcih3b3JrSW5Qcm9ncmVzcy50eXBlKSwgbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBwb3BIaWRkZW5Db250ZXh0KCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSksXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpLCBudWxsO1xuICAgIGNhc2UgMjU6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBpbnRlcnJ1cHRlZFdvcmspIHtcbiAgcG9wVHJlZUNvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcbiAgc3dpdGNoIChpbnRlcnJ1cHRlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgICAgIHBvcEhvc3RDb250YWluZXIoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICBwb3BIb3N0Q29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHBvcChzdXNwZW5zZVN0YWNrQ3Vyc29yKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBwb3BQcm92aWRlcihpbnRlcnJ1cHRlZFdvcmsudHlwZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgIHBvcEhpZGRlbkNvbnRleHQoKTtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI0OlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChmbGFncywgZmluaXNoZWRXb3JrKSB7XG4gIHRyeSB7XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlLFxuICAgICAgbGFzdEVmZmVjdCA9IG51bGwgIT09IHVwZGF0ZVF1ZXVlID8gdXBkYXRlUXVldWUubGFzdEVmZmVjdCA6IG51bGw7XG4gICAgaWYgKG51bGwgIT09IGxhc3RFZmZlY3QpIHtcbiAgICAgIHZhciBmaXJzdEVmZmVjdCA9IGxhc3RFZmZlY3QubmV4dDtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gZmlyc3RFZmZlY3Q7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgodXBkYXRlUXVldWUudGFnICYgZmxhZ3MpID09PSBmbGFncykge1xuICAgICAgICAgIGxhc3RFZmZlY3QgPSB2b2lkIDA7XG4gICAgICAgICAgdmFyIGNyZWF0ZSA9IHVwZGF0ZVF1ZXVlLmNyZWF0ZSxcbiAgICAgICAgICAgIGluc3QgPSB1cGRhdGVRdWV1ZS5pbnN0O1xuICAgICAgICAgIGxhc3RFZmZlY3QgPSBjcmVhdGUoKTtcbiAgICAgICAgICBpbnN0LmRlc3Ryb3kgPSBsYXN0RWZmZWN0O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUubmV4dDtcbiAgICAgIH0gd2hpbGUgKHVwZGF0ZVF1ZXVlICE9PSBmaXJzdEVmZmVjdCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoXG4gIGZsYWdzLFxuICBmaW5pc2hlZFdvcmssXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IkanNjb21wJDBcbikge1xuICB0cnkge1xuICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSxcbiAgICAgIGxhc3RFZmZlY3QgPSBudWxsICE9PSB1cGRhdGVRdWV1ZSA/IHVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgOiBudWxsO1xuICAgIGlmIChudWxsICE9PSBsYXN0RWZmZWN0KSB7XG4gICAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgICB1cGRhdGVRdWV1ZSA9IGZpcnN0RWZmZWN0O1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKHVwZGF0ZVF1ZXVlLnRhZyAmIGZsYWdzKSA9PT0gZmxhZ3MpIHtcbiAgICAgICAgICB2YXIgaW5zdCA9IHVwZGF0ZVF1ZXVlLmluc3QsXG4gICAgICAgICAgICBkZXN0cm95ID0gaW5zdC5kZXN0cm95O1xuICAgICAgICAgIGlmICh2b2lkIDAgIT09IGRlc3Ryb3kpIHtcbiAgICAgICAgICAgIGluc3QuZGVzdHJveSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGxhc3RFZmZlY3QgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgICAgICB2YXIgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IkanNjb21wJDAsXG4gICAgICAgICAgICAgIGRlc3Ryb3lfID0gZGVzdHJveTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlc3Ryb3lfKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgICBsYXN0RWZmZWN0LFxuICAgICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAodXBkYXRlUXVldWUgIT09IGZpcnN0RWZmZWN0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdENsYXNzQ2FsbGJhY2tzKGZpbmlzaGVkV29yaykge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG4gIGlmIChudWxsICE9PSB1cGRhdGVRdWV1ZSkge1xuICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbW1pdENhbGxiYWNrcyh1cGRhdGVRdWV1ZSwgaW5zdGFuY2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChcbiAgY3VycmVudCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgaW5zdGFuY2Vcbikge1xuICBpbnN0YW5jZS5wcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgIGN1cnJlbnQudHlwZSxcbiAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgKTtcbiAgaW5zdGFuY2Uuc3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIHRyeSB7XG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVseUF0dGFjaFJlZihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJlZiA9IGN1cnJlbnQucmVmO1xuICAgIGlmIChudWxsICE9PSByZWYpIHtcbiAgICAgIHN3aXRjaCAoY3VycmVudC50YWcpIHtcbiAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBpbnN0YW5jZVRvVXNlID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGluc3RhbmNlVG9Vc2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgIH1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZlxuICAgICAgICA/IChjdXJyZW50LnJlZkNsZWFudXAgPSByZWYoaW5zdGFuY2VUb1VzZSkpXG4gICAgICAgIDogKHJlZi5jdXJyZW50ID0gaW5zdGFuY2VUb1VzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdmFyIHJlZiA9IGN1cnJlbnQucmVmLFxuICAgIHJlZkNsZWFudXAgPSBjdXJyZW50LnJlZkNsZWFudXA7XG4gIGlmIChudWxsICE9PSByZWYpXG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXApXG4gICAgICB0cnkge1xuICAgICAgICByZWZDbGVhbnVwKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoY3VycmVudC5yZWZDbGVhbnVwID0gbnVsbCksXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgbnVsbCAhPSBjdXJyZW50ICYmIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKTtcbiAgICAgIH1cbiAgICBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWYpXG4gICAgICB0cnkge1xuICAgICAgICByZWYobnVsbCk7XG4gICAgICB9IGNhdGNoIChlcnJvciQxNDMpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IkMTQzKTtcbiAgICAgIH1cbiAgICBlbHNlIHJlZi5jdXJyZW50ID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgdHJ5IHtcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHByb3BzLmF1dG9Gb2N1cyAmJiBpbnN0YW5jZS5mb2N1cygpO1xuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICBwcm9wcy5zcmNcbiAgICAgICAgICA/IChpbnN0YW5jZS5zcmMgPSBwcm9wcy5zcmMpXG4gICAgICAgICAgOiBwcm9wcy5zcmNTZXQgJiYgKGluc3RhbmNlLnNyY3NldCA9IHByb3BzLnNyY1NldCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb3N0VXBkYXRlKGZpbmlzaGVkV29yaywgbmV3UHJvcHMsIG9sZFByb3BzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGRvbUVsZW1lbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgZmluaXNoZWRXb3JrLnR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcyk7XG4gICAgZG9tRWxlbWVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgcmV0dXJuIChcbiAgICA1ID09PSBmaWJlci50YWcgfHxcbiAgICAzID09PSBmaWJlci50YWcgfHxcbiAgICAyNiA9PT0gZmliZXIudGFnIHx8XG4gICAgKDI3ID09PSBmaWJlci50YWcgJiYgaXNTaW5nbGV0b25TY29wZShmaWJlci50eXBlKSkgfHxcbiAgICA0ID09PSBmaWJlci50YWdcbiAgKTtcbn1cbmZ1bmN0aW9uIGdldEhvc3RTaWJsaW5nKGZpYmVyKSB7XG4gIGE6IGZvciAoOzspIHtcbiAgICBmb3IgKDsgbnVsbCA9PT0gZmliZXIuc2libGluZzsgKSB7XG4gICAgICBpZiAobnVsbCA9PT0gZmliZXIucmV0dXJuIHx8IGlzSG9zdFBhcmVudChmaWJlci5yZXR1cm4pKSByZXR1cm4gbnVsbDtcbiAgICAgIGZpYmVyID0gZmliZXIucmV0dXJuO1xuICAgIH1cbiAgICBmaWJlci5zaWJsaW5nLnJldHVybiA9IGZpYmVyLnJldHVybjtcbiAgICBmb3IgKFxuICAgICAgZmliZXIgPSBmaWJlci5zaWJsaW5nO1xuICAgICAgNSAhPT0gZmliZXIudGFnICYmIDYgIT09IGZpYmVyLnRhZyAmJiAxOCAhPT0gZmliZXIudGFnO1xuXG4gICAgKSB7XG4gICAgICBpZiAoMjcgPT09IGZpYmVyLnRhZyAmJiBpc1NpbmdsZXRvblNjb3BlKGZpYmVyLnR5cGUpKSBjb250aW51ZSBhO1xuICAgICAgaWYgKGZpYmVyLmZsYWdzICYgMikgY29udGludWUgYTtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5jaGlsZCB8fCA0ID09PSBmaWJlci50YWcpIGNvbnRpbnVlIGE7XG4gICAgICBlbHNlIChmaWJlci5jaGlsZC5yZXR1cm4gPSBmaWJlciksIChmaWJlciA9IGZpYmVyLmNoaWxkKTtcbiAgICB9XG4gICAgaWYgKCEoZmliZXIuZmxhZ3MgJiAyKSkgcmV0dXJuIGZpYmVyLnN0YXRlTm9kZTtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlXG4gICAgICAgID8gKDkgPT09IHBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgPyBwYXJlbnQuYm9keVxuICAgICAgICAgICAgOiBcIkhUTUxcIiA9PT0gcGFyZW50Lm5vZGVOYW1lXG4gICAgICAgICAgICAgID8gcGFyZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICA6IHBhcmVudFxuICAgICAgICAgICkuaW5zZXJ0QmVmb3JlKG5vZGUsIGJlZm9yZSlcbiAgICAgICAgOiAoKGJlZm9yZSA9XG4gICAgICAgICAgICA5ID09PSBwYXJlbnQubm9kZVR5cGVcbiAgICAgICAgICAgICAgPyBwYXJlbnQuYm9keVxuICAgICAgICAgICAgICA6IFwiSFRNTFwiID09PSBwYXJlbnQubm9kZU5hbWVcbiAgICAgICAgICAgICAgICA/IHBhcmVudC5vd25lckRvY3VtZW50LmJvZHlcbiAgICAgICAgICAgICAgICA6IHBhcmVudCksXG4gICAgICAgICAgYmVmb3JlLmFwcGVuZENoaWxkKG5vZGUpLFxuICAgICAgICAgIChwYXJlbnQgPSBwYXJlbnQuX3JlYWN0Um9vdENvbnRhaW5lciksXG4gICAgICAgICAgKG51bGwgIT09IHBhcmVudCAmJiB2b2lkIDAgIT09IHBhcmVudCkgfHxcbiAgICAgICAgICAgIG51bGwgIT09IGJlZm9yZS5vbmNsaWNrIHx8XG4gICAgICAgICAgICAoYmVmb3JlLm9uY2xpY2sgPSBub29wJDEpKTtcbiAgZWxzZSBpZiAoXG4gICAgNCAhPT0gdGFnICYmXG4gICAgKDI3ID09PSB0YWcgJiZcbiAgICAgIGlzU2luZ2xldG9uU2NvcGUobm9kZS50eXBlKSAmJlxuICAgICAgKChwYXJlbnQgPSBub2RlLnN0YXRlTm9kZSksIChiZWZvcmUgPSBudWxsKSksXG4gICAgKG5vZGUgPSBub2RlLmNoaWxkKSxcbiAgICBudWxsICE9PSBub2RlKVxuICApXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgbnVsbCAhPT0gbm9kZTtcblxuICAgIClcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICAobm9kZSA9IG5vZGUuc2libGluZyk7XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDYgPT09IHRhZylcbiAgICAobm9kZSA9IG5vZGUuc3RhdGVOb2RlKSxcbiAgICAgIGJlZm9yZSA/IHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKSA6IHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgZWxzZSBpZiAoXG4gICAgNCAhPT0gdGFnICYmXG4gICAgKDI3ID09PSB0YWcgJiYgaXNTaW5nbGV0b25TY29wZShub2RlLnR5cGUpICYmIChwYXJlbnQgPSBub2RlLnN0YXRlTm9kZSksXG4gICAgKG5vZGUgPSBub2RlLmNoaWxkKSxcbiAgICBudWxsICE9PSBub2RlKVxuICApXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKG5vZGUsIGJlZm9yZSwgcGFyZW50KSwgKG5vZGUgPSBub2RlLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0SG9zdFNpbmdsZXRvbkFjcXVpc2l0aW9uKGZpbmlzaGVkV29yaykge1xuICB2YXIgc2luZ2xldG9uID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSxcbiAgICBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICB0cnkge1xuICAgIGZvciAoXG4gICAgICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLCBhdHRyaWJ1dGVzID0gc2luZ2xldG9uLmF0dHJpYnV0ZXM7XG4gICAgICBhdHRyaWJ1dGVzLmxlbmd0aDtcblxuICAgIClcbiAgICAgIHNpbmdsZXRvbi5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHNpbmdsZXRvbiwgdHlwZSwgcHJvcHMpO1xuICAgIHNpbmdsZXRvbltpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICBzaW5nbGV0b25baW50ZXJuYWxQcm9wc0tleV0gPSBwcm9wcztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxudmFyIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9ICExLFxuICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gITEsXG4gIG5lZWRzRm9ybVJlc2V0ID0gITEsXG4gIFBvc3NpYmx5V2Vha1NldCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFxuICBuZXh0RWZmZWN0ID0gbnVsbDtcbmZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaXJzdENoaWxkKSB7XG4gIHJvb3QgPSByb290LmNvbnRhaW5lckluZm87XG4gIGV2ZW50c0VuYWJsZWQgPSBfZW5hYmxlZDtcbiAgcm9vdCA9IGdldEFjdGl2ZUVsZW1lbnREZWVwKHJvb3QpO1xuICBpZiAoaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKHJvb3QpKSB7XG4gICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiByb290KVxuICAgICAgdmFyIEpTQ29tcGlsZXJfdGVtcCA9IHtcbiAgICAgICAgc3RhcnQ6IHJvb3Quc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogcm9vdC5zZWxlY3Rpb25FbmRcbiAgICAgIH07XG4gICAgZWxzZVxuICAgICAgYToge1xuICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICgoSlNDb21waWxlcl90ZW1wID0gcm9vdC5vd25lckRvY3VtZW50KSAmJlxuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvdztcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wLmdldFNlbGVjdGlvbiAmJiBKU0NvbXBpbGVyX3RlbXAuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGlmIChzZWxlY3Rpb24gJiYgMCAhPT0gc2VsZWN0aW9uLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgICAgICAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgICAgICAgIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgICAgICAgc2VsZWN0aW9uID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAubm9kZVR5cGUsIGZvY3VzTm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICB9IGNhdGNoIChlJDIwKSB7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IDAsXG4gICAgICAgICAgICBzdGFydCA9IC0xLFxuICAgICAgICAgICAgZW5kID0gLTEsXG4gICAgICAgICAgICBpbmRleFdpdGhpbkFuY2hvciA9IDAsXG4gICAgICAgICAgICBpbmRleFdpdGhpbkZvY3VzID0gMCxcbiAgICAgICAgICAgIG5vZGUgPSByb290LFxuICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG51bGw7XG4gICAgICAgICAgYjogZm9yICg7Oykge1xuICAgICAgICAgICAgZm9yICh2YXIgbmV4dDsgOyApIHtcbiAgICAgICAgICAgICAgbm9kZSAhPT0gSlNDb21waWxlcl90ZW1wIHx8XG4gICAgICAgICAgICAgICAgKDAgIT09IGFuY2hvck9mZnNldCAmJiAzICE9PSBub2RlLm5vZGVUeXBlKSB8fFxuICAgICAgICAgICAgICAgIChzdGFydCA9IGxlbmd0aCArIGFuY2hvck9mZnNldCk7XG4gICAgICAgICAgICAgIG5vZGUgIT09IGZvY3VzTm9kZSB8fFxuICAgICAgICAgICAgICAgICgwICE9PSBzZWxlY3Rpb24gJiYgMyAhPT0gbm9kZS5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAoZW5kID0gbGVuZ3RoICsgc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgMyA9PT0gbm9kZS5ub2RlVHlwZSAmJiAobGVuZ3RoICs9IG5vZGUubm9kZVZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSAobmV4dCA9IG5vZGUuZmlyc3RDaGlsZCkpIGJyZWFrO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgIGlmIChub2RlID09PSByb290KSBicmVhayBiO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID09PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgICArK2luZGV4V2l0aGluQW5jaG9yID09PSBhbmNob3JPZmZzZXQgJiZcbiAgICAgICAgICAgICAgICAoc3RhcnQgPSBsZW5ndGgpO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID09PSBmb2N1c05vZGUgJiZcbiAgICAgICAgICAgICAgICArK2luZGV4V2l0aGluRm9jdXMgPT09IHNlbGVjdGlvbiAmJlxuICAgICAgICAgICAgICAgIChlbmQgPSBsZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gKG5leHQgPSBub2RlLm5leHRTaWJsaW5nKSkgYnJlYWs7XG4gICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnROb2RlO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgICAgICAtMSA9PT0gc3RhcnQgfHwgLTEgPT09IGVuZCA/IG51bGwgOiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfSBlbHNlIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gICAgICB9XG4gICAgSlNDb21waWxlcl90ZW1wID0gSlNDb21waWxlcl90ZW1wIHx8IHsgc3RhcnQ6IDAsIGVuZDogMCB9O1xuICB9IGVsc2UgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgc2VsZWN0aW9uSW5mb3JtYXRpb24gPSB7IGZvY3VzZWRFbGVtOiByb290LCBzZWxlY3Rpb25SYW5nZTogSlNDb21waWxlcl90ZW1wIH07XG4gIF9lbmFibGVkID0gITE7XG4gIGZvciAobmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQ7IG51bGwgIT09IG5leHRFZmZlY3Q7IClcbiAgICBpZiAoXG4gICAgICAoKGZpcnN0Q2hpbGQgPSBuZXh0RWZmZWN0KSxcbiAgICAgIChyb290ID0gZmlyc3RDaGlsZC5jaGlsZCksXG4gICAgICAwICE9PSAoZmlyc3RDaGlsZC5zdWJ0cmVlRmxhZ3MgJiAxMDI0KSAmJiBudWxsICE9PSByb290KVxuICAgIClcbiAgICAgIChyb290LnJldHVybiA9IGZpcnN0Q2hpbGQpLCAobmV4dEVmZmVjdCA9IHJvb3QpO1xuICAgIGVsc2VcbiAgICAgIGZvciAoOyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgZmlyc3RDaGlsZCA9IG5leHRFZmZlY3Q7XG4gICAgICAgIGZvY3VzTm9kZSA9IGZpcnN0Q2hpbGQuYWx0ZXJuYXRlO1xuICAgICAgICByb290ID0gZmlyc3RDaGlsZC5mbGFncztcbiAgICAgICAgc3dpdGNoIChmaXJzdENoaWxkLnRhZykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICgwICE9PSAocm9vdCAmIDEwMjQpICYmIG51bGwgIT09IGZvY3VzTm9kZSkge1xuICAgICAgICAgICAgICByb290ID0gdm9pZCAwO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPSBmaXJzdENoaWxkO1xuICAgICAgICAgICAgICBhbmNob3JPZmZzZXQgPSBmb2N1c05vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgZm9jdXNOb2RlID0gZm9jdXNOb2RlLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIHNlbGVjdGlvbiA9IEpTQ29tcGlsZXJfdGVtcC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVkUHJldlByb3BzID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAudHlwZSxcbiAgICAgICAgICAgICAgICAgIGFuY2hvck9mZnNldCxcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5lbGVtZW50VHlwZSA9PT0gSlNDb21waWxlcl90ZW1wLnR5cGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJvb3QgPSBzZWxlY3Rpb24uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICAgICAgICAgICAgICByZXNvbHZlZFByZXZQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlID0gcm9vdDtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5yZXR1cm4sXG4gICAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmICgwICE9PSAocm9vdCAmIDEwMjQpKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKChyb290ID0gZmlyc3RDaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksXG4gICAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9IHJvb3Qubm9kZVR5cGUpLFxuICAgICAgICAgICAgICAgIDkgPT09IEpTQ29tcGlsZXJfdGVtcClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KHJvb3QpO1xuICAgICAgICAgICAgICBlbHNlIGlmICgxID09PSBKU0NvbXBpbGVyX3RlbXApXG4gICAgICAgICAgICAgICAgc3dpdGNoIChyb290Lm5vZGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiSEVBRFwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcIkhUTUxcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJCT0RZXCI6XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KHJvb3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJvb3QudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmICgwICE9PSAocm9vdCAmIDEwMjQpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MykpO1xuICAgICAgICB9XG4gICAgICAgIHJvb3QgPSBmaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICAgICAgcm9vdC5yZXR1cm4gPSBmaXJzdENoaWxkLnJldHVybjtcbiAgICAgICAgICBuZXh0RWZmZWN0ID0gcm9vdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZC5yZXR1cm47XG4gICAgICB9XG59XG5mdW5jdGlvbiBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKGZpbmlzaGVkUm9vdCwgY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KDUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KVxuICAgICAgICBpZiAoKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSwgbnVsbCA9PT0gY3VycmVudCkpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkVXBkYXRlKFxuICAgICAgICAgICAgICBwcmV2UHJvcHMsXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvciQxNDIpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5yZXR1cm4sXG4gICAgICAgICAgICAgIGVycm9yJDE0MlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNjQgJiYgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKFxuICAgICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSwgbnVsbCAhPT0gZmluaXNoZWRSb290KVxuICAgICAgKSB7XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmluaXNoZWRXb3JrLmNoaWxkKVxuICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLmNoaWxkLnRhZykge1xuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29tbWl0Q2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgY3VycmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICBjb21taXRIb3N0U2luZ2xldG9uQWNxdWlzaXRpb24oZmluaXNoZWRXb3JrKTtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgJiYgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5kZWh5ZHJhdGVkKSxcbiAgICAgICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgICAgICgoZmluaXNoZWRXb3JrID0gcmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeS5iaW5kKFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgcmVnaXN0ZXJTdXNwZW5zZUluc3RhbmNlUmV0cnkoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIGZsYWdzID0gbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgfHwgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgaWYgKCFmbGFncykge1xuICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgcHJldlByb3BzID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgICB2YXIgcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBmbGFncztcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBjdXJyZW50KSAmJiAhcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW5cbiAgICAgICAgICA/IHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZQcm9wcztcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzMDpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGFsdGVybmF0ZSAmJlxuICAgICgoZmliZXIuYWx0ZXJuYXRlID0gbnVsbCksIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGFsdGVybmF0ZSkpO1xuICBmaWJlci5jaGlsZCA9IG51bGw7XG4gIGZpYmVyLmRlbGV0aW9ucyA9IG51bGw7XG4gIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICA1ID09PSBmaWJlci50YWcgJiZcbiAgICAoKGFsdGVybmF0ZSA9IGZpYmVyLnN0YXRlTm9kZSksXG4gICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIGRldGFjaERlbGV0ZWRJbnN0YW5jZShhbHRlcm5hdGUpKTtcbiAgZmliZXIuc3RhdGVOb2RlID0gbnVsbDtcbiAgZmliZXIucmV0dXJuID0gbnVsbDtcbiAgZmliZXIuZGVwZW5kZW5jaWVzID0gbnVsbDtcbiAgZmliZXIubWVtb2l6ZWRQcm9wcyA9IG51bGw7XG4gIGZpYmVyLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICBmaWJlci5wZW5kaW5nUHJvcHMgPSBudWxsO1xuICBmaWJlci5zdGF0ZU5vZGUgPSBudWxsO1xuICBmaWJlci51cGRhdGVRdWV1ZSA9IG51bGw7XG59XG52YXIgaG9zdFBhcmVudCA9IG51bGwsXG4gIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgZmluaXNoZWRSb290LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBwYXJlbnRcbikge1xuICBmb3IgKHBhcmVudCA9IHBhcmVudC5jaGlsZDsgbnVsbCAhPT0gcGFyZW50OyApXG4gICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIHBhcmVudCksXG4gICAgICAocGFyZW50ID0gcGFyZW50LnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihcbiAgZmluaXNoZWRSb290LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBkZWxldGVkRmliZXJcbikge1xuICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudClcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJVbm1vdW50KHJlbmRlcmVySUQsIGRlbGV0ZWRGaWJlcik7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICBzd2l0Y2ggKGRlbGV0ZWRGaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZS5jb3VudC0tXG4gICAgICAgIDogZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSAmJlxuICAgICAgICAgICgoZGVsZXRlZEZpYmVyID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgZGVsZXRlZEZpYmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGVsZXRlZEZpYmVyKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIHZhciBwcmV2SG9zdFBhcmVudCA9IGhvc3RQYXJlbnQsXG4gICAgICAgIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBpc1NpbmdsZXRvblNjb3BlKGRlbGV0ZWRGaWJlci50eXBlKSAmJlxuICAgICAgICAoKGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSwgKGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBwcmV2SG9zdFBhcmVudDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgIGNhc2UgNjpcbiAgICAgIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICAgIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGlmIChudWxsICE9PSBob3N0UGFyZW50KVxuICAgICAgICBpZiAoaG9zdFBhcmVudElzQ29udGFpbmVyKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAoOSA9PT0gaG9zdFBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgICA/IGhvc3RQYXJlbnQuYm9keVxuICAgICAgICAgICAgICA6IFwiSFRNTFwiID09PSBob3N0UGFyZW50Lm5vZGVOYW1lXG4gICAgICAgICAgICAgICAgPyBob3N0UGFyZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgIDogaG9zdFBhcmVudFxuICAgICAgICAgICAgKS5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhvc3RQYXJlbnQucmVtb3ZlQ2hpbGQoZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBkZWxldGVkRmliZXIsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTg6XG4gICAgICBudWxsICE9PSBob3N0UGFyZW50ICYmXG4gICAgICAgIChob3N0UGFyZW50SXNDb250YWluZXJcbiAgICAgICAgICA/ICgoZmluaXNoZWRSb290ID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkoXG4gICAgICAgICAgICAgIDkgPT09IGZpbmlzaGVkUm9vdC5ub2RlVHlwZVxuICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290LmJvZHlcbiAgICAgICAgICAgICAgICA6IFwiSFRNTFwiID09PSBmaW5pc2hlZFJvb3Qubm9kZU5hbWVcbiAgICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgICAgOiBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKGZpbmlzaGVkUm9vdCkpXG4gICAgICAgICAgOiBjbGVhclN1c3BlbnNlQm91bmRhcnkoaG9zdFBhcmVudCwgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDIsIGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIChzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSxcbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZIb3N0UGFyZW50LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgIHByZXZIb3N0UGFyZW50XG4gICAgICAgICAgKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID1cbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbikgfHxcbiAgICAgICAgbnVsbCAhPT0gZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2SG9zdFBhcmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspIHtcbiAgaWYgKFxuICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlKSxcbiAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgbnVsbCAhPT0gZmluaXNoZWRSb290ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290LmRlaHlkcmF0ZWQpLCBudWxsICE9PSBmaW5pc2hlZFJvb3QpKSlcbiAgKVxuICAgIHRyeSB7XG4gICAgICByZXRyeUlmQmxvY2tlZE9uKGZpbmlzaGVkUm9vdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJldHJ5Q2FjaGUoZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMTM6XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciByZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIG51bGwgPT09IHJldHJ5Q2FjaGUgJiZcbiAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gbmV3IFBvc3NpYmx5V2Vha1NldCgpKTtcbiAgICAgIHJldHVybiByZXRyeUNhY2hlO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSksXG4gICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLl9yZXRyeUNhY2hlKSxcbiAgICAgICAgbnVsbCA9PT0gcmV0cnlDYWNoZSAmJlxuICAgICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLl9yZXRyeUNhY2hlID0gbmV3IFBvc3NpYmx5V2Vha1NldCgpKSxcbiAgICAgICAgcmV0cnlDYWNoZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzUsIGZpbmlzaGVkV29yay50YWcpKTtcbiAgfVxufVxuZnVuY3Rpb24gYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyhmaW5pc2hlZFdvcmssIHdha2VhYmxlcykge1xuICB2YXIgcmV0cnlDYWNoZSA9IGdldFJldHJ5Q2FjaGUoZmluaXNoZWRXb3JrKTtcbiAgd2FrZWFibGVzLmZvckVhY2goZnVuY3Rpb24gKHdha2VhYmxlKSB7XG4gICAgdmFyIHJldHJ5ID0gcmVzb2x2ZVJldHJ5V2FrZWFibGUuYmluZChudWxsLCBmaW5pc2hlZFdvcmssIHdha2VhYmxlKTtcbiAgICByZXRyeUNhY2hlLmhhcyh3YWtlYWJsZSkgfHxcbiAgICAgIChyZXRyeUNhY2hlLmFkZCh3YWtlYWJsZSksIHdha2VhYmxlLnRoZW4ocmV0cnksIHJldHJ5KSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290JGpzY29tcCQwLCBwYXJlbnRGaWJlcikge1xuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsZXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXSxcbiAgICAgICAgcm9vdCA9IHJvb3QkanNjb21wJDAsXG4gICAgICAgIHJldHVybkZpYmVyID0gcGFyZW50RmliZXIsXG4gICAgICAgIHBhcmVudCA9IHJldHVybkZpYmVyO1xuICAgICAgYTogZm9yICg7IG51bGwgIT09IHBhcmVudDsgKSB7XG4gICAgICAgIHN3aXRjaCAocGFyZW50LnRhZykge1xuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICBpZiAoaXNTaW5nbGV0b25TY29wZShwYXJlbnQudHlwZSkpIHtcbiAgICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09PSBob3N0UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihyb290LCByZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZSk7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgcm9vdCA9IGNoaWxkVG9EZWxldGUuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gcm9vdCAmJiAocm9vdC5yZXR1cm4gPSBudWxsKTtcbiAgICAgIGNoaWxkVG9EZWxldGUucmV0dXJuID0gbnVsbDtcbiAgICB9XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMzg3OClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKHBhcmVudEZpYmVyLCByb290JGpzY29tcCQwKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG52YXIgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBudWxsO1xuZnVuY3Rpb24gY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpIHtcbiAgdmFyIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDMsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiksXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoMywgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDUsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuICYmXG4gICAgICAgICgoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrICYmXG4gICAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgICAoKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyksXG4gICAgICAgICAgICAoZmluaXNoZWRXb3JrLnNoYXJlZC5oaWRkZW5DYWxsYmFja3MgPVxuICAgICAgICAgICAgICBudWxsID09PSBjdXJyZW50ID8gZmxhZ3MgOiBjdXJyZW50LmNvbmNhdChmbGFncykpKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIHZhciBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICB2YXIgY3VycmVudFJlc291cmNlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KVxuICAgICAgICAgIGlmIChudWxsID09PSBmbGFncylcbiAgICAgICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSB7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgICAgICAgICAgYjogc3dpdGNoIChmbGFncykge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UubmFtZXNwYWNlVVJJIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHJlZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5ocmVmIHx8IFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heWJlTm9kZXMpXG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmhyZWYgfHwgXCJcIiA9PT0gY3VycmVudC5ocmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudC5ocmVmKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnJlbCA/IG51bGwgOiBjdXJyZW50LnJlbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnRpdGxlID8gbnVsbCA6IGN1cnJlbnQudGl0bGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jcm9zc09yaWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNyb3NzT3JpZ2luKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAobWF5YmVOb2RlcyA9IGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZShcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290XG4gICAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5jb250ZW50IHx8IFwiXCIpKSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiICsgY3VycmVudC5jb250ZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5uYW1lID8gbnVsbCA6IGN1cnJlbnQubmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQucHJvcGVydHkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImh0dHAtZXF1aXZcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lmh0dHBFcXVpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50Lmh0dHBFcXVpdikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY2hhcnNldFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY2hhclNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNoYXJTZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjgsIGZsYWdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgZmxhZ3MgPSBjdXJyZW50UmVzb3VyY2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGZsYWdzO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIG1vdW50SG9pc3RhYmxlKFxuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSAhPT0gZmxhZ3NcbiAgICAgICAgICAgID8gKG51bGwgPT09IGN1cnJlbnRSZXNvdXJjZVxuICAgICAgICAgICAgICAgID8gbnVsbCAhPT0gY3VycmVudC5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICgoY3VycmVudCA9IGN1cnJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRSZXNvdXJjZS5jb3VudC0tLFxuICAgICAgICAgICAgICBudWxsID09PSBmbGFnc1xuICAgICAgICAgICAgICAgID8gbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIDogbnVsbCA9PT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgY29tbWl0SG9zdFVwZGF0ZShcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgaWYgKGZpbmlzaGVkV29yay5mbGFncyAmIDMyKSB7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldFRleHRDb250ZW50KGhvaXN0YWJsZVJvb3QsIFwiXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgbnVsbCAhPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICYmXG4gICAgICAgICgoaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzKSxcbiAgICAgICAgY29tbWl0SG9zdFVwZGF0ZShcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogaG9pc3RhYmxlUm9vdFxuICAgICAgICApKTtcbiAgICAgIGZsYWdzICYgMTAyNCAmJiAobmVlZHNGb3JtUmVzZXQgPSAhMCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDY6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjIpKTtcbiAgICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY3VycmVudC5ub2RlVmFsdWUgPSBmbGFncztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdGFnQ2FjaGVzID0gbnVsbDtcbiAgICAgIGhvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChyb290LmNvbnRhaW5lckluZm8pO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290O1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0ICYmIG51bGwgIT09IGN1cnJlbnQgJiYgY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKHJvb3QuY29udGFpbmVySW5mbyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIG5lZWRzRm9ybVJlc2V0ICYmXG4gICAgICAgICgobmVlZHNGb3JtUmVzZXQgPSAhMSksIHJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyhmaW5pc2hlZFdvcmspKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGZsYWdzID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGdldEhvaXN0YWJsZVJvb3QoXG4gICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBmbGFncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZpbmlzaGVkV29yay5jaGlsZC5mbGFncyAmIDgxOTIgJiZcbiAgICAgICAgKG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlKSAhPT1cbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpICYmXG4gICAgICAgIChnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lID0gbm93KCkpO1xuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICgoZmxhZ3MgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSBmbGFncyAmJlxuICAgICAgICAgICgoZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlID0gbnVsbCksXG4gICAgICAgICAgYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyhmaW5pc2hlZFdvcmssIGZsYWdzKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIGhvaXN0YWJsZVJvb3QgPSBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHZhciB3YXNIaWRkZW4gPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbixcbiAgICAgICAgcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiB8fCBob2lzdGFibGVSb290O1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8IHdhc0hpZGRlbjtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDgxOTIpXG4gICAgICAgIGE6IGZvciAoXG4gICAgICAgICAgcm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUsXG4gICAgICAgICAgICByb290Ll92aXNpYmlsaXR5ID0gaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICA/IHJvb3QuX3Zpc2liaWxpdHkgJiAtMlxuICAgICAgICAgICAgICA6IHJvb3QuX3Zpc2liaWxpdHkgfCAxLFxuICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgICAgICAobnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgICAgIHdhc0hpZGRlbiB8fFxuICAgICAgICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiB8fFxuICAgICAgICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspKSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsLFxuICAgICAgICAgICAgcm9vdCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICA7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKDUgPT09IHJvb3QudGFnIHx8IDI2ID09PSByb290LnRhZykge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgd2FzSGlkZGVuID0gY3VycmVudCA9IHJvb3Q7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoY3VycmVudFJlc291cmNlID0gd2FzSGlkZGVuLnN0YXRlTm9kZSksIGhvaXN0YWJsZVJvb3QpKVxuICAgICAgICAgICAgICAgICAgKG1heWJlTm9kZXMgPSBjdXJyZW50UmVzb3VyY2Uuc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZU5vZGVzLnNldFByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgPyBtYXliZU5vZGVzLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLCBcIm5vbmVcIiwgXCJpbXBvcnRhbnRcIilcbiAgICAgICAgICAgICAgICAgICAgICA6IChtYXliZU5vZGVzLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpID0gd2FzSGlkZGVuLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgIHZhciBzdHlsZVByb3AgPSB3YXNIaWRkZW4ubWVtb2l6ZWRQcm9wcy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBzdHlsZVByb3AgJiZcbiAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSBzdHlsZVByb3AgJiZcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZVByb3AuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN0eWxlUHJvcC5kaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICBpLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICBudWxsID09IGRpc3BsYXkgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGRpc3BsYXkpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3Iod2FzSGlkZGVuLCB3YXNIaWRkZW4ucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKDYgPT09IHJvb3QudGFnKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICB3YXNIaWRkZW4gPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdhc0hpZGRlbi5zdGF0ZU5vZGUubm9kZVZhbHVlID0gaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICA6IHdhc0hpZGRlbi5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHdhc0hpZGRlbiwgd2FzSGlkZGVuLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICgoMjIgIT09IHJvb3QudGFnICYmIDIzICE9PSByb290LnRhZykgfHxcbiAgICAgICAgICAgICAgbnVsbCA9PT0gcm9vdC5tZW1vaXplZFN0YXRlIHx8XG4gICAgICAgICAgICAgIHJvb3QgPT09IGZpbmlzaGVkV29yaykgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHJvb3QuY2hpbGRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJvb3QuY2hpbGQucmV0dXJuID0gcm9vdDtcbiAgICAgICAgICAgIHJvb3QgPSByb290LmNoaWxkO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb290ID09PSBmaW5pc2hlZFdvcmspIGJyZWFrIGE7XG4gICAgICAgICAgZm9yICg7IG51bGwgPT09IHJvb3Quc2libGluZzsgKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gcm9vdC5yZXR1cm4gfHwgcm9vdC5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICAgIGN1cnJlbnQgPT09IHJvb3QgJiYgKGN1cnJlbnQgPSBudWxsKTtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgIHJvb3Quc2libGluZy5yZXR1cm4gPSByb290LnJldHVybjtcbiAgICAgICAgICByb290ID0gcm9vdC5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChjdXJyZW50ID0gZmxhZ3MucmV0cnlRdWV1ZSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChmbGFncy5yZXRyeVF1ZXVlID0gbnVsbCksXG4gICAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgY3VycmVudCkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDMwOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayksXG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgaWYgKGZsYWdzICYgMikge1xuICAgIHRyeSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgaG9zdFBhcmVudEZpYmVyLCBwYXJlbnRGaWJlciA9IGZpbmlzaGVkV29yay5yZXR1cm47XG4gICAgICAgIG51bGwgIT09IHBhcmVudEZpYmVyO1xuXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnRGaWJlcikpIHtcbiAgICAgICAgICBob3N0UGFyZW50RmliZXIgPSBwYXJlbnRGaWJlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09IGhvc3RQYXJlbnRGaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjApKTtcbiAgICAgIHN3aXRjaCAoaG9zdFBhcmVudEZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIHZhciBwYXJlbnQgPSBob3N0UGFyZW50RmliZXIuc3RhdGVOb2RlLFxuICAgICAgICAgICAgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUsIHBhcmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICB2YXIgcGFyZW50JDE0NCA9IGhvc3RQYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgaG9zdFBhcmVudEZpYmVyLmZsYWdzICYgMzIgJiZcbiAgICAgICAgICAgIChzZXRUZXh0Q29udGVudChwYXJlbnQkMTQ0LCBcIlwiKSwgKGhvc3RQYXJlbnRGaWJlci5mbGFncyAmPSAtMzMpKTtcbiAgICAgICAgICB2YXIgYmVmb3JlJDE0NSA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKGZpbmlzaGVkV29yaywgYmVmb3JlJDE0NSwgcGFyZW50JDE0NCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHZhciBwYXJlbnQkMTQ2ID0gaG9zdFBhcmVudEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgYmVmb3JlJDE0NyA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihcbiAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgIGJlZm9yZSQxNDcsXG4gICAgICAgICAgICBwYXJlbnQkMTQ2XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG4gICAgZmluaXNoZWRXb3JrLmZsYWdzICY9IC0zO1xuICB9XG4gIGZsYWdzICYgNDA5NiAmJiAoZmluaXNoZWRXb3JrLmZsYWdzICY9IC00MDk3KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyhwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaWJlciA9IHBhcmVudEZpYmVyO1xuICAgICAgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpYmVyKTtcbiAgICAgIDUgPT09IGZpYmVyLnRhZyAmJiBmaWJlci5mbGFncyAmIDEwMjQgJiYgZmliZXIuc3RhdGVOb2RlLnJlc2V0KCk7XG4gICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMocm9vdCwgcGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBwYXJlbnRGaWJlci5hbHRlcm5hdGUsIHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNDpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI3OlxuICAgICAgICByZWxlYXNlU2luZ2xldG9uSW5zdGFuY2UoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSk7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSA1OlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbikge1xuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzID1cbiAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmIDAgIT09IChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiA4NzcyKTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGUsXG4gICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcixcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGhpZGRlbkNhbGxiYWNrcyA9IGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGhpZGRlbkNhbGxiYWNrcylcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3Quc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9IG51bGwsIGZpbmlzaGVkUm9vdCA9IDA7XG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290IDwgaGlkZGVuQ2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QrK1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2FsbENhbGxiYWNrKGhpZGRlbkNhbGxiYWNrc1tmaW5pc2hlZFJvb3RdLCBpbnN0YW5jZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICAgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNzpcbiAgICAgICAgY29tbWl0SG9zdFNpbmdsZXRvbkFjcXVpc2l0aW9uKGZpbmlzaGVkV29yayk7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSA1OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAgIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEyOlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgICBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICk7XG4gICAgICAgIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzA6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKGN1cnJlbnQsIGZpbmlzaGVkV29yaykge1xuICB2YXIgcHJldmlvdXNDYWNoZSA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgKHByZXZpb3VzQ2FjaGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ID0gbnVsbDtcbiAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgY3VycmVudCAhPT0gcHJldmlvdXNDYWNoZSAmJlxuICAgIChudWxsICE9IGN1cnJlbnQgJiYgY3VycmVudC5yZWZDb3VudCsrLFxuICAgIG51bGwgIT0gcHJldmlvdXNDYWNoZSAmJiByZWxlYXNlQ2FjaGUocHJldmlvdXNDYWNoZSkpO1xufVxuZnVuY3Rpb24gY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICBmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZTtcbiAgZmluaXNoZWRXb3JrICE9PSBjdXJyZW50ICYmXG4gICAgKGZpbmlzaGVkV29yay5yZWZDb3VudCsrLCBudWxsICE9IGN1cnJlbnQgJiYgcmVsZWFzZUNhY2hlKGN1cnJlbnQpKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICByb290LFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudEZpYmVyLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgZmluaXNoZWRSb290LFxuICBmaW5pc2hlZFdvcmssXG4gIGNvbW1pdHRlZExhbmVzLFxuICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICBmaW5pc2hlZFdvcmsgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgIChmaW5pc2hlZFdvcmsucmVmQ291bnQrKyxcbiAgICAgICAgICBudWxsICE9IGZpbmlzaGVkUm9vdCAmJiByZWxlYXNlQ2FjaGUoZmluaXNoZWRSb290KSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIGlmIChmbGFncyAmIDIwNDgpIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICApO1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuaWQsXG4gICAgICAgICAgICBvblBvc3RDb21taXQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLm9uUG9zdENvbW1pdDtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvblBvc3RDb21taXQgJiZcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdChcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgPyBcIm1vdW50XCIgOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QucGFzc2l2ZUVmZmVjdER1cmF0aW9uLFxuICAgICAgICAgICAgICAtMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjM6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBpZCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiAyXG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKVxuICAgICAgICA6IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiAyXG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5IHw9IDIpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgICAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDIwNDggJiYgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhpZCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgY29tbWl0dGVkTGFuZXMgPSBjb21taXR0ZWRMYW5lcyRqc2NvbXAkMCxcbiAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zID0gY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAsXG4gICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE1OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDJcbiAgICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICA6ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgfD0gMiksXG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICAgICkpO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlclxuKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI1NilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG52YXIgc3VzcGVuc2V5Q29tbWl0RmxhZyA9IDgxOTI7XG5mdW5jdGlvbiByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQocGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIocGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBmaWJlci5mbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcgJiZcbiAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICBzdXNwZW5kUmVzb3VyY2UoXG4gICAgICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFByb3BzXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICAgIHZhciBwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChmaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgbnVsbCA9PT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICBudWxsICE9PSBwcmV2aW91c0hvaXN0YWJsZVJvb3QubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKChwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBzdXNwZW5zZXlDb21taXRGbGFnKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gMTY3NzcyMTYpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gcHJldmlvdXNIb2lzdGFibGVSb290KSlcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gcHJldmlvdXNGaWJlciAmJlxuICAgICgocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyLmNoaWxkKSwgbnVsbCAhPT0gcGFyZW50RmliZXIpXG4gICkge1xuICAgIHByZXZpb3VzRmliZXIuY2hpbGQgPSBudWxsO1xuICAgIGRvXG4gICAgICAocHJldmlvdXNGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpLFxuICAgICAgICAocGFyZW50RmliZXIuc2libGluZyA9IG51bGwpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyKTtcbiAgICB3aGlsZSAobnVsbCAhPT0gcGFyZW50RmliZXIpO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoOSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDIgJiZcbiAgICAgIChudWxsID09PSBmaW5pc2hlZFdvcmsucmV0dXJuIHx8IDEzICE9PSBmaW5pc2hlZFdvcmsucmV0dXJuLnRhZylcbiAgICAgICAgPyAoKGluc3RhbmNlLl92aXNpYmlsaXR5ICY9IC0zKSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGZpbmlzaGVkV29yaykpXG4gICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuICBpZiAoMCAhPT0gKHBhcmVudEZpYmVyLmZsYWdzICYgMTYpKSB7XG4gICAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsZXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldO1xuICAgICAgICBuZXh0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZTtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbihcbiAgICAgICAgICBjaGlsZFRvRGVsZXRlLFxuICAgICAgICAgIHBhcmVudEZpYmVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpO1xuICB9XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyO1xuICAgIHN3aXRjaCAoZGVsZXRpb25zLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBkZWxldGlvbnMsIGRlbGV0aW9ucy5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaSA9IGRlbGV0aW9ucy5zdGF0ZU5vZGU7XG4gICAgICAgIGkuX3Zpc2liaWxpdHkgJiAyICYmXG4gICAgICAgICAgKChpLl92aXNpYmlsaXR5ICY9IC0zKSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICBkZWxldGVkU3VidHJlZVJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3Jcbikge1xuICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcbiAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBmaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMzpcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2xcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGNhY2hlID0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbDtcbiAgICAgICAgICBudWxsICE9IGNhY2hlICYmIGNhY2hlLnJlZkNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICByZWxlYXNlQ2FjaGUoZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgfVxuICAgIGNhY2hlID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IGNhY2hlKSAoY2FjaGUucmV0dXJuID0gZmliZXIpLCAobmV4dEVmZmVjdCA9IGNhY2hlKTtcbiAgICBlbHNlXG4gICAgICBhOiBmb3IgKGZpYmVyID0gZGVsZXRlZFN1YnRyZWVSb290OyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgY2FjaGUgPSBuZXh0RWZmZWN0O1xuICAgICAgICB2YXIgc2libGluZyA9IGNhY2hlLnNpYmxpbmcsXG4gICAgICAgICAgcmV0dXJuRmliZXIgPSBjYWNoZS5yZXR1cm47XG4gICAgICAgIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGNhY2hlKTtcbiAgICAgICAgaWYgKGNhY2hlID09PSBmaWJlcikge1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgIT09IHNpYmxpbmcpIHtcbiAgICAgICAgICBzaWJsaW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IHJldHVybkZpYmVyO1xuICAgICAgfVxuICB9XG59XG52YXIgRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciA9IHtcbiAgICBnZXRDYWNoZUZvclR5cGU6IGZ1bmN0aW9uIChyZXNvdXJjZVR5cGUpIHtcbiAgICAgIHZhciBjYWNoZSA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCksXG4gICAgICAgIGNhY2hlRm9yVHlwZSA9IGNhY2hlLmRhdGEuZ2V0KHJlc291cmNlVHlwZSk7XG4gICAgICB2b2lkIDAgPT09IGNhY2hlRm9yVHlwZSAmJlxuICAgICAgICAoKGNhY2hlRm9yVHlwZSA9IHJlc291cmNlVHlwZSgpKSxcbiAgICAgICAgY2FjaGUuZGF0YS5zZXQocmVzb3VyY2VUeXBlLCBjYWNoZUZvclR5cGUpKTtcbiAgICAgIHJldHVybiBjYWNoZUZvclR5cGU7XG4gICAgfVxuICB9LFxuICBQb3NzaWJseVdlYWtNYXAgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrTWFwID8gV2Vha01hcCA6IE1hcCxcbiAgZXhlY3V0aW9uQ29udGV4dCA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDAsXG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITEsXG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMSxcbiAgZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBJbmZpbml0eSxcbiAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwsXG4gIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCxcbiAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAwLFxuICBwZW5kaW5nRWZmZWN0c1Jvb3QgPSBudWxsLFxuICBwZW5kaW5nRmluaXNoZWRXb3JrID0gbnVsbCxcbiAgcGVuZGluZ0VmZmVjdHNMYW5lcyA9IDAsXG4gIHBlbmRpbmdFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwLFxuICBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gbnVsbCxcbiAgcGVuZGluZ1JlY292ZXJhYmxlRXJyb3JzID0gbnVsbCxcbiAgbmVzdGVkVXBkYXRlQ291bnQgPSAwLFxuICByb290V2l0aE5lc3RlZFVwZGF0ZXMgPSBudWxsO1xuZnVuY3Rpb24gcmVxdWVzdFVwZGF0ZUxhbmUoKSB7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIDAgIT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKVxuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIC13b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgaWYgKG51bGwgIT09IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQpIHtcbiAgICB2YXIgYWN0aW9uU2NvcGVMYW5lID0gY3VycmVudEVudGFuZ2xlZExhbmU7XG4gICAgcmV0dXJuIDAgIT09IGFjdGlvblNjb3BlTGFuZSA/IGFjdGlvblNjb3BlTGFuZSA6IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpO1xuICB9XG4gIHJldHVybiByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3REZWZlcnJlZExhbmUoKSB7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lICYmXG4gICAgKHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID1cbiAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgfHwgaXNIeWRyYXRpbmdcbiAgICAgICAgPyBjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSgpXG4gICAgICAgIDogNTM2ODcwOTEyKTtcbiAgdmFyIHN1c3BlbnNlSGFuZGxlciA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIG51bGwgIT09IHN1c3BlbnNlSGFuZGxlciAmJiAoc3VzcGVuc2VIYW5kbGVyLmZsYWdzIHw9IDMyKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lKSB7XG4gIGlmIChcbiAgICAocm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgICAoMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgOSA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgMCksXG4gICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgcm9vdCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgbWFya1Jvb3RVcGRhdGVkJDEocm9vdCwgbGFuZSk7XG4gIGlmICgwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpIHx8IHJvb3QgIT09IHdvcmtJblByb2dyZXNzUm9vdClcbiAgICByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiZcbiAgICAgICgwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyB8PSBsYW5lKSxcbiAgICAgIDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgcm9vdCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAhMVxuICAgICAgICApKSxcbiAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QkanNjb21wJDAsIGxhbmVzLCBmb3JjZVN5bmMpIHtcbiAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzI3KSk7XG4gIHZhciBzaG91bGRUaW1lU2xpY2UgPVxuICAgICAgKCFmb3JjZVN5bmMgJiZcbiAgICAgICAgMCA9PT0gKGxhbmVzICYgMTI0KSAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiByb290JGpzY29tcCQwLmV4cGlyZWRMYW5lcykpIHx8XG4gICAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QkanNjb21wJDAsIGxhbmVzKSxcbiAgICBleGl0U3RhdHVzID0gc2hvdWxkVGltZVNsaWNlXG4gICAgICA/IHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QkanNjb21wJDAsIGxhbmVzKVxuICAgICAgOiByZW5kZXJSb290U3luYyhyb290JGpzY29tcCQwLCBsYW5lcywgITApLFxuICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBzaG91bGRUaW1lU2xpY2U7XG4gIGRvIHtcbiAgICBpZiAoMCA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgIXNob3VsZFRpbWVTbGljZSAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290JGpzY29tcCQwLCBsYW5lcywgMCwgITEpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcmNlU3luYyA9IHJvb3QkanNjb21wJDAuY3VycmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAoXG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgIWlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3Jlcyhmb3JjZVN5bmMpXG4gICAgICApIHtcbiAgICAgICAgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QkanNjb21wJDAsIGxhbmVzLCAhMSk7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSAhMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoMiA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gbGFuZXM7XG4gICAgICAgIGlmIChyb290JGpzY29tcCQwLmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzICYgcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByb290JGpzY29tcCQwLnBlbmRpbmdMYW5lcyAmIC01MzY4NzA5MTMpLFxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgID8gNTM2ODcwOTEyXG4gICAgICAgICAgICAgICAgICA6IDApO1xuICAgICAgICBpZiAoMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgbGFuZXMgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByb290JGpzY29tcCQwO1xuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnM7XG4gICAgICAgICAgICB2YXIgd2FzUm9vdERlaHlkcmF0ZWQgPSByb290LmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQ7XG4gICAgICAgICAgICB3YXNSb290RGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAocHJlcGFyZUZyZXNoU3RhY2socm9vdCwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KS5mbGFncyB8PSAyNTYpO1xuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcmVuZGVyUm9vdFN5bmMoXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCxcbiAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoMiAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgJiZcbiAgICAgICAgICAgICAgICAhd2FzUm9vdERlaHlkcmF0ZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyB8PSByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9XG4gICAgICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIGV4aXRTdGF0dXMgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGV4aXRTdGF0dXM7XG4gICAgICAgICAgICAgIG51bGwgIT09IHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnNcbiAgICAgICAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMucHVzaC5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICAgIGlmICgyICE9PSBleGl0U3RhdHVzKSBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKDEgPT09IGV4aXRTdGF0dXMpIHtcbiAgICAgICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCRqc2NvbXAkMCwgMCk7XG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QkanNjb21wJDAsIGxhbmVzLCAwLCAhMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UgPSByb290JGpzY29tcCQwO1xuICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gZXhpdFN0YXR1cztcbiAgICAgICAgc3dpdGNoIChyZW5kZXJXYXNDb25jdXJyZW50KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ1KSk7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaWYgKChsYW5lcyAmIDQxOTQwNDgpICE9PSBsYW5lcykgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzI5KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIChsYW5lcyAmIDYyOTE0NTYwKSA9PT0gbGFuZXMgJiZcbiAgICAgICAgICAoKGV4aXRTdGF0dXMgPSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lICsgMzAwIC0gbm93KCkpLFxuICAgICAgICAgIDEwIDwgZXhpdFN0YXR1cylcbiAgICAgICAgKSB7XG4gICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgIXdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKDAgIT09IGdldE5leHRMYW5lcyhzaG91bGRUaW1lU2xpY2UsIDAsICEwKSkgYnJlYWsgYTtcbiAgICAgICAgICBzaG91bGRUaW1lU2xpY2UudGltZW91dEhhbmRsZSA9IHNjaGVkdWxlVGltZW91dChcbiAgICAgICAgICAgIGNvbW1pdFJvb3RXaGVuUmVhZHkuYmluZChcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgICAgICBmb3JjZVN5bmMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlLFxuICAgICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCxcbiAgICAgICAgICAgICAgMixcbiAgICAgICAgICAgICAgLTAsXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBleGl0U3RhdHVzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9XG4gICAgICAgIGNvbW1pdFJvb3RXaGVuUmVhZHkoXG4gICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgIGZvcmNlU3luYyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgLTAsXG4gICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBicmVhaztcbiAgfSB3aGlsZSAoMSk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290JGpzY29tcCQwKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdFJvb3RXaGVuUmVhZHkoXG4gIHJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIGxhbmVzLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICBkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gIGV4aXRTdGF0dXMsXG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4pIHtcbiAgcm9vdC50aW1lb3V0SGFuZGxlID0gLTE7XG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbiA9IGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3M7XG4gIGlmIChcbiAgICBzdXNwZW5kZWRDb21taXRSZWFzb24gJiA4MTkyIHx8XG4gICAgMTY3ODU0MDggPT09IChzdXNwZW5kZWRDb21taXRSZWFzb24gJiAxNjc4NTQwOClcbiAgKVxuICAgIGlmIChcbiAgICAgICgoc3VzcGVuZGVkU3RhdGUgPSB7IHN0eWxlc2hlZXRzOiBudWxsLCBjb3VudDogMCwgdW5zdXNwZW5kOiBub29wIH0pLFxuICAgICAgYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIoZmluaXNoZWRXb3JrKSxcbiAgICAgIChzdXNwZW5kZWRDb21taXRSZWFzb24gPSB3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5KCkpLFxuICAgICAgbnVsbCAhPT0gc3VzcGVuZGVkQ29tbWl0UmVhc29uKVxuICAgICkge1xuICAgICAgcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0ID0gc3VzcGVuZGVkQ29tbWl0UmVhc29uKFxuICAgICAgICBjb21taXRSb290LmJpbmQoXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICByb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgZXhpdFN0YXR1cyxcbiAgICAgICAgICAxLFxuICAgICAgICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICAgICAgICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290LCBsYW5lcywgc3Bhd25lZExhbmUsICFkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgY29tbWl0Um9vdChcbiAgICByb290LFxuICAgIGZpbmlzaGVkV29yayxcbiAgICBsYW5lcyxcbiAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICB0cmFuc2l0aW9ucyxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3JlcyhmaW5pc2hlZFdvcmspIHtcbiAgZm9yICh2YXIgbm9kZSA9IGZpbmlzaGVkV29yazsgOyApIHtcbiAgICB2YXIgdGFnID0gbm9kZS50YWc7XG4gICAgaWYgKFxuICAgICAgKDAgPT09IHRhZyB8fCAxMSA9PT0gdGFnIHx8IDE1ID09PSB0YWcpICYmXG4gICAgICBub2RlLmZsYWdzICYgMTYzODQgJiZcbiAgICAgICgodGFnID0gbm9kZS51cGRhdGVRdWV1ZSksXG4gICAgICBudWxsICE9PSB0YWcgJiYgKCh0YWcgPSB0YWcuc3RvcmVzKSwgbnVsbCAhPT0gdGFnKSlcbiAgICApXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2sgPSB0YWdbaV0sXG4gICAgICAgICAgZ2V0U25hcHNob3QgPSBjaGVjay5nZXRTbmFwc2hvdDtcbiAgICAgICAgY2hlY2sgPSBjaGVjay52YWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIW9iamVjdElzKGdldFNuYXBzaG90KCksIGNoZWNrKSkgcmV0dXJuICExO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIHRhZyA9IG5vZGUuY2hpbGQ7XG4gICAgaWYgKG5vZGUuc3VidHJlZUZsYWdzICYgMTYzODQgJiYgbnVsbCAhPT0gdGFnKVxuICAgICAgKHRhZy5yZXR1cm4gPSBub2RlKSwgKG5vZGUgPSB0YWcpO1xuICAgIGVsc2Uge1xuICAgICAgaWYgKG5vZGUgPT09IGZpbmlzaGVkV29yaykgYnJlYWs7XG4gICAgICBmb3IgKDsgbnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSBmaW5pc2hlZFdvcmspIHJldHVybiAhMDtcbiAgICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RTdXNwZW5kZWQoXG4gIHJvb3QsXG4gIHN1c3BlbmRlZExhbmVzLFxuICBzcGF3bmVkTGFuZSxcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWVcbikge1xuICBzdXNwZW5kZWRMYW5lcyAmPSB+d29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzICY9IH53b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcztcbiAgcm9vdC5zdXNwZW5kZWRMYW5lcyB8PSBzdXNwZW5kZWRMYW5lcztcbiAgcm9vdC5waW5nZWRMYW5lcyAmPSB+c3VzcGVuZGVkTGFuZXM7XG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlICYmIChyb290Lndhcm1MYW5lcyB8PSBzdXNwZW5kZWRMYW5lcyk7XG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlID0gcm9vdC5leHBpcmF0aW9uVGltZXM7XG4gIGZvciAodmFyIGxhbmVzID0gc3VzcGVuZGVkTGFuZXM7IDAgPCBsYW5lczsgKSB7XG4gICAgdmFyIGluZGV4JDQgPSAzMSAtIGNsejMyKGxhbmVzKSxcbiAgICAgIGxhbmUgPSAxIDw8IGluZGV4JDQ7XG4gICAgZGlkQXR0ZW1wdEVudGlyZVRyZWVbaW5kZXgkNF0gPSAtMTtcbiAgICBsYW5lcyAmPSB+bGFuZTtcbiAgfVxuICAwICE9PSBzcGF3bmVkTGFuZSAmJlxuICAgIG1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lKHJvb3QsIHNwYXduZWRMYW5lLCBzdXNwZW5kZWRMYW5lcyk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrJDEoKSB7XG4gIHJldHVybiAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpXG4gICAgPyAoZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoMCwgITEpLCAhMSlcbiAgICA6ICEwO1xufVxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCkge1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICBpZiAoMCA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pXG4gICAgICB2YXIgaW50ZXJydXB0ZWRXb3JrID0gd29ya0luUHJvZ3Jlc3MucmV0dXJuO1xuICAgIGVsc2VcbiAgICAgIChpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbCksXG4gICAgICAgIHJlc2V0SG9va3NPblVud2luZChpbnRlcnJ1cHRlZFdvcmspLFxuICAgICAgICAodGhlbmFibGVTdGF0ZSA9IG51bGwpLFxuICAgICAgICAodGhlbmFibGVJbmRleENvdW50ZXIgPSAwKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKTtcbiAgICBmb3IgKDsgbnVsbCAhPT0gaW50ZXJydXB0ZWRXb3JrOyApXG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoaW50ZXJydXB0ZWRXb3JrLmFsdGVybmF0ZSwgaW50ZXJydXB0ZWRXb3JrKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29yay5yZXR1cm4pO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpIHtcbiAgdmFyIHRpbWVvdXRIYW5kbGUgPSByb290LnRpbWVvdXRIYW5kbGU7XG4gIC0xICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LnRpbWVvdXRIYW5kbGUgPSAtMSksIGNhbmNlbFRpbWVvdXQodGltZW91dEhhbmRsZSkpO1xuICB0aW1lb3V0SGFuZGxlID0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0O1xuICBudWxsICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsKSwgdGltZW91dEhhbmRsZSgpKTtcbiAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IHJvb3Q7XG4gIHdvcmtJblByb2dyZXNzID0gdGltZW91dEhhbmRsZSA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHJvb3QuY3VycmVudCwgbnVsbCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgbGFuZXMpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMTtcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPVxuICAgICAgMDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID1cbiAgICBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlID0gITE7XG4gIDAgIT09IChsYW5lcyAmIDgpICYmIChsYW5lcyB8PSBsYW5lcyAmIDMyKTtcbiAgdmFyIGFsbEVudGFuZ2xlZExhbmVzID0gcm9vdC5lbnRhbmdsZWRMYW5lcztcbiAgaWYgKDAgIT09IGFsbEVudGFuZ2xlZExhbmVzKVxuICAgIGZvciAoXG4gICAgICByb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzLCBhbGxFbnRhbmdsZWRMYW5lcyAmPSBsYW5lcztcbiAgICAgIDAgPCBhbGxFbnRhbmdsZWRMYW5lcztcblxuICAgICkge1xuICAgICAgdmFyIGluZGV4JDIgPSAzMSAtIGNsejMyKGFsbEVudGFuZ2xlZExhbmVzKSxcbiAgICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkMjtcbiAgICAgIGxhbmVzIHw9IHJvb3RbaW5kZXgkMl07XG4gICAgICBhbGxFbnRhbmdsZWRMYW5lcyAmPSB+bGFuZTtcbiAgICB9XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHRpbWVvdXRIYW5kbGU7XG59XG5mdW5jdGlvbiBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSkge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHRocm93blZhbHVlID09PSBTdXNwZW5zZUV4Y2VwdGlvbiB8fCB0aHJvd25WYWx1ZSA9PT0gU3VzcGVuc2VBY3Rpb25FeGNlcHRpb25cbiAgICA/ICgodGhyb3duVmFsdWUgPSBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDMpKVxuICAgIDogdGhyb3duVmFsdWUgPT09IFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvblxuICAgICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDQpKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPVxuICAgICAgICAgIHRocm93blZhbHVlID09PSBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb25cbiAgICAgICAgICAgID8gOFxuICAgICAgICAgICAgOiBudWxsICE9PSB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHRocm93blZhbHVlLnRoZW5cbiAgICAgICAgICAgICAgPyA2XG4gICAgICAgICAgICAgIDogMSk7XG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSB0aHJvd25WYWx1ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxKSxcbiAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgcm9vdCxcbiAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgKSk7XG59XG5mdW5jdGlvbiBwdXNoRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIG51bGwgPT09IHByZXZEaXNwYXRjaGVyID8gQ29udGV4dE9ubHlEaXNwYXRjaGVyIDogcHJldkRpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiBwdXNoQXN5bmNEaXNwYXRjaGVyKCkge1xuICB2YXIgcHJldkFzeW5jRGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkE7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBEZWZhdWx0QXN5bmNEaXNwYXRjaGVyO1xuICByZXR1cm4gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKSB7XG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA0O1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgfHxcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDA0OCkgIT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCkgfHxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMCk7XG4gICgwID09PSAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzICYgMTM0MjE3NzI3KSAmJlxuICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyAmIDEzNDIxNzcyNykpIHx8XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290IHx8XG4gICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QsXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgITFcbiAgICApO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdFN5bmMocm9vdCwgbGFuZXMsIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gMjtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKSxcbiAgICBwcmV2QXN5bmNEaXNwYXRjaGVyID0gcHVzaEFzeW5jRGlzcGF0Y2hlcigpO1xuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lcylcbiAgICAod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLCBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcyk7XG4gIGxhbmVzID0gITE7XG4gIHZhciBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHZhciB1bml0T2ZXb3JrID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgbnVsbCA9PT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCAmJiAobGFuZXMgPSAhMCk7XG4gICAgICAgICAgICB2YXIgcmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb247XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nICYmXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgKHJlYXNvbiA9IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wU3luYygpO1xuICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjcpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2Nyk7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhbmVzICYmIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlcisrO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gcHJldkRpc3BhdGNoZXI7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBwcmV2QXN5bmNEaXNwYXRjaGVyO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgICgod29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCksXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCksXG4gICAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpKTtcbiAgcmV0dXJuIGV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcFN5bmMoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzczsgKSBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiByZW5kZXJSb290Q29uY3VycmVudChyb290LCBsYW5lcykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lc1xuICAgID8gKCh3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IG5vdygpICsgNTAwKSxcbiAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGxhbmVzXG4gICAgICApKTtcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIGxhbmVzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIHZhciB0aHJvd25WYWx1ZSA9IHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWU7XG4gICAgICAgIGI6IHN3aXRjaCAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKSkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgKDIgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmXG4gICAgICAgICAgICAgICAgOSAhPT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHx8XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8XG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNyk7XG4gICAgICAgICAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aHJvd25WYWx1ZS50aGVuKGxhbmVzLCBsYW5lcyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNztcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA1O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBpc1RoZW5hYmxlUmVzb2x2ZWQodGhyb3duVmFsdWUpXG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDApLFxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgcmVwbGF5U3VzcGVuZGVkVW5pdE9mV29yayhsYW5lcykpXG4gICAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDApLFxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDcpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgICAgICAgIHJlc291cmNlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgIHZhciBob3N0RmliZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2UgPyBwcmVsb2FkUmVzb3VyY2UocmVzb3VyY2UpIDogMSkge1xuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB2YXIgc2libGluZyA9IGhvc3RGaWJlci5zaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHNpYmxpbmcpIHdvcmtJblByb2dyZXNzID0gc2libGluZztcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuRmliZXIgPSBob3N0RmliZXIucmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlVW5pdE9mV29yayhyZXR1cm5GaWJlcikpXG4gICAgICAgICAgICAgICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MgPSBudWxsKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA2KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDY7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3b3JrTG9vcENvbmN1cnJlbnRCeVNjaGVkdWxlcigpO1xuICAgICAgYnJlYWs7XG4gICAgfSBjYXRjaCAodGhyb3duVmFsdWUkMTY5KSB7XG4gICAgICBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSQxNjkpO1xuICAgIH1cbiAgd2hpbGUgKDEpO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHJldHVybiAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDA7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcENvbmN1cnJlbnRCeVNjaGVkdWxlcigpIHtcbiAgZm9yICg7IG51bGwgIT09IHdvcmtJblByb2dyZXNzICYmICFzaG91bGRZaWVsZCgpOyApXG4gICAgcGVyZm9ybVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcGVyZm9ybVVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgbmV4dCA9IGJlZ2luV29yayh1bml0T2ZXb3JrLmFsdGVybmF0ZSwgdW5pdE9mV29yaywgZW50YW5nbGVkUmVuZGVyTGFuZXMpO1xuICB1bml0T2ZXb3JrLm1lbW9pemVkUHJvcHMgPSB1bml0T2ZXb3JrLnBlbmRpbmdQcm9wcztcbiAgbnVsbCA9PT0gbmV4dCA/IGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSA6ICh3b3JrSW5Qcm9ncmVzcyA9IG5leHQpO1xufVxuZnVuY3Rpb24gcmVwbGF5U3VzcGVuZGVkVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBuZXh0ID0gdW5pdE9mV29yaztcbiAgdmFyIGN1cnJlbnQgPSBuZXh0LmFsdGVybmF0ZTtcbiAgc3dpdGNoIChuZXh0LnRhZykge1xuICAgIGNhc2UgMTU6XG4gICAgY2FzZSAwOlxuICAgICAgbmV4dCA9IHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBuZXh0LFxuICAgICAgICBuZXh0LnBlbmRpbmdQcm9wcyxcbiAgICAgICAgbmV4dC50eXBlLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMTpcbiAgICAgIG5leHQgPSByZXBsYXlGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbmV4dC5wZW5kaW5nUHJvcHMsXG4gICAgICAgIG5leHQudHlwZS5yZW5kZXIsXG4gICAgICAgIG5leHQucmVmLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlc2V0SG9va3NPblVud2luZChuZXh0KTtcbiAgICBkZWZhdWx0OlxuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIG5leHQpLFxuICAgICAgICAobmV4dCA9IHdvcmtJblByb2dyZXNzID1cbiAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzKG5leHQsIGVudGFuZ2xlZFJlbmRlckxhbmVzKSksXG4gICAgICAgIChuZXh0ID0gYmVnaW5Xb3JrKGN1cnJlbnQsIG5leHQsIGVudGFuZ2xlZFJlbmRlckxhbmVzKSk7XG4gIH1cbiAgdW5pdE9mV29yay5tZW1vaXplZFByb3BzID0gdW5pdE9mV29yay5wZW5kaW5nUHJvcHM7XG4gIG51bGwgPT09IG5leHQgPyBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykgOiAod29ya0luUHJvZ3Jlc3MgPSBuZXh0KTtcbn1cbmZ1bmN0aW9uIHRocm93QW5kVW53aW5kV29ya0xvb3AoXG4gIHJvb3QsXG4gIHVuaXRPZldvcmssXG4gIHRocm93blZhbHVlLFxuICBzdXNwZW5kZWRSZWFzb25cbikge1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgcmVzZXRIb29rc09uVW53aW5kKHVuaXRPZldvcmspO1xuICB0aGVuYWJsZVN0YXRlID0gbnVsbDtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwO1xuICB2YXIgcmV0dXJuRmliZXIgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICB0aHJvd0V4Y2VwdGlvbihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHVuaXRPZldvcmssXG4gICAgICAgIHRocm93blZhbHVlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgICByb290LFxuICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICAgKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKG51bGwgIT09IHJldHVybkZpYmVyKSB0aHJvdyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLCBlcnJvcik7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICk7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW5pdE9mV29yay5mbGFncyAmIDMyNzY4KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nIHx8IDEgPT09IHN1c3BlbmRlZFJlYXNvbikgcm9vdCA9ICEwO1xuICAgIGVsc2UgaWYgKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgfHxcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMilcbiAgICApXG4gICAgICByb290ID0gITE7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9IHJvb3QgPSAhMCksXG4gICAgICAyID09PSBzdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgOSA9PT0gc3VzcGVuZGVkUmVhc29uIHx8XG4gICAgICAgIDMgPT09IHN1c3BlbmRlZFJlYXNvbiB8fFxuICAgICAgICA2ID09PSBzdXNwZW5kZWRSZWFzb24pXG4gICAgKVxuICAgICAgKHN1c3BlbmRlZFJlYXNvbiA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgICBudWxsICE9PSBzdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAxMyA9PT0gc3VzcGVuZGVkUmVhc29uLnRhZyAmJlxuICAgICAgICAgIChzdXNwZW5kZWRSZWFzb24uZmxhZ3MgfD0gMTYzODQpO1xuICAgIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgcm9vdCk7XG4gIH0gZWxzZSBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yayk7XG59XG5mdW5jdGlvbiBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgY29tcGxldGVkV29yayA9IHVuaXRPZldvcms7XG4gIGRvIHtcbiAgICBpZiAoMCAhPT0gKGNvbXBsZXRlZFdvcmsuZmxhZ3MgJiAzMjc2OCkpIHtcbiAgICAgIHVud2luZFVuaXRPZldvcmsoXG4gICAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdW5pdE9mV29yayA9IGNvbXBsZXRlZFdvcmsucmV0dXJuO1xuICAgIHZhciBuZXh0ID0gY29tcGxldGVXb3JrKFxuICAgICAgY29tcGxldGVkV29yay5hbHRlcm5hdGUsXG4gICAgICBjb21wbGV0ZWRXb3JrLFxuICAgICAgZW50YW5nbGVkUmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBsZXRlZFdvcmsgPSBjb21wbGV0ZWRXb3JrLnNpYmxpbmc7XG4gICAgaWYgKG51bGwgIT09IGNvbXBsZXRlZFdvcmspIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gY29tcGxldGVkV29yaztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgfSB3aGlsZSAobnVsbCAhPT0gY29tcGxldGVkV29yayk7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA1KTtcbn1cbmZ1bmN0aW9uIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgc2tpcFNpYmxpbmdzKSB7XG4gIGRvIHtcbiAgICB2YXIgbmV4dCA9IHVud2luZFdvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmspO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICBuZXh0LmZsYWdzICY9IDMyNzY3O1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBuZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXh0ID0gdW5pdE9mV29yay5yZXR1cm47XG4gICAgbnVsbCAhPT0gbmV4dCAmJlxuICAgICAgKChuZXh0LmZsYWdzIHw9IDMyNzY4KSwgKG5leHQuc3VidHJlZUZsYWdzID0gMCksIChuZXh0LmRlbGV0aW9ucyA9IG51bGwpKTtcbiAgICBpZiAoXG4gICAgICAhc2tpcFNpYmxpbmdzICYmXG4gICAgICAoKHVuaXRPZldvcmsgPSB1bml0T2ZXb3JrLnNpYmxpbmcpLCBudWxsICE9PSB1bml0T2ZXb3JrKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1bml0T2ZXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcmsgPSBuZXh0O1xuICB9IHdoaWxlIChudWxsICE9PSB1bml0T2ZXb3JrKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDY7XG4gIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdFJvb3QoXG4gIHJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgbGFuZXMsXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzXG4pIHtcbiAgcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0ID0gbnVsbDtcbiAgZG8gZmx1c2hQZW5kaW5nRWZmZWN0cygpO1xuICB3aGlsZSAoMCAhPT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMpO1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgaWYgKG51bGwgIT09IGZpbmlzaGVkV29yaykge1xuICAgIGlmIChmaW5pc2hlZFdvcmsgPT09IHJvb3QuY3VycmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNzcpKTtcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgPSBmaW5pc2hlZFdvcmsubGFuZXMgfCBmaW5pc2hlZFdvcmsuY2hpbGRMYW5lcztcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgfD0gY29uY3VycmVudGx5VXBkYXRlZExhbmVzO1xuICAgIG1hcmtSb290RmluaXNoZWQoXG4gICAgICByb290LFxuICAgICAgbGFuZXMsXG4gICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICBzcGF3bmVkTGFuZSxcbiAgICAgIHVwZGF0ZWRMYW5lcyxcbiAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgICApO1xuICAgIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICAgKCh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCkpO1xuICAgIHBlbmRpbmdGaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gICAgcGVuZGluZ0VmZmVjdHNSb290ID0gcm9vdDtcbiAgICBwZW5kaW5nRWZmZWN0c0xhbmVzID0gbGFuZXM7XG4gICAgcGVuZGluZ0VmZmVjdHNSZW1haW5pbmdMYW5lcyA9IGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZTtcbiAgICBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnM7XG4gICAgcGVuZGluZ1JlY292ZXJhYmxlRXJyb3JzID0gcmVjb3ZlcmFibGVFcnJvcnM7XG4gICAgMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMDI1NikgfHxcbiAgICAwICE9PSAoZmluaXNoZWRXb3JrLmZsYWdzICYgMTAyNTYpXG4gICAgICA/ICgocm9vdC5jYWxsYmFja05vZGUgPSBudWxsKSxcbiAgICAgICAgKHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDApLFxuICAgICAgICBzY2hlZHVsZUNhbGxiYWNrJDEoTm9ybWFsUHJpb3JpdHkkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZsdXNoUGFzc2l2ZUVmZmVjdHMoITApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KSlcbiAgICAgIDogKChyb290LmNhbGxiYWNrTm9kZSA9IG51bGwpLCAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMCkpO1xuICAgIHJlY292ZXJhYmxlRXJyb3JzID0gMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEzODc4KTtcbiAgICBpZiAoMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMzg3OCkgfHwgcmVjb3ZlcmFibGVFcnJvcnMpIHtcbiAgICAgIHJlY292ZXJhYmxlRXJyb3JzID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgICAgdHJhbnNpdGlvbnMgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICBzcGF3bmVkTGFuZSA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgICB0cnkge1xuICAgICAgICBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrLCBsYW5lcyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHNwYXduZWRMYW5lKSxcbiAgICAgICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHRyYW5zaXRpb25zKSxcbiAgICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHJlY292ZXJhYmxlRXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAxO1xuICAgIGZsdXNoTXV0YXRpb25FZmZlY3RzKCk7XG4gICAgZmx1c2hMYXlvdXRFZmZlY3RzKCk7XG4gICAgZmx1c2hTcGF3bmVkV29yaygpO1xuICB9XG59XG5mdW5jdGlvbiBmbHVzaE11dGF0aW9uRWZmZWN0cygpIHtcbiAgaWYgKDEgPT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzKSB7XG4gICAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAwO1xuICAgIHZhciByb290ID0gcGVuZGluZ0VmZmVjdHNSb290LFxuICAgICAgZmluaXNoZWRXb3JrID0gcGVuZGluZ0ZpbmlzaGVkV29yayxcbiAgICAgIHJvb3RNdXRhdGlvbkhhc0VmZmVjdCA9IDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMzg3OCk7XG4gICAgaWYgKDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTM4NzgpIHx8IHJvb3RNdXRhdGlvbkhhc0VmZmVjdCkge1xuICAgICAgcm9vdE11dGF0aW9uSGFzRWZmZWN0ID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgICAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgICAgZXhlY3V0aW9uQ29udGV4dCB8PSA0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpO1xuICAgICAgICB2YXIgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9IHNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICAgICAgICAgIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAocm9vdC5jb250YWluZXJJbmZvKSxcbiAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbSxcbiAgICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZWxlY3Rpb25SYW5nZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmXG4gICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSAmJlxuICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0ub3duZXJEb2N1bWVudCAmJlxuICAgICAgICAgIGNvbnRhaW5zTm9kZShcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBudWxsICE9PSBwcmlvclNlbGVjdGlvblJhbmdlICYmXG4gICAgICAgICAgICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHByaW9yU2VsZWN0aW9uUmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICAgIGVuZCA9IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kO1xuICAgICAgICAgICAgdm9pZCAwID09PSBlbmQgJiYgKGVuZCA9IHN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gcHJpb3JGb2N1c2VkRWxlbSlcbiAgICAgICAgICAgICAgKHByaW9yRm9jdXNlZEVsZW0uc2VsZWN0aW9uU3RhcnQgPSBzdGFydCksXG4gICAgICAgICAgICAgICAgKHByaW9yRm9jdXNlZEVsZW0uc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtLnZhbHVlLmxlbmd0aFxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBkb2MgPSBwcmlvckZvY3VzZWRFbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgd2luID0gKGRvYyAmJiBkb2MuZGVmYXVsdFZpZXcpIHx8IHdpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHdpbi5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luLmdldFNlbGVjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gcHJpb3JGb2N1c2VkRWxlbS50ZXh0Q29udGVudC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICBzdGFydCRqc2NvbXAkMCA9IE1hdGgubWluKHByaW9yU2VsZWN0aW9uUmFuZ2Uuc3RhcnQsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICBlbmQkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kXG4gICAgICAgICAgICAgICAgICAgICAgPyBzdGFydCRqc2NvbXAkMFxuICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5taW4ocHJpb3JTZWxlY3Rpb25SYW5nZS5lbmQsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgIXNlbGVjdGlvbi5leHRlbmQgJiZcbiAgICAgICAgICAgICAgICAgIHN0YXJ0JGpzY29tcCQwID4gZW5kJGpzY29tcCQwICYmXG4gICAgICAgICAgICAgICAgICAoKGN1ckZvY3VzZWRFbGVtID0gZW5kJGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgICAgIChlbmQkanNjb21wJDAgPSBzdGFydCRqc2NvbXAkMCksXG4gICAgICAgICAgICAgICAgICAoc3RhcnQkanNjb21wJDAgPSBjdXJGb2N1c2VkRWxlbSkpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoXG4gICAgICAgICAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0sXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0JGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcbiAgICAgICAgICAgICAgICAgICAgZW5kJGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHN0YXJ0TWFya2VyICYmXG4gICAgICAgICAgICAgICAgICBlbmRNYXJrZXIgJiZcbiAgICAgICAgICAgICAgICAgICgxICE9PSBzZWxlY3Rpb24ucmFuZ2VDb3VudCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZSAhPT0gc3RhcnRNYXJrZXIubm9kZSB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0ICE9PSBzdGFydE1hcmtlci5vZmZzZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmZvY3VzTm9kZSAhPT0gZW5kTWFya2VyLm5vZGUgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0ICE9PSBlbmRNYXJrZXIub2Zmc2V0KVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgc3RhcnQkanNjb21wJDAgPiBlbmQkanNjb21wJDBcbiAgICAgICAgICAgICAgICAgICAgPyAoc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKSxcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSlcbiAgICAgICAgICAgICAgICAgICAgOiAocmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZG9jID0gW107XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHNlbGVjdGlvbiA9IHByaW9yRm9jdXNlZEVsZW07XG4gICAgICAgICAgICAoc2VsZWN0aW9uID0gc2VsZWN0aW9uLnBhcmVudE5vZGUpO1xuXG4gICAgICAgICAgKVxuICAgICAgICAgICAgMSA9PT0gc2VsZWN0aW9uLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgIGRvYy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgbGVmdDogc2VsZWN0aW9uLnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiBzZWxlY3Rpb24uc2Nyb2xsVG9wXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByaW9yRm9jdXNlZEVsZW0uZm9jdXMgJiZcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0uZm9jdXMoKTtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSA9IDA7XG4gICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtIDwgZG9jLmxlbmd0aDtcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0rK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBkb2NbcHJpb3JGb2N1c2VkRWxlbV07XG4gICAgICAgICAgICBpbmZvLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IGluZm8ubGVmdDtcbiAgICAgICAgICAgIGluZm8uZWxlbWVudC5zY3JvbGxUb3AgPSBpbmZvLnRvcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX2VuYWJsZWQgPSAhIWV2ZW50c0VuYWJsZWQ7XG4gICAgICAgIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gZXZlbnRzRW5hYmxlZCA9IG51bGw7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0KSxcbiAgICAgICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcm9vdE11dGF0aW9uSGFzRWZmZWN0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm9vdC5jdXJyZW50ID0gZmluaXNoZWRXb3JrO1xuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMjtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hMYXlvdXRFZmZlY3RzKCkge1xuICBpZiAoMiA9PT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMpIHtcbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDA7XG4gICAgdmFyIHJvb3QgPSBwZW5kaW5nRWZmZWN0c1Jvb3QsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwZW5kaW5nRmluaXNoZWRXb3JrLFxuICAgICAgcm9vdEhhc0xheW91dEVmZmVjdCA9IDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiA4NzcyKTtcbiAgICBpZiAoMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiA4NzcyKSB8fCByb290SGFzTGF5b3V0RWZmZWN0KSB7XG4gICAgICByb290SGFzTGF5b3V0RWZmZWN0ID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgICAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgICAgZXhlY3V0aW9uQ29udGV4dCB8PSA0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgKGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dCksXG4gICAgICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHJvb3RIYXNMYXlvdXRFZmZlY3QpO1xuICAgICAgfVxuICAgIH1cbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDM7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoU3Bhd25lZFdvcmsoKSB7XG4gIGlmICg0ID09PSBwZW5kaW5nRWZmZWN0c1N0YXR1cyB8fCAzID09PSBwZW5kaW5nRWZmZWN0c1N0YXR1cykge1xuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMDtcbiAgICByZXF1ZXN0UGFpbnQoKTtcbiAgICB2YXIgcm9vdCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBlbmRpbmdGaW5pc2hlZFdvcmssXG4gICAgICBsYW5lcyA9IHBlbmRpbmdFZmZlY3RzTGFuZXMsXG4gICAgICByZWNvdmVyYWJsZUVycm9ycyA9IHBlbmRpbmdSZWNvdmVyYWJsZUVycm9ycztcbiAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KSB8fFxuICAgIDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMDI1NilcbiAgICAgID8gKHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gNSlcbiAgICAgIDogKChwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDApLFxuICAgICAgICAocGVuZGluZ0ZpbmlzaGVkV29yayA9IHBlbmRpbmdFZmZlY3RzUm9vdCA9IG51bGwpLFxuICAgICAgICByZWxlYXNlUm9vdFBvb2xlZENhY2hlKHJvb3QsIHJvb3QucGVuZGluZ0xhbmVzKSk7XG4gICAgdmFyIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gICAgMCA9PT0gcmVtYWluaW5nTGFuZXMgJiYgKGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCk7XG4gICAgbGFuZXNUb0V2ZW50UHJpb3JpdHkobGFuZXMpO1xuICAgIGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QpXG4gICAgICB0cnkge1xuICAgICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QoXG4gICAgICAgICAgcmVuZGVyZXJJRCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgIDEyOCA9PT0gKGZpbmlzaGVkV29yay5jdXJyZW50LmZsYWdzICYgMTI4KVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgIGlmIChudWxsICE9PSByZWNvdmVyYWJsZUVycm9ycykge1xuICAgICAgZmluaXNoZWRXb3JrID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIHJlbWFpbmluZ0xhbmVzID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgICAgIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyO1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBvblJlY292ZXJhYmxlRXJyb3IgPSByb290Lm9uUmVjb3ZlcmFibGVFcnJvciwgaSA9IDA7XG4gICAgICAgICAgaSA8IHJlY292ZXJhYmxlRXJyb3JzLmxlbmd0aDtcbiAgICAgICAgICBpKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIHJlY292ZXJhYmxlRXJyb3IgPSByZWNvdmVyYWJsZUVycm9yc1tpXTtcbiAgICAgICAgICBvblJlY292ZXJhYmxlRXJyb3IocmVjb3ZlcmFibGVFcnJvci52YWx1ZSwge1xuICAgICAgICAgICAgY29tcG9uZW50U3RhY2s6IHJlY292ZXJhYmxlRXJyb3Iuc3RhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBmaW5pc2hlZFdvcmspLFxuICAgICAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcmVtYWluaW5nTGFuZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAwICE9PSAocGVuZGluZ0VmZmVjdHNMYW5lcyAmIDMpICYmIGZsdXNoUGVuZGluZ0VmZmVjdHMoKTtcbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gICAgcmVtYWluaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgICAwICE9PSAobGFuZXMgJiA0MTk0MDkwKSAmJiAwICE9PSAocmVtYWluaW5nTGFuZXMgJiA0MilcbiAgICAgID8gcm9vdCA9PT0gcm9vdFdpdGhOZXN0ZWRVcGRhdGVzXG4gICAgICAgID8gbmVzdGVkVXBkYXRlQ291bnQrK1xuICAgICAgICA6ICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSwgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IHJvb3QpKVxuICAgICAgOiAobmVzdGVkVXBkYXRlQ291bnQgPSAwKTtcbiAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcmVtYWluaW5nTGFuZXMpIHtcbiAgMCA9PT0gKHJvb3QucG9vbGVkQ2FjaGVMYW5lcyAmPSByZW1haW5pbmdMYW5lcykgJiZcbiAgICAoKHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wb29sZWRDYWNoZSksXG4gICAgbnVsbCAhPSByZW1haW5pbmdMYW5lcyAmJlxuICAgICAgKChyb290LnBvb2xlZENhY2hlID0gbnVsbCksIHJlbGVhc2VDYWNoZShyZW1haW5pbmdMYW5lcykpKTtcbn1cbmZ1bmN0aW9uIGZsdXNoUGVuZGluZ0VmZmVjdHMod2FzRGVsYXllZENvbW1pdCkge1xuICBmbHVzaE11dGF0aW9uRWZmZWN0cygpO1xuICBmbHVzaExheW91dEVmZmVjdHMoKTtcbiAgZmx1c2hTcGF3bmVkV29yaygpO1xuICByZXR1cm4gZmx1c2hQYXNzaXZlRWZmZWN0cyh3YXNEZWxheWVkQ29tbWl0KTtcbn1cbmZ1bmN0aW9uIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKSB7XG4gIGlmICg1ICE9PSBwZW5kaW5nRWZmZWN0c1N0YXR1cykgcmV0dXJuICExO1xuICB2YXIgcm9vdCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICByZW1haW5pbmdMYW5lcyA9IHBlbmRpbmdFZmZlY3RzUmVtYWluaW5nTGFuZXM7XG4gIHBlbmRpbmdFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwO1xuICB2YXIgcmVuZGVyUHJpb3JpdHkgPSBsYW5lc1RvRXZlbnRQcmlvcml0eShwZW5kaW5nRWZmZWN0c0xhbmVzKSxcbiAgICBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDMyID4gcmVuZGVyUHJpb3JpdHkgPyAzMiA6IHJlbmRlclByaW9yaXR5O1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgIHJlbmRlclByaW9yaXR5ID0gcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucztcbiAgICBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gbnVsbDtcbiAgICB2YXIgcm9vdCRqc2NvbXAkMCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICAgIGxhbmVzID0gcGVuZGluZ0VmZmVjdHNMYW5lcztcbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDA7XG4gICAgcGVuZGluZ0ZpbmlzaGVkV29yayA9IHBlbmRpbmdFZmZlY3RzUm9vdCA9IG51bGw7XG4gICAgcGVuZGluZ0VmZmVjdHNMYW5lcyA9IDA7XG4gICAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzMxKSk7XG4gICAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHJvb3QkanNjb21wJDAuY3VycmVudCk7XG4gICAgY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgICAgIHJvb3QkanNjb21wJDAsXG4gICAgICByb290JGpzY29tcCQwLmN1cnJlbnQsXG4gICAgICBsYW5lcyxcbiAgICAgIHJlbmRlclByaW9yaXR5XG4gICAgKTtcbiAgICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoMCwgITEpO1xuICAgIGlmIChcbiAgICAgIGluamVjdGVkSG9vayAmJlxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdFxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIGluamVjdGVkSG9vay5vblBvc3RDb21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCRqc2NvbXAkMCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgcmV0dXJuICEwO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcmVtYWluaW5nTGFuZXMpO1xuICB9XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChyb290RmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcikge1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3RGaWJlci5zdGF0ZU5vZGUsIHNvdXJjZUZpYmVyLCAyKTtcbiAgcm9vdEZpYmVyID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIHNvdXJjZUZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdEZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKHJvb3RGaWJlciwgMiksIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290RmliZXIpKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHNvdXJjZUZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcikge1xuICBpZiAoMyA9PT0gc291cmNlRmliZXIudGFnKVxuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KHNvdXJjZUZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpO1xuICBlbHNlXG4gICAgZm9yICg7IG51bGwgIT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3I7ICkge1xuICAgICAgaWYgKDMgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KFxuICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PVxuICAgICAgICAgICAgdHlwZW9mIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHNvdXJjZUZpYmVyID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICBlcnJvciA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUoMik7XG4gICAgICAgICAgaW5zdGFuY2UgPSBlbnF1ZXVlVXBkYXRlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yLCAyKTtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZSAmJlxuICAgICAgICAgICAgKGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbWFya1Jvb3RVcGRhdGVkJDEoaW5zdGFuY2UsIDIpLFxuICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluc3RhbmNlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnJldHVybjtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgd2FrZWFibGUsIGxhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgaWYgKG51bGwgPT09IHBpbmdDYWNoZSkge1xuICAgIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpO1xuICAgIHZhciB0aHJlYWRJRHMgPSBuZXcgU2V0KCk7XG4gICAgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKTtcbiAgfSBlbHNlXG4gICAgKHRocmVhZElEcyA9IHBpbmdDYWNoZS5nZXQod2FrZWFibGUpKSxcbiAgICAgIHZvaWQgMCA9PT0gdGhyZWFkSURzICYmXG4gICAgICAgICgodGhyZWFkSURzID0gbmV3IFNldCgpKSwgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKSk7XG4gIHRocmVhZElEcy5oYXMobGFuZXMpIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMCksXG4gICAgdGhyZWFkSURzLmFkZChsYW5lcyksXG4gICAgKHJvb3QgPSBwaW5nU3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIHdha2VhYmxlLCBsYW5lcykpLFxuICAgIHdha2VhYmxlLnRoZW4ocm9vdCwgcm9vdCkpO1xufVxuZnVuY3Rpb24gcGluZ1N1c3BlbmRlZFJvb3Qocm9vdCwgd2FrZWFibGUsIHBpbmdlZExhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgbnVsbCAhPT0gcGluZ0NhY2hlICYmIHBpbmdDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICByb290LnBpbmdlZExhbmVzIHw9IHJvb3Quc3VzcGVuZGVkTGFuZXMgJiBwaW5nZWRMYW5lcztcbiAgcm9vdC53YXJtTGFuZXMgJj0gfnBpbmdlZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiBwaW5nZWRMYW5lcykgPT09IHBpbmdlZExhbmVzICYmXG4gICAgKDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAoMyA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApID09PVxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgMzAwID4gbm93KCkgLSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lKVxuICAgICAgPyAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyB8PSBwaW5nZWRMYW5lcyksXG4gICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDApKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSkge1xuICAwID09PSByZXRyeUxhbmUgJiYgKHJldHJ5TGFuZSA9IGNsYWltTmV4dFJldHJ5TGFuZSgpKTtcbiAgYm91bmRhcnlGaWJlciA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xuICBudWxsICE9PSBib3VuZGFyeUZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSksXG4gICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGJvdW5kYXJ5RmliZXIpKTtcbn1cbmZ1bmN0aW9uIHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoYm91bmRhcnlGaWJlcikge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICByZXRyeUxhbmUgPSAwO1xuICBudWxsICE9PSBzdXNwZW5zZVN0YXRlICYmIChyZXRyeUxhbmUgPSBzdXNwZW5zZVN0YXRlLnJldHJ5TGFuZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVJldHJ5V2FrZWFibGUoYm91bmRhcnlGaWJlciwgd2FrZWFibGUpIHtcbiAgdmFyIHJldHJ5TGFuZSA9IDA7XG4gIHN3aXRjaCAoYm91bmRhcnlGaWJlci50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gYm91bmRhcnlGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGUuX3JldHJ5Q2FjaGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTQpKTtcbiAgfVxuICBudWxsICE9PSByZXRyeUNhY2hlICYmIHJldHJ5Q2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrJDEocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2skMyhwcmlvcml0eUxldmVsLCBjYWxsYmFjayk7XG59XG52YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgbGFzdFNjaGVkdWxlZFJvb3QgPSBudWxsLFxuICBkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICExLFxuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMSxcbiAgaXNGbHVzaGluZ1dvcmsgPSAhMSxcbiAgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwO1xuZnVuY3Rpb24gZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpIHtcbiAgcm9vdCAhPT0gbGFzdFNjaGVkdWxlZFJvb3QgJiZcbiAgICBudWxsID09PSByb290Lm5leHQgJiZcbiAgICAobnVsbCA9PT0gbGFzdFNjaGVkdWxlZFJvb3RcbiAgICAgID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdClcbiAgICAgIDogKGxhc3RTY2hlZHVsZWRSb290ID0gbGFzdFNjaGVkdWxlZFJvb3QubmV4dCA9IHJvb3QpKTtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gIGRpZFNjaGVkdWxlTWljcm90YXNrIHx8XG4gICAgKChkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICEwKSwgc2NoZWR1bGVJbW1lZGlhdGVSb290U2NoZWR1bGVUYXNrKCkpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgb25seUxlZ2FjeSkge1xuICBpZiAoIWlzRmx1c2hpbmdXb3JrICYmIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yaykge1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITA7XG4gICAgZG8ge1xuICAgICAgdmFyIGRpZFBlcmZvcm1Tb21lV29yayA9ICExO1xuICAgICAgZm9yICh2YXIgcm9vdCQxNzQgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7IG51bGwgIT09IHJvb3QkMTc0OyApIHtcbiAgICAgICAgaWYgKCFvbmx5TGVnYWN5KVxuICAgICAgICAgIGlmICgwICE9PSBzeW5jVHJhbnNpdGlvbkxhbmVzKSB7XG4gICAgICAgICAgICB2YXIgcGVuZGluZ0xhbmVzID0gcm9vdCQxNzQucGVuZGluZ0xhbmVzO1xuICAgICAgICAgICAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IDA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdCQxNzQuc3VzcGVuZGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgcGluZ2VkTGFuZXMgPSByb290JDE3NC5waW5nZWRMYW5lcztcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICAoMSA8PCAoMzEgLSBjbHozMig0MiB8IHN5bmNUcmFuc2l0aW9uTGFuZXMpICsgMSkpIC0gMTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICY9XG4gICAgICAgICAgICAgICAgcGVuZGluZ0xhbmVzICYgfihzdXNwZW5kZWRMYW5lcyAmIH5waW5nZWRMYW5lcyk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYgMjAxMzI2NzQxXG4gICAgICAgICAgICAgICAgICA/IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY3NDEpIHwgMVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgfCAyXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgcGVyZm9ybVN5bmNXb3JrT25Sb290KHJvb3QkMTc0LCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnZXROZXh0TGFuZXMoXG4gICAgICAgICAgICAgICAgcm9vdCQxNzQsXG4gICAgICAgICAgICAgICAgcm9vdCQxNzQgPT09IHdvcmtJblByb2dyZXNzUm9vdCA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA6IDAsXG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCQxNzQuY2FuY2VsUGVuZGluZ0NvbW1pdCB8fFxuICAgICAgICAgICAgICAgICAgLTEgIT09IHJvb3QkMTc0LnRpbWVvdXRIYW5kbGVcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIDAgPT09IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAzKSB8fFxuICAgICAgICAgICAgICAgIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCQxNzQsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgfHxcbiAgICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzQsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICByb290JDE3NCA9IHJvb3QkMTc0Lm5leHQ7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoZGlkUGVyZm9ybVNvbWVXb3JrKTtcbiAgICBpc0ZsdXNoaW5nV29yayA9ICExO1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzUm9vdFNjaGVkdWxlSW5JbW1lZGlhdGVUYXNrKCkge1xuICBwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2soKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaygpIHtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMTtcbiAgdmFyIHN5bmNUcmFuc2l0aW9uTGFuZXMgPSAwO1xuICAwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkgJiZcbiAgICAgIChzeW5jVHJhbnNpdGlvbkxhbmVzID0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpLFxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IDApKTtcbiAgZm9yIChcbiAgICB2YXIgY3VycmVudFRpbWUgPSBub3coKSwgcHJldiA9IG51bGwsIHJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgbnVsbCAhPT0gcm9vdDtcblxuICApIHtcbiAgICB2YXIgbmV4dCA9IHJvb3QubmV4dCxcbiAgICAgIG5leHRMYW5lcyA9IHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpO1xuICAgIGlmICgwID09PSBuZXh0TGFuZXMpXG4gICAgICAocm9vdC5uZXh0ID0gbnVsbCksXG4gICAgICAgIG51bGwgPT09IHByZXYgPyAoZmlyc3RTY2hlZHVsZWRSb290ID0gbmV4dCkgOiAocHJldi5uZXh0ID0gbmV4dCksXG4gICAgICAgIG51bGwgPT09IG5leHQgJiYgKGxhc3RTY2hlZHVsZWRSb290ID0gcHJldik7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHByZXYgPSByb290KSwgMCAhPT0gc3luY1RyYW5zaXRpb25MYW5lcyB8fCAwICE9PSAobmV4dExhbmVzICYgMykpXG4gICAgKVxuICAgICAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gICAgcm9vdCA9IG5leHQ7XG4gIH1cbiAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgITEpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBjdXJyZW50VGltZSkge1xuICBmb3IgKFxuICAgIHZhciBzdXNwZW5kZWRMYW5lcyA9IHJvb3Quc3VzcGVuZGVkTGFuZXMsXG4gICAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgICBleHBpcmF0aW9uVGltZXMgPSByb290LmV4cGlyYXRpb25UaW1lcyxcbiAgICAgIGxhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXMgJiAtNjI5MTQ1NjE7XG4gICAgMCA8IGxhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQzID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQzLFxuICAgICAgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZXNbaW5kZXgkM107XG4gICAgaWYgKC0xID09PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaWYgKDAgPT09IChsYW5lICYgc3VzcGVuZGVkTGFuZXMpIHx8IDAgIT09IChsYW5lICYgcGluZ2VkTGFuZXMpKVxuICAgICAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkM10gPSBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpO1xuICAgIH0gZWxzZSBleHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZSAmJiAocm9vdC5leHBpcmVkTGFuZXMgfD0gbGFuZSk7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgY3VycmVudFRpbWUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gIHN1c3BlbmRlZExhbmVzID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gY3VycmVudFRpbWUgPyBzdXNwZW5kZWRMYW5lcyA6IDAsXG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0IHx8IC0xICE9PSByb290LnRpbWVvdXRIYW5kbGVcbiAgKTtcbiAgcGluZ2VkTGFuZXMgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKFxuICAgIDAgPT09IHN1c3BlbmRlZExhbmVzIHx8XG4gICAgKHJvb3QgPT09IGN1cnJlbnRUaW1lICYmXG4gICAgICAoMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgOSA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbCksXG4gICAgICAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMClcbiAgICApO1xuICBpZiAoXG4gICAgMCA9PT0gKHN1c3BlbmRlZExhbmVzICYgMykgfHxcbiAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QsIHN1c3BlbmRlZExhbmVzKVxuICApIHtcbiAgICBjdXJyZW50VGltZSA9IHN1c3BlbmRlZExhbmVzICYgLXN1c3BlbmRlZExhbmVzO1xuICAgIGlmIChjdXJyZW50VGltZSA9PT0gcm9vdC5jYWxsYmFja1ByaW9yaXR5KSByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyk7XG4gICAgc3dpdGNoIChsYW5lc1RvRXZlbnRQcmlvcml0eShzdXNwZW5kZWRMYW5lcykpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgODpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBVc2VyQmxvY2tpbmdQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMyOlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gSWRsZVByaW9yaXR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gTm9ybWFsUHJpb3JpdHkkMTtcbiAgICB9XG4gICAgcGluZ2VkTGFuZXMgPSBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KTtcbiAgICBzdXNwZW5kZWRMYW5lcyA9IHNjaGVkdWxlQ2FsbGJhY2skMyhzdXNwZW5kZWRMYW5lcywgcGluZ2VkTGFuZXMpO1xuICAgIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IGN1cnJlbnRUaW1lO1xuICAgIHJvb3QuY2FsbGJhY2tOb2RlID0gc3VzcGVuZGVkTGFuZXM7XG4gICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICB9XG4gIG51bGwgIT09IHBpbmdlZExhbmVzICYmIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAyO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJldHVybiAyO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrKHJvb3QsIGRpZFRpbWVvdXQpIHtcbiAgaWYgKDAgIT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzICYmIDUgIT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzKVxuICAgIHJldHVybiAocm9vdC5jYWxsYmFja05vZGUgPSBudWxsKSwgKHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDApLCBudWxsO1xuICB2YXIgb3JpZ2luYWxDYWxsYmFja05vZGUgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKGZsdXNoUGVuZGluZ0VmZmVjdHMoITApICYmIHJvb3QuY2FsbGJhY2tOb2RlICE9PSBvcmlnaW5hbENhbGxiYWNrTm9kZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgdmFyIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgOiAwLFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCB8fCAtMSAhPT0gcm9vdC50aW1lb3V0SGFuZGxlXG4gICk7XG4gIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwLCBkaWRUaW1lb3V0KTtcbiAgc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBub3coKSk7XG4gIHJldHVybiBudWxsICE9IHJvb3QuY2FsbGJhY2tOb2RlICYmIHJvb3QuY2FsbGJhY2tOb2RlID09PSBvcmlnaW5hbENhbGxiYWNrTm9kZVxuICAgID8gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrLmJpbmQobnVsbCwgcm9vdClcbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCwgbGFuZXMpIHtcbiAgaWYgKGZsdXNoUGVuZGluZ0VmZmVjdHMoKSkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIGxhbmVzLCAhMCk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUltbWVkaWF0ZVJvb3RTY2hlZHVsZVRhc2soKSB7XG4gIHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpXG4gICAgICA/IHNjaGVkdWxlQ2FsbGJhY2skMyhcbiAgICAgICAgICBJbW1lZGlhdGVQcmlvcml0eSxcbiAgICAgICAgICBwcm9jZXNzUm9vdFNjaGVkdWxlSW5JbW1lZGlhdGVUYXNrXG4gICAgICAgIClcbiAgICAgIDogcHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVxdWVzdFRyYW5zaXRpb25MYW5lKCkge1xuICAwID09PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkpO1xuICByZXR1cm4gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmU7XG59XG5mdW5jdGlvbiBjb2VyY2VGb3JtQWN0aW9uUHJvcChhY3Rpb25Qcm9wKSB7XG4gIHJldHVybiBudWxsID09IGFjdGlvblByb3AgfHxcbiAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgYWN0aW9uUHJvcCB8fFxuICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYWN0aW9uUHJvcFxuICAgID8gbnVsbFxuICAgIDogXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uUHJvcFxuICAgICAgPyBhY3Rpb25Qcm9wXG4gICAgICA6IHNhbml0aXplVVJMKFwiXCIgKyBhY3Rpb25Qcm9wKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihmb3JtLCBzdWJtaXR0ZXIpIHtcbiAgdmFyIHRlbXAgPSBzdWJtaXR0ZXIub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIHRlbXAubmFtZSA9IHN1Ym1pdHRlci5uYW1lO1xuICB0ZW1wLnZhbHVlID0gc3VibWl0dGVyLnZhbHVlO1xuICBmb3JtLmlkICYmIHRlbXAuc2V0QXR0cmlidXRlKFwiZm9ybVwiLCBmb3JtLmlkKTtcbiAgc3VibWl0dGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRlbXAsIHN1Ym1pdHRlcik7XG4gIGZvcm0gPSBuZXcgRm9ybURhdGEoZm9ybSk7XG4gIHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wKTtcbiAgcmV0dXJuIGZvcm07XG59XG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzJDEoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGRvbUV2ZW50TmFtZSxcbiAgbWF5YmVUYXJnZXRJbnN0LFxuICBuYXRpdmVFdmVudCxcbiAgbmF0aXZlRXZlbnRUYXJnZXRcbikge1xuICBpZiAoXG4gICAgXCJzdWJtaXRcIiA9PT0gZG9tRXZlbnROYW1lICYmXG4gICAgbWF5YmVUYXJnZXRJbnN0ICYmXG4gICAgbWF5YmVUYXJnZXRJbnN0LnN0YXRlTm9kZSA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgKSB7XG4gICAgdmFyIGFjdGlvbiA9IGNvZXJjZUZvcm1BY3Rpb25Qcm9wKFxuICAgICAgICAobmF0aXZlRXZlbnRUYXJnZXRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCkuYWN0aW9uXG4gICAgICApLFxuICAgICAgc3VibWl0dGVyID0gbmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIHN1Ym1pdHRlciAmJlxuICAgICAgKChkb21FdmVudE5hbWUgPSAoZG9tRXZlbnROYW1lID0gc3VibWl0dGVyW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpXG4gICAgICAgID8gY29lcmNlRm9ybUFjdGlvblByb3AoZG9tRXZlbnROYW1lLmZvcm1BY3Rpb24pXG4gICAgICAgIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1BY3Rpb25cIikpLFxuICAgICAgbnVsbCAhPT0gZG9tRXZlbnROYW1lICYmICgoYWN0aW9uID0gZG9tRXZlbnROYW1lKSwgKHN1Ym1pdHRlciA9IG51bGwpKSk7XG4gICAgdmFyIGV2ZW50ID0gbmV3IFN5bnRoZXRpY0V2ZW50KFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIFwiYWN0aW9uXCIsXG4gICAgICBudWxsLFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICk7XG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHtcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgbGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgIGlmICgwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSkge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IHN1Ym1pdHRlclxuICAgICAgICAgICAgICAgICAgPyBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIobmF0aXZlRXZlbnRUYXJnZXQsIHN1Ym1pdHRlcilcbiAgICAgICAgICAgICAgICAgIDogbmV3IEZvcm1EYXRhKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgbWF5YmVUYXJnZXRJbnN0LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbmF0aXZlRXZlbnRUYXJnZXQubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAoZXZlbnQucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgICAgICAoZm9ybURhdGEgPSBzdWJtaXR0ZXJcbiAgICAgICAgICAgICAgICAgID8gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKG5hdGl2ZUV2ZW50VGFyZ2V0LCBzdWJtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICA6IG5ldyBGb3JtRGF0YShuYXRpdmVFdmVudFRhcmdldCkpLFxuICAgICAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgICAgICBtYXliZVRhcmdldEluc3QsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBuYXRpdmVFdmVudFRhcmdldC5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KTtcbiAgfVxufVxuZm9yIChcbiAgdmFyIGkkanNjb21wJGlubGluZV8xNTI4ID0gMDtcbiAgaSRqc2NvbXAkaW5saW5lXzE1MjggPCBzaW1wbGVFdmVudFBsdWdpbkV2ZW50cy5sZW5ndGg7XG4gIGkkanNjb21wJGlubGluZV8xNTI4Kytcbikge1xuICB2YXIgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUyOSA9XG4gICAgICBzaW1wbGVFdmVudFBsdWdpbkV2ZW50c1tpJGpzY29tcCRpbmxpbmVfMTUyOF0sXG4gICAgZG9tRXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUzMCA9XG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNTI5LnRvTG93ZXJDYXNlKCksXG4gICAgY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE1MzEgPVxuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUyOVswXS50b1VwcGVyQ2FzZSgpICtcbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE1Mjkuc2xpY2UoMSk7XG4gIHJlZ2lzdGVyU2ltcGxlRXZlbnQoXG4gICAgZG9tRXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUzMCxcbiAgICBcIm9uXCIgKyBjYXBpdGFsaXplZEV2ZW50JGpzY29tcCRpbmxpbmVfMTUzMVxuICApO1xufVxucmVnaXN0ZXJTaW1wbGVFdmVudChBTklNQVRJT05fRU5ELCBcIm9uQW5pbWF0aW9uRW5kXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChBTklNQVRJT05fSVRFUkFUSU9OLCBcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChBTklNQVRJT05fU1RBUlQsIFwib25BbmltYXRpb25TdGFydFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJkYmxjbGlja1wiLCBcIm9uRG91YmxlQ2xpY2tcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZm9jdXNpblwiLCBcIm9uRm9jdXNcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZm9jdXNvdXRcIiwgXCJvbkJsdXJcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fUlVOLCBcIm9uVHJhbnNpdGlvblJ1blwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9TVEFSVCwgXCJvblRyYW5zaXRpb25TdGFydFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9DQU5DRUwsIFwib25UcmFuc2l0aW9uQ2FuY2VsXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX0VORCwgXCJvblRyYW5zaXRpb25FbmRcIik7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Nb3VzZUVudGVyXCIsIFtcIm1vdXNlb3V0XCIsIFwibW91c2VvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvbk1vdXNlTGVhdmVcIiwgW1wibW91c2VvdXRcIiwgXCJtb3VzZW92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uUG9pbnRlckVudGVyXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Qb2ludGVyTGVhdmVcIiwgW1wicG9pbnRlcm91dFwiLCBcInBvaW50ZXJvdmVyXCJdKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNoYW5nZVwiLFxuICBcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uU2VsZWN0XCIsXG4gIFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXG4gICAgXCIgXCJcbiAgKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcIm9uQmVmb3JlSW5wdXRcIiwgW1xuICBcImNvbXBvc2l0aW9uZW5kXCIsXG4gIFwia2V5cHJlc3NcIixcbiAgXCJ0ZXh0SW5wdXRcIixcbiAgXCJwYXN0ZVwiXG5dKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uRW5kXCIsXG4gIFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvblN0YXJ0XCIsXG4gIFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXG4gIFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG52YXIgbWVkaWFFdmVudFR5cGVzID1cbiAgICBcImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICksXG4gIG5vbkRlbGVnYXRlZEV2ZW50cyA9IG5ldyBTZXQoXG4gICAgXCJiZWZvcmV0b2dnbGUgY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgc2Nyb2xsZW5kIHRvZ2dsZVwiXG4gICAgICAuc3BsaXQoXCIgXCIpXG4gICAgICAuY29uY2F0KG1lZGlhRXZlbnRUeXBlcylcbiAgKTtcbmZ1bmN0aW9uIHByb2Nlc3NEaXNwYXRjaFF1ZXVlKGRpc3BhdGNoUXVldWUsIGV2ZW50U3lzdGVtRmxhZ3MpIHtcbiAgZXZlbnRTeXN0ZW1GbGFncyA9IDAgIT09IChldmVudFN5c3RlbUZsYWdzICYgNCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfZGlzcGF0Y2hRdWV1ZSRpID0gZGlzcGF0Y2hRdWV1ZVtpXSxcbiAgICAgIGV2ZW50ID0gX2Rpc3BhdGNoUXVldWUkaS5ldmVudDtcbiAgICBfZGlzcGF0Y2hRdWV1ZSRpID0gX2Rpc3BhdGNoUXVldWUkaS5saXN0ZW5lcnM7XG4gICAgYToge1xuICAgICAgdmFyIHByZXZpb3VzSW5zdGFuY2UgPSB2b2lkIDA7XG4gICAgICBpZiAoZXZlbnRTeXN0ZW1GbGFncylcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaSRqc2NvbXAkMCA9IF9kaXNwYXRjaFF1ZXVlJGkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAwIDw9IGkkanNjb21wJDA7XG4gICAgICAgICAgaSRqc2NvbXAkMC0tXG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaFF1ZXVlJGlbaSRqc2NvbXAkMF0sXG4gICAgICAgICAgICBpbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmluc3RhbmNlLFxuICAgICAgICAgICAgY3VycmVudFRhcmdldCA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5saXN0ZW5lcjtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UgIT09IHByZXZpb3VzSW5zdGFuY2UgJiYgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpO1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmV2aW91c0luc3RhbmNlKGV2ZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBpJGpzY29tcCQwID0gMDtcbiAgICAgICAgICBpJGpzY29tcCQwIDwgX2Rpc3BhdGNoUXVldWUkaS5sZW5ndGg7XG4gICAgICAgICAgaSRqc2NvbXAkMCsrXG4gICAgICAgICkge1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoUXVldWUkaVtpJGpzY29tcCQwXTtcbiAgICAgICAgICBpbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmluc3RhbmNlO1xuICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkubGlzdGVuZXI7XG4gICAgICAgICAgaWYgKGluc3RhbmNlICE9PSBwcmV2aW91c0luc3RhbmNlICYmIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJldmlvdXNJbnN0YW5jZShldmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KGRvbUV2ZW50TmFtZSwgdGFyZ2V0RWxlbWVudCkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdGFyZ2V0RWxlbWVudFtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICB2b2lkIDAgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0YXJnZXRFbGVtZW50W2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV0gPVxuICAgICAgbmV3IFNldCgpKTtcbiAgdmFyIGxpc3RlbmVyU2V0S2V5ID0gZG9tRXZlbnROYW1lICsgXCJfX2J1YmJsZVwiO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuaGFzKGxpc3RlbmVyU2V0S2V5KSB8fFxuICAgIChhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcih0YXJnZXRFbGVtZW50LCBkb21FdmVudE5hbWUsIDIsICExKSxcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuYWRkKGxpc3RlbmVyU2V0S2V5KSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciwgdGFyZ2V0KSB7XG4gIHZhciBldmVudFN5c3RlbUZsYWdzID0gMDtcbiAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciAmJiAoZXZlbnRTeXN0ZW1GbGFncyB8PSA0KTtcbiAgYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIoXG4gICAgdGFyZ2V0LFxuICAgIGRvbUV2ZW50TmFtZSxcbiAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbiAgKTtcbn1cbnZhciBsaXN0ZW5pbmdNYXJrZXIgPSBcIl9yZWFjdExpc3RlbmluZ1wiICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5mdW5jdGlvbiBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhyb290Q29udGFpbmVyRWxlbWVudCkge1xuICBpZiAoIXJvb3RDb250YWluZXJFbGVtZW50W2xpc3RlbmluZ01hcmtlcl0pIHtcbiAgICByb290Q29udGFpbmVyRWxlbWVudFtsaXN0ZW5pbmdNYXJrZXJdID0gITA7XG4gICAgYWxsTmF0aXZlRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUV2ZW50TmFtZSkge1xuICAgICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICAgIChub25EZWxlZ2F0ZWRFdmVudHMuaGFzKGRvbUV2ZW50TmFtZSkgfHxcbiAgICAgICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgITEsIHJvb3RDb250YWluZXJFbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsICEwLCByb290Q29udGFpbmVyRWxlbWVudCkpO1xuICAgIH0pO1xuICAgIHZhciBvd25lckRvY3VtZW50ID1cbiAgICAgIDkgPT09IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlXG4gICAgICAgID8gcm9vdENvbnRhaW5lckVsZW1lbnRcbiAgICAgICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQgfHxcbiAgICAgIG93bmVyRG9jdW1lbnRbbGlzdGVuaW5nTWFya2VyXSB8fFxuICAgICAgKChvd25lckRvY3VtZW50W2xpc3RlbmluZ01hcmtlcl0gPSAhMCksXG4gICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KFwic2VsZWN0aW9uY2hhbmdlXCIsICExLCBvd25lckRvY3VtZW50KSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKFxuICB0YXJnZXRDb250YWluZXIsXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuKSB7XG4gIHN3aXRjaCAoZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpKSB7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoRGlzY3JldGVFdmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoQ29udGludW91c0V2ZW50O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoRXZlbnQ7XG4gIH1cbiAgZXZlbnRTeXN0ZW1GbGFncyA9IGxpc3RlbmVyV3JhcHBlci5iaW5kKFxuICAgIG51bGwsXG4gICAgZG9tRXZlbnROYW1lLFxuICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgdGFyZ2V0Q29udGFpbmVyXG4gICk7XG4gIGxpc3RlbmVyV3JhcHBlciA9IHZvaWQgMDtcbiAgIXBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIHx8XG4gICAgKFwidG91Y2hzdGFydFwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgIFwidG91Y2htb3ZlXCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgXCJ3aGVlbFwiICE9PSBkb21FdmVudE5hbWUpIHx8XG4gICAgKGxpc3RlbmVyV3JhcHBlciA9ICEwKTtcbiAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuICAgID8gdm9pZCAwICE9PSBsaXN0ZW5lcldyYXBwZXJcbiAgICAgID8gdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB7XG4gICAgICAgICAgY2FwdHVyZTogITAsXG4gICAgICAgICAgcGFzc2l2ZTogbGlzdGVuZXJXcmFwcGVyXG4gICAgICAgIH0pXG4gICAgICA6IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgITApXG4gICAgOiB2b2lkIDAgIT09IGxpc3RlbmVyV3JhcHBlclxuICAgICAgPyB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHtcbiAgICAgICAgICBwYXNzaXZlOiBsaXN0ZW5lcldyYXBwZXJcbiAgICAgICAgfSlcbiAgICAgIDogdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCAhMSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgbmF0aXZlRXZlbnQsXG4gIHRhcmdldEluc3QkanNjb21wJDAsXG4gIHRhcmdldENvbnRhaW5lclxuKSB7XG4gIHZhciBhbmNlc3Rvckluc3QgPSB0YXJnZXRJbnN0JGpzY29tcCQwO1xuICBpZiAoXG4gICAgMCA9PT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiAxKSAmJlxuICAgIDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgMikgJiZcbiAgICBudWxsICE9PSB0YXJnZXRJbnN0JGpzY29tcCQwXG4gIClcbiAgICBhOiBmb3IgKDs7KSB7XG4gICAgICBpZiAobnVsbCA9PT0gdGFyZ2V0SW5zdCRqc2NvbXAkMCkgcmV0dXJuO1xuICAgICAgdmFyIG5vZGVUYWcgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnRhZztcbiAgICAgIGlmICgzID09PSBub2RlVGFnIHx8IDQgPT09IG5vZGVUYWcpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRhcmdldEluc3QkanNjb21wJDAuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgIGlmIChjb250YWluZXIgPT09IHRhcmdldENvbnRhaW5lcikgYnJlYWs7XG4gICAgICAgIGlmICg0ID09PSBub2RlVGFnKVxuICAgICAgICAgIGZvciAobm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuOyBudWxsICE9PSBub2RlVGFnOyApIHtcbiAgICAgICAgICAgIHZhciBncmFuZFRhZyA9IG5vZGVUYWcudGFnO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoMyA9PT0gZ3JhbmRUYWcgfHwgNCA9PT0gZ3JhbmRUYWcpICYmXG4gICAgICAgICAgICAgIG5vZGVUYWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09IHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBub2RlVGFnID0gbm9kZVRhZy5yZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbnVsbCAhPT0gY29udGFpbmVyOyApIHtcbiAgICAgICAgICBub2RlVGFnID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZVRhZykgcmV0dXJuO1xuICAgICAgICAgIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgNSA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNiA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDI3ID09PSBncmFuZFRhZ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IGFuY2VzdG9ySW5zdCA9IG5vZGVUYWc7XG4gICAgICAgICAgICBjb250aW51ZSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuO1xuICAgIH1cbiAgYmF0Y2hlZFVwZGF0ZXMkMShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBhbmNlc3Rvckluc3QsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSxcbiAgICAgIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBhOiB7XG4gICAgICB2YXIgcmVhY3ROYW1lID0gdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuZ2V0KGRvbUV2ZW50TmFtZSk7XG4gICAgICBpZiAodm9pZCAwICE9PSByZWFjdE5hbWUpIHtcbiAgICAgICAgdmFyIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0V2ZW50LFxuICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gZG9tRXZlbnROYW1lO1xuICAgICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgaWYgKDAgPT09IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBcImJsdXJcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgICAgICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICAgICAgICAgIGlmICgyID09PSBuYXRpdmVFdmVudC5idXR0b24pIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZHJhZ1wiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX0VORDpcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9JVEVSQVRJT046XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fU1RBUlQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgY2FzZSBcInNjcm9sbGVuZFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgICAgICAgY2FzZSBcImN1dFwiOlxuICAgICAgICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICAgICAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb2dnbGVFdmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5DYXB0dXJlUGhhc2UgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpLFxuICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICFpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgKFwic2Nyb2xsXCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInNjcm9sbGVuZFwiID09PSBkb21FdmVudE5hbWUpLFxuICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgICAgID8gbnVsbCAhPT0gcmVhY3ROYW1lXG4gICAgICAgICAgICAgID8gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCJcbiAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICA6IHJlYWN0TmFtZTtcbiAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBbXTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0YXJnZXRJbnN0LCBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBfaW5zdGFuY2Uuc3RhdGVOb2RlO1xuICAgICAgICAgIF9pbnN0YW5jZSA9IF9pbnN0YW5jZS50YWc7XG4gICAgICAgICAgKDUgIT09IF9pbnN0YW5jZSAmJiAyNiAhPT0gX2luc3RhbmNlICYmIDI3ICE9PSBfaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICBudWxsID09PSBsYXN0SG9zdENvbXBvbmVudCB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICgoX2luc3RhbmNlID0gZ2V0TGlzdGVuZXIoaW5zdGFuY2UsIHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICBudWxsICE9IF9pbnN0YW5jZSAmJlxuICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZS5wdXNoKFxuICAgICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIF9pbnN0YW5jZSwgbGFzdEhvc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgIGlmIChhY2N1bXVsYXRlVGFyZ2V0T25seSkgYnJlYWs7XG4gICAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgMCA8IGluQ2FwdHVyZVBoYXNlLmxlbmd0aCAmJlxuICAgICAgICAgICgocmVhY3ROYW1lID0gbmV3IFN5bnRoZXRpY0V2ZW50Q3RvcihcbiAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogcmVhY3ROYW1lLCBsaXN0ZW5lcnM6IGluQ2FwdHVyZVBoYXNlIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgNykpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICBcIm1vdXNlb3ZlclwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3ZlclwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9XG4gICAgICAgICAgXCJtb3VzZW91dFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlYWN0TmFtZSAmJlxuICAgICAgICAgIG5hdGl2ZUV2ZW50ICE9PSBjdXJyZW50UmVwbGF5aW5nRXZlbnQgJiZcbiAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkgJiZcbiAgICAgICAgICAoZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpIHx8XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgICAgICAgKVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgfHwgcmVhY3ROYW1lKSB7XG4gICAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICA6IChyZWFjdE5hbWUgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50KVxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lLmRlZmF1bHRWaWV3IHx8IHJlYWN0TmFtZS5wYXJlbnRXaW5kb3dcbiAgICAgICAgICAgICAgICA6IHdpbmRvdztcbiAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSxcbiAgICAgICAgICAgICAgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IHRhcmdldEluc3QpLFxuICAgICAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPSByZWFjdEV2ZW50VHlwZVxuICAgICAgICAgICAgICAgID8gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpXG4gICAgICAgICAgICAgICAgOiBudWxsKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgICAoKGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgICAgIGdldE5lYXJlc3RNb3VudGVkRmliZXIocmVhY3RFdmVudFR5cGUpKSxcbiAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSByZWFjdEV2ZW50VHlwZS50YWcpLFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlICE9PSBhY2N1bXVsYXRlVGFyZ2V0T25seSB8fFxuICAgICAgICAgICAgICAgICAgKDUgIT09IGluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAgICAgICAgIDI3ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICA2ICE9PSBpbkNhcHR1cmVQaGFzZSkpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIChTeW50aGV0aWNFdmVudEN0b3IgPSBudWxsKSwgKHJlYWN0RXZlbnRUeXBlID0gdGFyZ2V0SW5zdCk7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAhPT0gcmVhY3RFdmVudFR5cGUpIHtcbiAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IFwib25Nb3VzZUxlYXZlXCI7XG4gICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IFwib25Nb3VzZUVudGVyXCI7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IFwibW91c2VcIjtcbiAgICAgICAgICAgIGlmIChcInBvaW50ZXJvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lKVxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQpLFxuICAgICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBcIm9uUG9pbnRlckxlYXZlXCIpLFxuICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IFwib25Qb2ludGVyRW50ZXJcIiksXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlID0gXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgICBudWxsID09IFN5bnRoZXRpY0V2ZW50Q3RvclxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lXG4gICAgICAgICAgICAgICAgOiBnZXROb2RlRnJvbUluc3RhbmNlKFN5bnRoZXRpY0V2ZW50Q3Rvcik7XG4gICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9XG4gICAgICAgICAgICAgIG51bGwgPT0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShyZWFjdEV2ZW50VHlwZSk7XG4gICAgICAgICAgICByZWFjdE5hbWUgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgIF9pbnN0YW5jZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImxlYXZlXCIsXG4gICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVhY3ROYW1lLnRhcmdldCA9IGFjY3VtdWxhdGVUYXJnZXRPbmx5O1xuICAgICAgICAgICAgcmVhY3ROYW1lLnJlbGF0ZWRUYXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCkgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgICAgICAgKChpbkNhcHR1cmVQaGFzZSA9IG5ldyBpbkNhcHR1cmVQaGFzZShcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSArIFwiZW50ZXJcIixcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnRhcmdldCA9IGxhc3RIb3N0Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnJlbGF0ZWRUYXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seSksXG4gICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBpbkNhcHR1cmVQaGFzZSkpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPSBfaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yICYmIHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNFdmVudEN0b3I7XG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSByZWFjdEV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gaW5DYXB0dXJlUGhhc2U7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gZ2V0UGFyZW50KGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlKys7XG4gICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSByZWFjdEV2ZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGdldFBhcmVudChfaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQrKztcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGluc3RhbmNlIC0gbGFzdEhvc3RDb21wb25lbnQ7IClcbiAgICAgICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSkpLCBpbnN0YW5jZS0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgbGFzdEhvc3RDb21wb25lbnQgLSBpbnN0YW5jZTsgKVxuICAgICAgICAgICAgICAgICAgKHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50LS07XG4gICAgICAgICAgICAgICAgZm9yICg7IGluc3RhbmNlLS07ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKG51bGwgIT09IHJlYWN0RXZlbnROYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lLmFsdGVybmF0ZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gZ2V0UGFyZW50KGluQ2FwdHVyZVBoYXNlKTtcbiAgICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgIG51bGwgIT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJlxuICAgICAgICAgICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50KFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICAgICAgcmVhY3ROYW1lLFxuICAgICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5LFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIHJlYWN0TmFtZS5ub2RlTmFtZSAmJiByZWFjdE5hbWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgIChcImlucHV0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJiBcImZpbGVcIiA9PT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgIClcbiAgICAgICAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgIGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudChyZWFjdE5hbWUpKVxuICAgICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSByZWFjdE5hbWUubm9kZU5hbWUpLFxuICAgICAgICAgICAgIVN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgICAgXCJpbnB1dFwiICE9PSBTeW50aGV0aWNFdmVudEN0b3IudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgKFwiY2hlY2tib3hcIiAhPT0gcmVhY3ROYW1lLnR5cGUgJiYgXCJyYWRpb1wiICE9PSByZWFjdE5hbWUudHlwZSlcbiAgICAgICAgICAgICAgPyB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50KHRhcmdldEluc3QuZWxlbWVudFR5cGUpICYmXG4gICAgICAgICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KVxuICAgICAgICAgICAgICA6IChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jICYmXG4gICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZ1bmMoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgJiYgaGFuZGxlRXZlbnRGdW5jKGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lLCB0YXJnZXRJbnN0KTtcbiAgICAgICAgXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgXCJudW1iZXJcIiA9PT0gcmVhY3ROYW1lLnR5cGUgJiZcbiAgICAgICAgICBudWxsICE9IHRhcmdldEluc3QubWVtb2l6ZWRQcm9wcy52YWx1ZSAmJlxuICAgICAgICAgIHNldERlZmF1bHRWYWx1ZShyZWFjdE5hbWUsIFwibnVtYmVyXCIsIHJlYWN0TmFtZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICBoYW5kbGVFdmVudEZ1bmMgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNUZXh0SW5wdXRFbGVtZW50KGhhbmRsZUV2ZW50RnVuYykgfHxcbiAgICAgICAgICAgIFwidHJ1ZVwiID09PSBoYW5kbGVFdmVudEZ1bmMuY29udGVudEVkaXRhYmxlXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnQgPSBoYW5kbGVFdmVudEZ1bmMpLFxuICAgICAgICAgICAgICAoYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKGxhc3RTZWxlY3Rpb24gPSBudWxsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IGFjdGl2ZUVsZW1lbnRJbnN0ID0gYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBtb3VzZURvd24gPSAhMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITE7XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgfVxuICAgICAgdmFyIGZhbGxiYWNrRGF0YTtcbiAgICAgIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KVxuICAgICAgICBiOiB7XG4gICAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblVwZGF0ZVwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudFR5cGUgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgaXNDb21wb3NpbmdcbiAgICAgICAgICA/IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiKVxuICAgICAgICAgIDogXCJrZXlkb3duXCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgMjI5ID09PSBuYXRpdmVFdmVudC5rZXlDb2RlICYmXG4gICAgICAgICAgICAoZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7XG4gICAgICBldmVudFR5cGUgJiZcbiAgICAgICAgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmXG4gICAgICAgICAgXCJrb1wiICE9PSBuYXRpdmVFdmVudC5sb2NhbGUgJiZcbiAgICAgICAgICAoaXNDb21wb3NpbmcgfHwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiAhPT0gZXZlbnRUeXBlXG4gICAgICAgICAgICA/IFwib25Db21wb3NpdGlvbkVuZFwiID09PSBldmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgaXNDb21wb3NpbmcgJiZcbiAgICAgICAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGdldERhdGEoKSlcbiAgICAgICAgICAgIDogKChyb290ID0gbmF0aXZlRXZlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAoc3RhcnRUZXh0ID0gXCJ2YWx1ZVwiIGluIHJvb3QgPyByb290LnZhbHVlIDogcm9vdC50ZXh0Q29udGVudCksXG4gICAgICAgICAgICAgIChpc0NvbXBvc2luZyA9ICEwKSkpLFxuICAgICAgICAoaGFuZGxlRXZlbnRGdW5jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIGV2ZW50VHlwZSkpLFxuICAgICAgICAwIDwgaGFuZGxlRXZlbnRGdW5jLmxlbmd0aCAmJlxuICAgICAgICAgICgoZXZlbnRUeXBlID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICkpLFxuICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudFR5cGUsIGxpc3RlbmVyczogaGFuZGxlRXZlbnRGdW5jIH0pLFxuICAgICAgICAgIGZhbGxiYWNrRGF0YVxuICAgICAgICAgICAgPyAoZXZlbnRUeXBlLmRhdGEgPSBmYWxsYmFja0RhdGEpXG4gICAgICAgICAgICA6ICgoZmFsbGJhY2tEYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkpLFxuICAgICAgICAgICAgICBudWxsICE9PSBmYWxsYmFja0RhdGEgJiYgKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKSkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGNhblVzZVRleHRJbnB1dEV2ZW50XG4gICAgICAgICAgPyBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpXG4gICAgICAgICAgOiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICApXG4gICAgICAgIChldmVudFR5cGUgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgXCJvbkJlZm9yZUlucHV0XCIpKSxcbiAgICAgICAgICAwIDwgZXZlbnRUeXBlLmxlbmd0aCAmJlxuICAgICAgICAgICAgKChoYW5kbGVFdmVudEZ1bmMgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgICAgICAgICAgICAgXCJvbkJlZm9yZUlucHV0XCIsXG4gICAgICAgICAgICAgIFwiYmVmb3JlaW5wdXRcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVFdmVudEZ1bmMsXG4gICAgICAgICAgICAgIGxpc3RlbmVyczogZXZlbnRUeXBlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChoYW5kbGVFdmVudEZ1bmMuZGF0YSA9IGZhbGxiYWNrRGF0YSkpO1xuICAgICAgZXh0cmFjdEV2ZW50cyQxKFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIHRhcmdldEluc3QsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncyk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgbGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgIGN1cnJlbnRUYXJnZXQ6IGN1cnJlbnRUYXJnZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSB7XG4gIGZvciAoXG4gICAgdmFyIGNhcHR1cmVOYW1lID0gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCIsIGxpc3RlbmVycyA9IFtdO1xuICAgIG51bGwgIT09IHRhcmdldEZpYmVyO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UyID0gdGFyZ2V0RmliZXIsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UyLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UyID0gX2luc3RhbmNlMi50YWc7XG4gICAgKDUgIT09IF9pbnN0YW5jZTIgJiYgMjYgIT09IF9pbnN0YW5jZTIgJiYgMjcgIT09IF9pbnN0YW5jZTIpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCBjYXB0dXJlTmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy51bnNoaWZ0KFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSxcbiAgICAgIChfaW5zdGFuY2UyID0gZ2V0TGlzdGVuZXIodGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSk7XG4gICAgaWYgKDMgPT09IHRhcmdldEZpYmVyLnRhZykgcmV0dXJuIGxpc3RlbmVycztcbiAgICB0YXJnZXRGaWJlciA9IHRhcmdldEZpYmVyLnJldHVybjtcbiAgfVxuICByZXR1cm4gW107XG59XG5mdW5jdGlvbiBnZXRQYXJlbnQoaW5zdCkge1xuICBpZiAobnVsbCA9PT0gaW5zdCkgcmV0dXJuIG51bGw7XG4gIGRvIGluc3QgPSBpbnN0LnJldHVybjtcbiAgd2hpbGUgKGluc3QgJiYgNSAhPT0gaW5zdC50YWcgJiYgMjcgIT09IGluc3QudGFnKTtcbiAgcmV0dXJuIGluc3QgPyBpbnN0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGV2ZW50LFxuICB0YXJnZXQsXG4gIGNvbW1vbixcbiAgaW5DYXB0dXJlUGhhc2Vcbikge1xuICBmb3IgKFxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuX3JlYWN0TmFtZSwgbGlzdGVuZXJzID0gW107XG4gICAgbnVsbCAhPT0gdGFyZ2V0ICYmIHRhcmdldCAhPT0gY29tbW9uO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UzID0gdGFyZ2V0LFxuICAgICAgYWx0ZXJuYXRlID0gX2luc3RhbmNlMy5hbHRlcm5hdGUsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UzLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UzID0gX2luc3RhbmNlMy50YWc7XG4gICAgaWYgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGNvbW1vbikgYnJlYWs7XG4gICAgKDUgIT09IF9pbnN0YW5jZTMgJiYgMjYgIT09IF9pbnN0YW5jZTMgJiYgMjcgIT09IF9pbnN0YW5jZTMpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoYWx0ZXJuYXRlID0gc3RhdGVOb2RlKSxcbiAgICAgIGluQ2FwdHVyZVBoYXNlXG4gICAgICAgID8gKChzdGF0ZU5vZGUgPSBnZXRMaXN0ZW5lcih0YXJnZXQsIHJlZ2lzdHJhdGlvbk5hbWUpKSxcbiAgICAgICAgICBudWxsICE9IHN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoXG4gICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0LCBzdGF0ZU5vZGUsIGFsdGVybmF0ZSlcbiAgICAgICAgICAgICkpXG4gICAgICAgIDogaW5DYXB0dXJlUGhhc2UgfHxcbiAgICAgICAgICAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSkpO1xuICAgIHRhcmdldCA9IHRhcmdldC5yZXR1cm47XG4gIH1cbiAgMCAhPT0gbGlzdGVuZXJzLmxlbmd0aCAmJlxuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudCwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMgfSk7XG59XG52YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZyxcbiAgTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYID0gL1xcdTAwMDB8XFx1RkZGRC9nO1xuZnVuY3Rpb24gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKG1hcmt1cCkge1xuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiBtYXJrdXAgPyBtYXJrdXAgOiBcIlwiICsgbWFya3VwKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgXCJcXG5cIilcbiAgICAucmVwbGFjZShOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgsIFwiXCIpO1xufVxuZnVuY3Rpb24gY2hlY2tGb3JVbm1hdGNoZWRUZXh0KHNlcnZlclRleHQsIGNsaWVudFRleHQpIHtcbiAgY2xpZW50VGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShjbGllbnRUZXh0KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShzZXJ2ZXJUZXh0KSA9PT0gY2xpZW50VGV4dCA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBub29wJDEoKSB7fVxuZnVuY3Rpb24gc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IFwiYm9keVwiID09PSB0YWcgfHxcbiAgICAgICAgICAoXCJ0ZXh0YXJlYVwiID09PSB0YWcgJiYgXCJcIiA9PT0gdmFsdWUpIHx8XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgXCJib2R5XCIgIT09IHRhZyAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2xhc3NOYW1lXCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiY2xhc3NcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRhYkluZGV4XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwidGFiaW5kZXhcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRpclwiOlxuICAgIGNhc2UgXCJyb2xlXCI6XG4gICAgY2FzZSBcInZpZXdCb3hcIjpcbiAgICBjYXNlIFwid2lkdGhcIjpcbiAgICBjYXNlIFwiaGVpZ2h0XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYXRhXCI6XG4gICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdGFnKSB7XG4gICAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJkYXRhXCIsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBcInNyY1wiOlxuICAgIGNhc2UgXCJocmVmXCI6XG4gICAgICBpZiAoXCJcIiA9PT0gdmFsdWUgJiYgKFwiYVwiICE9PSB0YWcgfHwgXCJocmVmXCIgIT09IGtleSkpIHtcbiAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImFjdGlvblwiOlxuICAgIGNhc2UgXCJmb3JtQWN0aW9uXCI6XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIFwiamF2YXNjcmlwdDp0aHJvdyBuZXcgRXJyb3IoJ0EgUmVhY3QgZm9ybSB3YXMgdW5leHBlY3RlZGx5IHN1Ym1pdHRlZC4gSWYgeW91IGNhbGxlZCBmb3JtLnN1Ym1pdCgpIG1hbnVhbGx5LCBjb25zaWRlciB1c2luZyBmb3JtLnJlcXVlc3RTdWJtaXQoKSBpbnN0ZWFkLiBJZiB5b3VcXFxcJ3JlIHRyeWluZyB0byB1c2UgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgaW4gYSBzdWJtaXQgZXZlbnQgaGFuZGxlciwgY29uc2lkZXIgYWxzbyBjYWxsaW5nIGV2ZW50LnByZXZlbnREZWZhdWx0KCkuJylcIlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAoXCJmb3JtQWN0aW9uXCIgPT09IGtleVxuICAgICAgICAgICAgPyAoXCJpbnB1dFwiICE9PSB0YWcgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJuYW1lXCIsIHByb3BzLm5hbWUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBcImZvcm1FbmNUeXBlXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybU1ldGhvZFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1NZXRob2QsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybVRhcmdldFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1UYXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiAoc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwiZW5jVHlwZVwiLCBwcm9wcy5lbmNUeXBlLCBwcm9wcywgbnVsbCksXG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm1ldGhvZFwiLCBwcm9wcy5tZXRob2QsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwidGFyZ2V0XCIsIHByb3BzLnRhcmdldCwgcHJvcHMsIG51bGwpKSk7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdXRlZFwiOlxuICAgICAgZG9tRWxlbWVudC5tdXRlZCA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXV0b0ZvY3VzXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtIcmVmXCI6XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInhsaW5rOmhyZWZcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAga2V5ID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmhyZWZcIixcbiAgICAgICAga2V5XG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbnRlbnRFZGl0YWJsZVwiOlxuICAgIGNhc2UgXCJzcGVsbENoZWNrXCI6XG4gICAgY2FzZSBcImRyYWdnYWJsZVwiOlxuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgIGNhc2UgXCJhdXRvUmV2ZXJzZVwiOlxuICAgIGNhc2UgXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCI6XG4gICAgY2FzZSBcImZvY3VzYWJsZVwiOlxuICAgIGNhc2UgXCJwcmVzZXJ2ZUFscGhhXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIiArIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5lcnRcIjpcbiAgICBjYXNlIFwiYWxsb3dGdWxsU2NyZWVuXCI6XG4gICAgY2FzZSBcImFzeW5jXCI6XG4gICAgY2FzZSBcImF1dG9QbGF5XCI6XG4gICAgY2FzZSBcImNvbnRyb2xzXCI6XG4gICAgY2FzZSBcImRlZmF1bHRcIjpcbiAgICBjYXNlIFwiZGVmZXJcIjpcbiAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVJlbW90ZVBsYXliYWNrXCI6XG4gICAgY2FzZSBcImZvcm1Ob1ZhbGlkYXRlXCI6XG4gICAgY2FzZSBcImhpZGRlblwiOlxuICAgIGNhc2UgXCJsb29wXCI6XG4gICAgY2FzZSBcIm5vTW9kdWxlXCI6XG4gICAgY2FzZSBcIm5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwib3BlblwiOlxuICAgIGNhc2UgXCJwbGF5c0lubGluZVwiOlxuICAgIGNhc2UgXCJyZWFkT25seVwiOlxuICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgIGNhc2UgXCJyZXZlcnNlZFwiOlxuICAgIGNhc2UgXCJzY29wZWRcIjpcbiAgICBjYXNlIFwic2VhbWxlc3NcIjpcbiAgICBjYXNlIFwiaXRlbVNjb3BlXCI6XG4gICAgICB2YWx1ZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXB0dXJlXCI6XG4gICAgY2FzZSBcImRvd25sb2FkXCI6XG4gICAgICAhMCA9PT0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogITEgIT09IHZhbHVlICYmXG4gICAgICAgICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb2xzXCI6XG4gICAgY2FzZSBcInJvd3NcIjpcbiAgICBjYXNlIFwic2l6ZVwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAhaXNOYU4odmFsdWUpICYmXG4gICAgICAxIDw9IHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJvd1NwYW5cIjpcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIGlzTmFOKHZhbHVlKVxuICAgICAgICA/IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICAgICAgOiBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb3BvdmVyXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwicG9wb3ZlclwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBY3R1YXRlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFjdHVhdGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBcmNyb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFyY3JvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtSb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnJvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtTaG93XCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnNob3dcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtUaXRsZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0aXRsZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1R5cGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6dHlwZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxCYXNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmJhc2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sTGFuZ1wiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICAgICAgICBcInhtbDpsYW5nXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbFNwYWNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOnNwYWNlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlzXCI6XG4gICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBcImlzXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICEoMiA8IGtleS5sZW5ndGgpIHx8XG4gICAgICAgIChcIm9cIiAhPT0ga2V5WzBdICYmIFwiT1wiICE9PSBrZXlbMF0pIHx8XG4gICAgICAgIChcIm5cIiAhPT0ga2V5WzFdICYmIFwiTlwiICE9PSBrZXlbMV0pXG4gICAgICApXG4gICAgICAgIChrZXkgPSBhbGlhc2VzLmdldChrZXkpIHx8IGtleSksXG4gICAgICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoZG9tRWxlbWVudCwgdGFnLCBrZXksIHZhbHVlLCBwcm9wcywgcHJldlZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgaWYgKG51bGwgIT0gdmFsdWUpIHtcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgIT09IHR5cGVvZiB2YWx1ZSB8fCAhKFwiX19odG1sXCIgaW4gdmFsdWUpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjEpKTtcbiAgICAgICAga2V5ID0gdmFsdWUuX19odG1sO1xuICAgICAgICBpZiAobnVsbCAhPSBrZXkpIHtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wcy5jaGlsZHJlbikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MCkpO1xuICAgICAgICAgIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIHZhbHVlKVxuICAgICAgICA6IChcIm51bWJlclwiID09PSB0eXBlb2YgdmFsdWUgfHwgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIHZhbHVlKSAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCI6XG4gICAgY2FzZSBcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5uZXJUZXh0XCI6XG4gICAgY2FzZSBcInRleHRDb250ZW50XCI6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKCFyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgIGE6IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBcIm9cIiA9PT0ga2V5WzBdICYmXG4gICAgICAgICAgICBcIm5cIiA9PT0ga2V5WzFdICYmXG4gICAgICAgICAgICAoKHByb3BzID0ga2V5LmVuZHNXaXRoKFwiQ2FwdHVyZVwiKSksXG4gICAgICAgICAgICAodGFnID0ga2V5LnNsaWNlKDIsIHByb3BzID8ga2V5Lmxlbmd0aCAtIDcgOiB2b2lkIDApKSxcbiAgICAgICAgICAgIChwcmV2VmFsdWUgPSBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IG51bGwgIT0gcHJldlZhbHVlID8gcHJldlZhbHVlW2tleV0gOiBudWxsKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGFnLCBwcmV2VmFsdWUsIHByb3BzKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICAoa2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgICAgICA/IChkb21FbGVtZW50W2tleV0gPSBudWxsKVxuICAgICAgICAgICAgICAgIDogZG9tRWxlbWVudC5oYXNBdHRyaWJ1dGUoa2V5KSAmJlxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KSk7XG4gICAgICAgICAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGFnLCB2YWx1ZSwgcHJvcHMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IHZhbHVlKVxuICAgICAgICAgICAgOiAhMCA9PT0gdmFsdWVcbiAgICAgICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgICAgICAgIDogc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0SW5pdGlhbFByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBwcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImltZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICB2YXIgaGFzU3JjID0gITEsXG4gICAgICAgIGhhc1NyY1NldCA9ICExLFxuICAgICAgICBwcm9wS2V5O1xuICAgICAgZm9yIChwcm9wS2V5IGluIHByb3BzKVxuICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcEtleV07XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlKVxuICAgICAgICAgICAgc3dpdGNoIChwcm9wS2V5KSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJzcmNcIjpcbiAgICAgICAgICAgICAgICBoYXNTcmMgPSAhMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1NldFwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5LCBwcm9wVmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaGFzU3JjU2V0ICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1NldFwiLCBwcm9wcy5zcmNTZXQsIHByb3BzLCBudWxsKTtcbiAgICAgIGhhc1NyYyAmJiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJzcmNcIiwgcHJvcHMuc3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSAocHJvcEtleSA9IHByb3BWYWx1ZSA9IGhhc1NyY1NldCA9IG51bGwpLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmMgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmMpKSB7XG4gICAgICAgICAgdmFyIHByb3BWYWx1ZSQxODggPSBwcm9wc1toYXNTcmNdO1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODgpXG4gICAgICAgICAgICBzd2l0Y2ggKGhhc1NyYykge1xuICAgICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9IHByb3BWYWx1ZSQxODg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBwcm9wVmFsdWUkMTg4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgICBwcm9wS2V5ID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BWYWx1ZSQxODg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUkMTg4KVxuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmMsIHByb3BWYWx1ZSQxODgsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaW5pdElucHV0KFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBwcm9wS2V5LFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wVmFsdWUsXG4gICAgICAgIGhhc1NyY1NldCxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGhhc1NyYyA9IHByb3BWYWx1ZSA9IHByb3BLZXkgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmNTZXQgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmNTZXQpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1toYXNTcmNTZXRdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGhhc1NyY1NldCkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmNTZXQsIGRlZmF1bHRWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgIHRhZyA9IHByb3BLZXk7XG4gICAgICBwcm9wcyA9IHByb3BWYWx1ZTtcbiAgICAgIGRvbUVsZW1lbnQubXVsdGlwbGUgPSAhIWhhc1NyYztcbiAgICAgIG51bGwgIT0gdGFnXG4gICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgdGFnLCAhMSlcbiAgICAgICAgOiBudWxsICE9IHByb3BzICYmIHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFoYXNTcmMsIHByb3BzLCAhMCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BLZXkgPSBoYXNTcmNTZXQgPSBoYXNTcmMgPSBudWxsO1xuICAgICAgZm9yIChwcm9wVmFsdWUgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wVmFsdWUpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1twcm9wVmFsdWVdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyY1NldCA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZGVmYXVsdFZhbHVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BWYWx1ZSwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgaW5pdFRleHRhcmVhKGRvbUVsZW1lbnQsIGhhc1NyYywgaGFzU3JjU2V0LCBwcm9wS2V5KTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgIGZvciAoY2hlY2tlZCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGNoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tjaGVja2VkXSksIG51bGwgIT0gaGFzU3JjKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGhhc1NyYztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgY2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJkaWFsb2dcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJiZWZvcmV0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpZnJhbWVcIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yIChoYXNTcmMgPSAwOyBoYXNTcmMgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBoYXNTcmMrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaGFzU3JjXSwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRldGFpbHNcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdENoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLCBudWxsICE9IGhhc1NyYylcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoZGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0Q2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yIChwcm9wVmFsdWUkMTg4IGluIHByb3BzKVxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSQxODgpICYmXG4gICAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW3Byb3BWYWx1ZSQxODhdKSxcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gaGFzU3JjICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlJDE4OCxcbiAgICAgICAgICAgICAgICBoYXNTcmMsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgdm9pZCAwXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgZm9yIChkZWZhdWx0VmFsdWUgaW4gcHJvcHMpXG4gICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgIG51bGwgIT0gaGFzU3JjICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIGhhc1NyYywgcHJvcHMsIG51bGwpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcHMsIG5leHRQcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICB2YXIgbmFtZSA9IG51bGwsXG4gICAgICAgIHR5cGUgPSBudWxsLFxuICAgICAgICB2YWx1ZSA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICAgIGlmIChsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgJiYgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3A7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHxcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSwgbnVsbCwgbmV4dFByb3BzLCBsYXN0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMDUgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBwcm9wS2V5ID0gbmV4dFByb3BzW3Byb3BLZXkkMjA1XTtcbiAgICAgICAgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleSQyMDVdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjA1KSAmJlxuICAgICAgICAgIChudWxsICE9IHByb3BLZXkgfHwgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSQyMDUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgIHR5cGUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgIG5hbWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcHJvcEtleSAhPT0gbGFzdFByb3AgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1LFxuICAgICAgICAgICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3RQcm9wXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgcHJvcEtleSA9IHZhbHVlID0gZGVmYXVsdFZhbHVlID0gcHJvcEtleSQyMDUgPSBudWxsO1xuICAgICAgZm9yICh0eXBlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1t0eXBlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpICYmIG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBsYXN0RGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHR5cGUgPSBuZXh0UHJvcHNbbmFtZV0pLFxuICAgICAgICAgIChsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3BzW25hbWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHR5cGUgfHwgbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjA1ID0gdHlwZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHR5cGUgIT09IGxhc3REZWZhdWx0VmFsdWUgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gZGVmYXVsdFZhbHVlO1xuICAgICAgbGFzdFByb3BzID0gdmFsdWU7XG4gICAgICBuZXh0UHJvcHMgPSBwcm9wS2V5O1xuICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNVxuICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHByb3BLZXkkMjA1LCAhMSlcbiAgICAgICAgOiAhIW5leHRQcm9wcyAhPT0gISFsYXN0UHJvcHMgJiZcbiAgICAgICAgICAobnVsbCAhPSB0YWdcbiAgICAgICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgdGFnLCAhMClcbiAgICAgICAgICAgIDogdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgbGFzdFByb3BzID8gW10gOiBcIlwiLCAhMSkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgcHJvcEtleSA9IHByb3BLZXkkMjA1ID0gbnVsbDtcbiAgICAgIGZvciAoZGVmYXVsdFZhbHVlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IGxhc3RQcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBuYW1lICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRWYWx1ZSwgbnVsbCwgbmV4dFByb3BzLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKHZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IG5leHRQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgICh0eXBlID0gbGFzdFByb3BzW3ZhbHVlXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiAobnVsbCAhPSBuYW1lIHx8IG51bGwgIT0gdHlwZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDUgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IG5hbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IG5hbWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuYW1lICE9PSB0eXBlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHZhbHVlLCBuYW1lLCBuZXh0UHJvcHMsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgIHVwZGF0ZVRleHRhcmVhKGRvbUVsZW1lbnQsIHByb3BLZXkkMjA1LCBwcm9wS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyMSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjA1ID0gbGFzdFByb3BzW3Byb3BLZXkkMjIxXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjIxKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyMSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjIxKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9ICExO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMjEsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKGxhc3REZWZhdWx0VmFsdWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwNSA9IG5leHRQcm9wc1tsYXN0RGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0RGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgcHJvcEtleSQyMDUgIT09IHByb3BLZXkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHByb3BLZXkkMjA1IHx8IG51bGwgIT0gcHJvcEtleSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGxhc3REZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BLZXkkMjA1ICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BLZXkkMjA1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNSxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICBjYXNlIFwiYXJlYVwiOlxuICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgY2FzZSBcImJyXCI6XG4gICAgY2FzZSBcImNvbFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgIGNhc2UgXCJoclwiOlxuICAgIGNhc2UgXCJrZXlnZW5cIjpcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJwYXJhbVwiOlxuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyNiBpbiBsYXN0UHJvcHMpXG4gICAgICAgIChwcm9wS2V5JDIwNSA9IGxhc3RQcm9wc1twcm9wS2V5JDIyNl0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyNikgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDUgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjYpICYmXG4gICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMjYsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDUpO1xuICAgICAgZm9yIChjaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDUgPSBuZXh0UHJvcHNbY2hlY2tlZF0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjA1ICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwNSB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wS2V5JDIwNSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBjaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1LFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSQyMzEgaW4gbGFzdFByb3BzKVxuICAgICAgICAgIChwcm9wS2V5JDIwNSA9IGxhc3RQcm9wc1twcm9wS2V5JDIzMV0pLFxuICAgICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjMxKSAmJlxuICAgICAgICAgICAgICB2b2lkIDAgIT09IHByb3BLZXkkMjA1ICYmXG4gICAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMzEpICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMzEsXG4gICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNVxuICAgICAgICAgICAgICApO1xuICAgICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDUgPSBuZXh0UHJvcHNbZGVmYXVsdENoZWNrZWRdKSxcbiAgICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSB8fFxuICAgICAgICAgICAgICBwcm9wS2V5JDIwNSA9PT0gcHJvcEtleSB8fFxuICAgICAgICAgICAgICAodm9pZCAwID09PSBwcm9wS2V5JDIwNSAmJiB2b2lkIDAgPT09IHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDUsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAodmFyIHByb3BLZXkkMjM2IGluIGxhc3RQcm9wcylcbiAgICAocHJvcEtleSQyMDUgPSBsYXN0UHJvcHNbcHJvcEtleSQyMzZdKSxcbiAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNikgJiZcbiAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjM2KSAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMzYsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDUpO1xuICBmb3IgKGxhc3RQcm9wIGluIG5leHRQcm9wcylcbiAgICAocHJvcEtleSQyMDUgPSBuZXh0UHJvcHNbbGFzdFByb3BdKSxcbiAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGxhc3RQcm9wKSB8fFxuICAgICAgICBwcm9wS2V5JDIwNSA9PT0gcHJvcEtleSB8fFxuICAgICAgICAobnVsbCA9PSBwcm9wS2V5JDIwNSAmJiBudWxsID09IHByb3BLZXkpIHx8XG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcCwgcHJvcEtleSQyMDUsIG5leHRQcm9wcywgcHJvcEtleSk7XG59XG52YXIgZXZlbnRzRW5hYmxlZCA9IG51bGwsXG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gZ2V0T3duSG9zdENvbnRleHQobmFtZXNwYWNlVVJJKSB7XG4gIHN3aXRjaCAobmFtZXNwYWNlVVJJKSB7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChwYXJlbnROYW1lc3BhY2UsIHR5cGUpIHtcbiAgaWYgKDAgPT09IHBhcmVudE5hbWVzcGFjZSlcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgcmV0dXJuIDEgPT09IHBhcmVudE5hbWVzcGFjZSAmJiBcImZvcmVpZ25PYmplY3RcIiA9PT0gdHlwZVxuICAgID8gMFxuICAgIDogcGFyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICBcInRleHRhcmVhXCIgPT09IHR5cGUgfHxcbiAgICBcIm5vc2NyaXB0XCIgPT09IHR5cGUgfHxcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcIm51bWJlclwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBudWxsICE9PSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwpXG4gICk7XG59XG52YXIgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIHNob3VsZEF0dGVtcHRFYWdlclRyYW5zaXRpb24oKSB7XG4gIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgaWYgKGV2ZW50ICYmIFwicG9wc3RhdGVcIiA9PT0gZXZlbnQudHlwZSkge1xuICAgIGlmIChldmVudCA9PT0gY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50KSByZXR1cm4gITE7XG4gICAgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG4gIHJldHVybiAhMTtcbn1cbnZhciBzY2hlZHVsZVRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IHZvaWQgMCxcbiAgY2FuY2VsVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IHZvaWQgMCxcbiAgbG9jYWxQcm9taXNlID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiB2b2lkIDAsXG4gIHNjaGVkdWxlTWljcm90YXNrID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBxdWV1ZU1pY3JvdGFza1xuICAgICAgPyBxdWV1ZU1pY3JvdGFza1xuICAgICAgOiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jYWxQcm9taXNlXG4gICAgICAgID8gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxQcm9taXNlXG4gICAgICAgICAgICAgIC5yZXNvbHZlKG51bGwpXG4gICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3JJbk5leHRUaWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogc2NoZWR1bGVUaW1lb3V0O1xuZnVuY3Rpb24gaGFuZGxlRXJyb3JJbk5leHRUaWNrKGVycm9yKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzU2luZ2xldG9uU2NvcGUodHlwZSkge1xuICByZXR1cm4gXCJoZWFkXCIgPT09IHR5cGU7XG59XG5mdW5jdGlvbiBjbGVhclN1c3BlbnNlQm91bmRhcnkocGFyZW50SW5zdGFuY2UsIHN1c3BlbnNlSW5zdGFuY2UpIHtcbiAgdmFyIG5vZGUgPSBzdXNwZW5zZUluc3RhbmNlLFxuICAgIHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb24gPSAwLFxuICAgIGRlcHRoID0gMDtcbiAgZG8ge1xuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5leHROb2RlICYmIDggPT09IG5leHROb2RlLm5vZGVUeXBlKVxuICAgICAgaWYgKCgobm9kZSA9IG5leHROb2RlLmRhdGEpLCBcIi8kXCIgPT09IG5vZGUpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAwIDwgcG9zc2libGVQcmVhbWJsZUNvbnRyaWJ1dGlvbiAmJlxuICAgICAgICAgIDggPiBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUgPSBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uO1xuICAgICAgICAgIHZhciBvd25lckRvY3VtZW50ID0gcGFyZW50SW5zdGFuY2Uub3duZXJEb2N1bWVudDtcbiAgICAgICAgICBub2RlICYgMSAmJiByZWxlYXNlU2luZ2xldG9uSW5zdGFuY2Uob3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICAgIG5vZGUgJiAyICYmIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShvd25lckRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgIGlmIChub2RlICYgNClcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIG5vZGUgPSBvd25lckRvY3VtZW50LmhlYWQsXG4gICAgICAgICAgICAgICAgcmVsZWFzZVNpbmdsZXRvbkluc3RhbmNlKG5vZGUpLFxuICAgICAgICAgICAgICAgIG93bmVyRG9jdW1lbnQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgIG93bmVyRG9jdW1lbnQ7XG5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB2YXIgbmV4dE5vZGUkanNjb21wJDAgPSBvd25lckRvY3VtZW50Lm5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIG5vZGVOYW1lID0gb3duZXJEb2N1bWVudC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgb3duZXJEb2N1bWVudFtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgICBcIlNDUklQVFwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICAgIFwiU1RZTEVcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgICAoXCJMSU5LXCIgPT09IG5vZGVOYW1lICYmXG4gICAgICAgICAgICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gb3duZXJEb2N1bWVudC5yZWwudG9Mb3dlckNhc2UoKSkgfHxcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG93bmVyRG9jdW1lbnQpO1xuICAgICAgICAgICAgICBvd25lckRvY3VtZW50ID0gbmV4dE5vZGUkanNjb21wJDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSB7XG4gICAgICAgICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobmV4dE5vZGUpO1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2VcbiAgICAgICAgXCIkXCIgPT09IG5vZGUgfHwgXCIkP1wiID09PSBub2RlIHx8IFwiJCFcIiA9PT0gbm9kZVxuICAgICAgICAgID8gZGVwdGgrK1xuICAgICAgICAgIDogKHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb24gPSBub2RlLmNoYXJDb2RlQXQoMCkgLSA0OCk7XG4gICAgZWxzZSBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uID0gMDtcbiAgICBub2RlID0gbmV4dE5vZGU7XG4gIH0gd2hpbGUgKG5vZGUpO1xuICByZXRyeUlmQmxvY2tlZE9uKHN1c3BlbnNlSW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gY2xlYXJDb250YWluZXJTcGFyaW5nbHkoY29udGFpbmVyKSB7XG4gIHZhciBuZXh0Tm9kZSA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICBuZXh0Tm9kZSAmJiAxMCA9PT0gbmV4dE5vZGUubm9kZVR5cGUgJiYgKG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmcpO1xuICBmb3IgKDsgbmV4dE5vZGU7ICkge1xuICAgIHZhciBub2RlID0gbmV4dE5vZGU7XG4gICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICBzd2l0Y2ggKG5vZGUubm9kZU5hbWUpIHtcbiAgICAgIGNhc2UgXCJIVE1MXCI6XG4gICAgICBjYXNlIFwiSEVBRFwiOlxuICAgICAgY2FzZSBcIkJPRFlcIjpcbiAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkobm9kZSk7XG4gICAgICAgIGRldGFjaERlbGV0ZWRJbnN0YW5jZShub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIFwiU0NSSVBUXCI6XG4gICAgICBjYXNlIFwiU1RZTEVcIjpcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIFwiTElOS1wiOlxuICAgICAgICBpZiAoXCJzdHlsZXNoZWV0XCIgPT09IG5vZGUucmVsLnRvTG93ZXJDYXNlKCkpIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQobm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIGluUm9vdE9yU2luZ2xldG9uKSB7XG4gIGZvciAoOyAxID09PSBpbnN0YW5jZS5ub2RlVHlwZTsgKSB7XG4gICAgdmFyIGFueVByb3BzID0gcHJvcHM7XG4gICAgaWYgKGluc3RhbmNlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IHR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgaWYgKFxuICAgICAgICAhaW5Sb290T3JTaW5nbGV0b24gJiZcbiAgICAgICAgKFwiSU5QVVRcIiAhPT0gaW5zdGFuY2Uubm9kZU5hbWUgfHwgXCJoaWRkZW5cIiAhPT0gaW5zdGFuY2UudHlwZSlcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmICghaW5Sb290T3JTaW5nbGV0b24pXG4gICAgICBpZiAoXCJpbnB1dFwiID09PSB0eXBlICYmIFwiaGlkZGVuXCIgPT09IGluc3RhbmNlLnR5cGUpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsID09IGFueVByb3BzLm5hbWUgPyBudWxsIDogXCJcIiArIGFueVByb3BzLm5hbWU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcImhpZGRlblwiID09PSBhbnlQcm9wcy50eXBlICYmXG4gICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSA9PT0gbmFtZVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfSBlbHNlIHJldHVybiBpbnN0YW5jZTtcbiAgICBlbHNlIGlmICghaW5zdGFuY2VbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdKVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICAgICAgaWYgKCFpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJpdGVtcHJvcFwiKSkgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgICAgIG5hbWUgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIik7XG4gICAgICAgICAgaWYgKFwic3R5bGVzaGVldFwiID09PSBuYW1lICYmIGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgbmFtZSAhPT0gYW55UHJvcHMucmVsIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5ocmVmIHx8IFwiXCIgPT09IGFueVByb3BzLmhyZWZcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IGFueVByb3BzLmhyZWYpIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuY3Jvc3NPcmlnaW4gPyBudWxsIDogYW55UHJvcHMuY3Jvc3NPcmlnaW4pIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMudGl0bGUgPyBudWxsIDogYW55UHJvcHMudGl0bGUpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgICBpZiAoaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpKSBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICBuYW1lID0gaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChuYW1lICE9PSAobnVsbCA9PSBhbnlQcm9wcy5zcmMgPyBudWxsIDogYW55UHJvcHMuc3JjKSB8fFxuICAgICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpICE9PVxuICAgICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLnR5cGUgPyBudWxsIDogYW55UHJvcHMudHlwZSkgfHxcbiAgICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgIT09XG4gICAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuY3Jvc3NPcmlnaW4gPyBudWxsIDogYW55UHJvcHMuY3Jvc3NPcmlnaW4pKSAmJlxuICAgICAgICAgICAgbmFtZSAmJlxuICAgICAgICAgICAgaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiYXN5bmNcIikgJiZcbiAgICAgICAgICAgICFpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJpdGVtcHJvcFwiKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9XG4gICAgaW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShpbnN0YW5jZS5uZXh0U2libGluZyk7XG4gICAgaWYgKG51bGwgPT09IGluc3RhbmNlKSBicmVhaztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoaW5zdGFuY2UsIHRleHQsIGluUm9vdE9yU2luZ2xldG9uKSB7XG4gIGlmIChcIlwiID09PSB0ZXh0KSByZXR1cm4gbnVsbDtcbiAgZm9yICg7IDMgIT09IGluc3RhbmNlLm5vZGVUeXBlOyApIHtcbiAgICBpZiAoXG4gICAgICAoMSAhPT0gaW5zdGFuY2Uubm9kZVR5cGUgfHxcbiAgICAgICAgXCJJTlBVVFwiICE9PSBpbnN0YW5jZS5ub2RlTmFtZSB8fFxuICAgICAgICBcImhpZGRlblwiICE9PSBpbnN0YW5jZS50eXBlKSAmJlxuICAgICAgIWluUm9vdE9yU2luZ2xldG9uXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShpbnN0YW5jZS5uZXh0U2libGluZyk7XG4gICAgaWYgKG51bGwgPT09IGluc3RhbmNlKSByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhpbnN0YW5jZSkge1xuICByZXR1cm4gKFxuICAgIFwiJCFcIiA9PT0gaW5zdGFuY2UuZGF0YSB8fFxuICAgIChcIiQ/XCIgPT09IGluc3RhbmNlLmRhdGEgJiYgXCJjb21wbGV0ZVwiID09PSBpbnN0YW5jZS5vd25lckRvY3VtZW50LnJlYWR5U3RhdGUpXG4gICk7XG59XG5mdW5jdGlvbiByZWdpc3RlclN1c3BlbnNlSW5zdGFuY2VSZXRyeShpbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBpbnN0YW5jZS5vd25lckRvY3VtZW50O1xuICBpZiAoXCIkP1wiICE9PSBpbnN0YW5jZS5kYXRhIHx8IFwiY29tcGxldGVcIiA9PT0gb3duZXJEb2N1bWVudC5yZWFkeVN0YXRlKVxuICAgIGNhbGxiYWNrKCk7XG4gIGVsc2Uge1xuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICBvd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbGlzdGVuZXIpO1xuICAgIGluc3RhbmNlLl9yZWFjdFJldHJ5ID0gbGlzdGVuZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlKG5vZGUpIHtcbiAgZm9yICg7IG51bGwgIT0gbm9kZTsgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgIGlmICgxID09PSBub2RlVHlwZSB8fCAzID09PSBub2RlVHlwZSkgYnJlYWs7XG4gICAgaWYgKDggPT09IG5vZGVUeXBlKSB7XG4gICAgICBub2RlVHlwZSA9IG5vZGUuZGF0YTtcbiAgICAgIGlmIChcbiAgICAgICAgXCIkXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiJCFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkP1wiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIkYhXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRlwiID09PSBub2RlVHlwZVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIGlmIChcIi8kXCIgPT09IG5vZGVUeXBlKSByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG52YXIgcHJldmlvdXNIeWRyYXRhYmxlT25FbnRlcmluZ1Njb3BlZFNpbmdsZXRvbiA9IG51bGw7XG5mdW5jdGlvbiBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldEluc3RhbmNlKSB7XG4gIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICBmb3IgKHZhciBkZXB0aCA9IDA7IHRhcmdldEluc3RhbmNlOyApIHtcbiAgICBpZiAoOCA9PT0gdGFyZ2V0SW5zdGFuY2Uubm9kZVR5cGUpIHtcbiAgICAgIHZhciBkYXRhID0gdGFyZ2V0SW5zdGFuY2UuZGF0YTtcbiAgICAgIGlmIChcIiRcIiA9PT0gZGF0YSB8fCBcIiQhXCIgPT09IGRhdGEgfHwgXCIkP1wiID09PSBkYXRhKSB7XG4gICAgICAgIGlmICgwID09PSBkZXB0aCkgcmV0dXJuIHRhcmdldEluc3RhbmNlO1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIFwiLyRcIiA9PT0gZGF0YSAmJiBkZXB0aCsrO1xuICAgIH1cbiAgICB0YXJnZXRJbnN0YW5jZSA9IHRhcmdldEluc3RhbmNlLnByZXZpb3VzU2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHByb3BzID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICB0eXBlID0gcHJvcHMuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MikpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImhlYWRcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5oZWFkO1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MykpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5ib2R5O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NCkpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUxKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShpbnN0YW5jZSkge1xuICBmb3IgKHZhciBhdHRyaWJ1dGVzID0gaW5zdGFuY2UuYXR0cmlidXRlczsgYXR0cmlidXRlcy5sZW5ndGg7IClcbiAgICBpbnN0YW5jZS5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICBkZXRhY2hEZWxldGVkSW5zdGFuY2UoaW5zdGFuY2UpO1xufVxudmFyIHByZWxvYWRQcm9wc01hcCA9IG5ldyBNYXAoKSxcbiAgcHJlY29ubmVjdHNTZXQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBnZXRIb2lzdGFibGVSb290KGNvbnRhaW5lcikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGFpbmVyLmdldFJvb3ROb2RlXG4gICAgPyBjb250YWluZXIuZ2V0Um9vdE5vZGUoKVxuICAgIDogOSA9PT0gY29udGFpbmVyLm5vZGVUeXBlXG4gICAgICA/IGNvbnRhaW5lclxuICAgICAgOiBjb250YWluZXIub3duZXJEb2N1bWVudDtcbn1cbnZhciBwcmV2aW91c0Rpc3BhdGNoZXIgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5kO1xuUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZCA9IHtcbiAgZjogZmx1c2hTeW5jV29yayxcbiAgcjogcmVxdWVzdEZvcm1SZXNldCxcbiAgRDogcHJlZmV0Y2hETlMsXG4gIEM6IHByZWNvbm5lY3QsXG4gIEw6IHByZWxvYWQsXG4gIG06IHByZWxvYWRNb2R1bGUsXG4gIFg6IHByZWluaXRTY3JpcHQsXG4gIFM6IHByZWluaXRTdHlsZSxcbiAgTTogcHJlaW5pdE1vZHVsZVNjcmlwdFxufTtcbmZ1bmN0aW9uIGZsdXNoU3luY1dvcmsoKSB7XG4gIHZhciBwcmV2aW91c1dhc1JlbmRlcmluZyA9IHByZXZpb3VzRGlzcGF0Y2hlci5mKCksXG4gICAgd2FzUmVuZGVyaW5nID0gZmx1c2hTeW5jV29yayQxKCk7XG4gIHJldHVybiBwcmV2aW91c1dhc1JlbmRlcmluZyB8fCB3YXNSZW5kZXJpbmc7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0KGZvcm0pIHtcbiAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgbnVsbCAhPT0gZm9ybUluc3QgJiYgNSA9PT0gZm9ybUluc3QudGFnICYmIFwiZm9ybVwiID09PSBmb3JtSW5zdC50eXBlXG4gICAgPyByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUluc3QpXG4gICAgOiBwcmV2aW91c0Rpc3BhdGNoZXIucihmb3JtKTtcbn1cbnZhciBnbG9iYWxEb2N1bWVudCA9IFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBkb2N1bWVudCA/IG51bGwgOiBkb2N1bWVudDtcbmZ1bmN0aW9uIHByZWNvbm5lY3RBcyhyZWwsIGhyZWYsIGNyb3NzT3JpZ2luKSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIGhyZWYpIHtcbiAgICB2YXIgbGltaXRlZEVzY2FwZWRIcmVmID1cbiAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZik7XG4gICAgbGltaXRlZEVzY2FwZWRIcmVmID1cbiAgICAgICdsaW5rW3JlbD1cIicgKyByZWwgKyAnXCJdW2hyZWY9XCInICsgbGltaXRlZEVzY2FwZWRIcmVmICsgJ1wiXSc7XG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGNyb3NzT3JpZ2luICYmXG4gICAgICAobGltaXRlZEVzY2FwZWRIcmVmICs9ICdbY3Jvc3NvcmlnaW49XCInICsgY3Jvc3NPcmlnaW4gKyAnXCJdJyk7XG4gICAgcHJlY29ubmVjdHNTZXQuaGFzKGxpbWl0ZWRFc2NhcGVkSHJlZikgfHxcbiAgICAgIChwcmVjb25uZWN0c1NldC5hZGQobGltaXRlZEVzY2FwZWRIcmVmKSxcbiAgICAgIChyZWwgPSB7IHJlbDogcmVsLCBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sIGhyZWY6IGhyZWYgfSksXG4gICAgICBudWxsID09PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGltaXRlZEVzY2FwZWRIcmVmKSAmJlxuICAgICAgICAoKGhyZWYgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaHJlZiwgXCJsaW5rXCIsIHJlbCksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaHJlZiksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChocmVmKSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVmZXRjaEROUyhocmVmKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5EKGhyZWYpO1xuICBwcmVjb25uZWN0QXMoXCJkbnMtcHJlZmV0Y2hcIiwgaHJlZiwgbnVsbCk7XG59XG5mdW5jdGlvbiBwcmVjb25uZWN0KGhyZWYsIGNyb3NzT3JpZ2luKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5DKGhyZWYsIGNyb3NzT3JpZ2luKTtcbiAgcHJlY29ubmVjdEFzKFwicHJlY29ubmVjdFwiLCBocmVmLCBjcm9zc09yaWdpbik7XG59XG5mdW5jdGlvbiBwcmVsb2FkKGhyZWYsIGFzLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5MKGhyZWYsIGFzLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZiAmJiBhcykge1xuICAgIHZhciBwcmVsb2FkU2VsZWN0b3IgPVxuICAgICAgJ2xpbmtbcmVsPVwicHJlbG9hZFwiXVthcz1cIicgK1xuICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhhcykgK1xuICAgICAgJ1wiXSc7XG4gICAgXCJpbWFnZVwiID09PSBhc1xuICAgICAgPyBvcHRpb25zICYmIG9wdGlvbnMuaW1hZ2VTcmNTZXRcbiAgICAgICAgPyAoKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgJ1tpbWFnZXNyY3NldD1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgb3B0aW9ucy5pbWFnZVNyY1NldFxuICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAnXCJdJyksXG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTaXplcyAmJlxuICAgICAgICAgICAgKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgICAnW2ltYWdlc2l6ZXM9XCInICtcbiAgICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgICBvcHRpb25zLmltYWdlU2l6ZXNcbiAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICdcIl0nKSlcbiAgICAgICAgOiAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAnW2hyZWY9XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAgICAgJ1wiXScpXG4gICAgICA6IChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAnW2hyZWY9XCInICtcbiAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgICAnXCJdJyk7XG4gICAgdmFyIGtleSA9IHByZWxvYWRTZWxlY3RvcjtcbiAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAga2V5ID0gZ2V0U3R5bGVLZXkoaHJlZik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoaHJlZik7XG4gICAgfVxuICAgIHByZWxvYWRQcm9wc01hcC5oYXMoa2V5KSB8fFxuICAgICAgKChocmVmID0gYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgcmVsOiBcInByZWxvYWRcIixcbiAgICAgICAgICBocmVmOlxuICAgICAgICAgICAgXCJpbWFnZVwiID09PSBhcyAmJiBvcHRpb25zICYmIG9wdGlvbnMuaW1hZ2VTcmNTZXQgPyB2b2lkIDAgOiBocmVmLFxuICAgICAgICAgIGFzOiBhc1xuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zXG4gICAgICApKSxcbiAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQoa2V5LCBocmVmKSxcbiAgICAgIG51bGwgIT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihwcmVsb2FkU2VsZWN0b3IpIHx8XG4gICAgICAgIChcInN0eWxlXCIgPT09IGFzICYmXG4gICAgICAgICAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KSkpIHx8XG4gICAgICAgIChcInNjcmlwdFwiID09PSBhcyAmJlxuICAgICAgICAgIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpIHx8XG4gICAgICAgICgoYXMgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoYXMsIFwibGlua1wiLCBocmVmKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShhcyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChhcykpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlbG9hZE1vZHVsZShocmVmLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5tKGhyZWYsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucyAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcyA/IG9wdGlvbnMuYXMgOiBcInNjcmlwdFwiLFxuICAgICAgcHJlbG9hZFNlbGVjdG9yID1cbiAgICAgICAgJ2xpbmtbcmVsPVwibW9kdWxlcHJlbG9hZFwiXVthcz1cIicgK1xuICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGFzKSArXG4gICAgICAgICdcIl1baHJlZj1cIicgK1xuICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgJ1wiXScsXG4gICAgICBrZXkgPSBwcmVsb2FkU2VsZWN0b3I7XG4gICAgc3dpdGNoIChhcykge1xuICAgICAgY2FzZSBcImF1ZGlvd29ya2xldFwiOlxuICAgICAgY2FzZSBcInBhaW50d29ya2xldFwiOlxuICAgICAgY2FzZSBcInNlcnZpY2V3b3JrZXJcIjpcbiAgICAgIGNhc2UgXCJzaGFyZWR3b3JrZXJcIjpcbiAgICAgIGNhc2UgXCJ3b3JrZXJcIjpcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KGhyZWYpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhcHJlbG9hZFByb3BzTWFwLmhhcyhrZXkpICYmXG4gICAgICAoKGhyZWYgPSBhc3NpZ24oeyByZWw6IFwibW9kdWxlcHJlbG9hZFwiLCBocmVmOiBocmVmIH0sIG9wdGlvbnMpKSxcbiAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQoa2V5LCBocmVmKSxcbiAgICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihwcmVsb2FkU2VsZWN0b3IpKVxuICAgICkge1xuICAgICAgc3dpdGNoIChhcykge1xuICAgICAgICBjYXNlIFwiYXVkaW93b3JrbGV0XCI6XG4gICAgICAgIGNhc2UgXCJwYWludHdvcmtsZXRcIjpcbiAgICAgICAgY2FzZSBcInNlcnZpY2V3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcInNoYXJlZHdvcmtlclwiOlxuICAgICAgICBjYXNlIFwid29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICBpZiAob3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFzID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGFzLCBcImxpbmtcIiwgaHJlZik7XG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGFzKTtcbiAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChhcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0U3R5bGUoaHJlZiwgcHJlY2VkZW5jZSwgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuUyhocmVmLCBwcmVjZWRlbmNlLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTdHlsZXMsXG4gICAgICBrZXkgPSBnZXRTdHlsZUtleShocmVmKTtcbiAgICBwcmVjZWRlbmNlID0gcHJlY2VkZW5jZSB8fCBcImRlZmF1bHRcIjtcbiAgICB2YXIgcmVzb3VyY2UgPSBzdHlsZXMuZ2V0KGtleSk7XG4gICAgaWYgKCFyZXNvdXJjZSkge1xuICAgICAgdmFyIHN0YXRlID0geyBsb2FkaW5nOiAwLCBwcmVsb2FkOiBudWxsIH07XG4gICAgICBpZiAoXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSlcbiAgICAgICAgKSlcbiAgICAgIClcbiAgICAgICAgc3RhdGUubG9hZGluZyA9IDU7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaHJlZiA9IGFzc2lnbihcbiAgICAgICAgICB7IHJlbDogXCJzdHlsZXNoZWV0XCIsIGhyZWY6IGhyZWYsIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHByZWNlZGVuY2UgfSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChocmVmLCBvcHRpb25zKTtcbiAgICAgICAgdmFyIGxpbmsgPSAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShsaW5rKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMobGluaywgXCJsaW5rXCIsIGhyZWYpO1xuICAgICAgICBsaW5rLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGxpbmsub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICBsaW5rLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDE7XG4gICAgICAgIH0pO1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUubG9hZGluZyB8PSAyO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICBpbnNlcnRTdHlsZXNoZWV0KHJlc291cmNlLCBwcmVjZWRlbmNlLCBvd25lckRvY3VtZW50KTtcbiAgICAgIH1cbiAgICAgIHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICB9O1xuICAgICAgc3R5bGVzLnNldChrZXksIHJlc291cmNlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRTY3JpcHQoc3JjLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5YKHNyYywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIHNyYykge1xuICAgIHZhciBzY3JpcHRzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU2NyaXB0cyxcbiAgICAgIGtleSA9IGdldFNjcmlwdEtleShzcmMpLFxuICAgICAgcmVzb3VyY2UgPSBzY3JpcHRzLmdldChrZXkpO1xuICAgIHJlc291cmNlIHx8XG4gICAgICAoKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSksXG4gICAgICByZXNvdXJjZSB8fFxuICAgICAgICAoKHNyYyA9IGFzc2lnbih7IHNyYzogc3JjLCBhc3luYzogITAgfSwgb3B0aW9ucykpLFxuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzcmMsIG9wdGlvbnMpLFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHJlc291cmNlKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMocmVzb3VyY2UsIFwibGlua1wiLCBzcmMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocmVzb3VyY2UpKSxcbiAgICAgIChyZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgIH0pLFxuICAgICAgc2NyaXB0cy5zZXQoa2V5LCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0TW9kdWxlU2NyaXB0KHNyYywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuTShzcmMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBzcmMpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVNjcmlwdHMsXG4gICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoc3JjKSxcbiAgICAgIHJlc291cmNlID0gc2NyaXB0cy5nZXQoa2V5KTtcbiAgICByZXNvdXJjZSB8fFxuICAgICAgKChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpLFxuICAgICAgcmVzb3VyY2UgfHxcbiAgICAgICAgKChzcmMgPSBhc3NpZ24oeyBzcmM6IHNyYywgYXN5bmM6ICEwLCB0eXBlOiBcIm1vZHVsZVwiIH0sIG9wdGlvbnMpKSxcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc3JjLCBvcHRpb25zKSxcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShyZXNvdXJjZSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHJlc291cmNlLCBcImxpbmtcIiwgc3JjKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHJlc291cmNlKSksXG4gICAgICAocmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBudWxsXG4gICAgICB9KSxcbiAgICAgIHNjcmlwdHMuc2V0KGtleSwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2UodHlwZSwgY3VycmVudFByb3BzLCBwZW5kaW5nUHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudClcbiAgICA/IGdldEhvaXN0YWJsZVJvb3QoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KVxuICAgIDogbnVsbDtcbiAgaWYgKCFKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQ2KSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHJldHVybiBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLnByZWNlZGVuY2UgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5ocmVmXG4gICAgICAgID8gKChjdXJyZW50UHJvcHMgPSBnZXRTdHlsZUtleShwZW5kaW5nUHJvcHMuaHJlZikpLFxuICAgICAgICAgIChwZW5kaW5nUHJvcHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICkuaG9pc3RhYmxlU3R5bGVzKSxcbiAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gcGVuZGluZ1Byb3BzLmdldChjdXJyZW50UHJvcHMpKSxcbiAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgfHxcbiAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0ge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0eWxlXCIsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcGVuZGluZ1Byb3BzLnNldChjdXJyZW50UHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkpLFxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgOiB7IHR5cGU6IFwidm9pZFwiLCBpbnN0YW5jZTogbnVsbCwgY291bnQ6IDAsIHN0YXRlOiBudWxsIH07XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHlsZXNoZWV0XCIgPT09IHBlbmRpbmdQcm9wcy5yZWwgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5ocmVmICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMucHJlY2VkZW5jZVxuICAgICAgKSB7XG4gICAgICAgIHR5cGUgPSBnZXRTdHlsZUtleShwZW5kaW5nUHJvcHMuaHJlZik7XG4gICAgICAgIHZhciBzdHlsZXMkMjQ0ID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICApLmhvaXN0YWJsZVN0eWxlcyxcbiAgICAgICAgICByZXNvdXJjZSQyNDUgPSBzdHlsZXMkMjQ0LmdldCh0eXBlKTtcbiAgICAgICAgcmVzb3VyY2UkMjQ1IHx8XG4gICAgICAgICAgKChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0Lm93bmVyRG9jdW1lbnQgfHwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSxcbiAgICAgICAgICAocmVzb3VyY2UkMjQ1ID0ge1xuICAgICAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgc3RhdGU6IHsgbG9hZGluZzogMCwgcHJlbG9hZDogbnVsbCB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGVzJDI0NC5zZXQodHlwZSwgcmVzb3VyY2UkMjQ1KSxcbiAgICAgICAgICAoc3R5bGVzJDI0NCA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleSh0eXBlKVxuICAgICAgICAgICkpICYmXG4gICAgICAgICAgICAhc3R5bGVzJDI0NC5fcCAmJlxuICAgICAgICAgICAgKChyZXNvdXJjZSQyNDUuaW5zdGFuY2UgPSBzdHlsZXMkMjQ0KSxcbiAgICAgICAgICAgIChyZXNvdXJjZSQyNDUuc3RhdGUubG9hZGluZyA9IDUpKSxcbiAgICAgICAgICBwcmVsb2FkUHJvcHNNYXAuaGFzKHR5cGUpIHx8XG4gICAgICAgICAgICAoKHBlbmRpbmdQcm9wcyA9IHtcbiAgICAgICAgICAgICAgcmVsOiBcInByZWxvYWRcIixcbiAgICAgICAgICAgICAgYXM6IFwic3R5bGVcIixcbiAgICAgICAgICAgICAgaHJlZjogcGVuZGluZ1Byb3BzLmhyZWYsXG4gICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBwZW5kaW5nUHJvcHMuY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICAgIGludGVncml0eTogcGVuZGluZ1Byb3BzLmludGVncml0eSxcbiAgICAgICAgICAgICAgbWVkaWE6IHBlbmRpbmdQcm9wcy5tZWRpYSxcbiAgICAgICAgICAgICAgaHJlZkxhbmc6IHBlbmRpbmdQcm9wcy5ocmVmTGFuZyxcbiAgICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6IHBlbmRpbmdQcm9wcy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KHR5cGUsIHBlbmRpbmdQcm9wcyksXG4gICAgICAgICAgICBzdHlsZXMkMjQ0IHx8XG4gICAgICAgICAgICAgIHByZWxvYWRTdHlsZXNoZWV0KFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZSQyNDUuc3RhdGVcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBpZiAoY3VycmVudFByb3BzICYmIG51bGwgPT09IGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyOCwgXCJcIikpO1xuICAgICAgICByZXR1cm4gcmVzb3VyY2UkMjQ1O1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQcm9wcyAmJiBudWxsICE9PSBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTI5LCBcIlwiKSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudFByb3BzID0gcGVuZGluZ1Byb3BzLmFzeW5jKSxcbiAgICAgICAgKHBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcy5zcmMpLFxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzICYmXG4gICAgICAgIGN1cnJlbnRQcm9wcyAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjdXJyZW50UHJvcHMgJiZcbiAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGN1cnJlbnRQcm9wc1xuICAgICAgICAgID8gKChjdXJyZW50UHJvcHMgPSBnZXRTY3JpcHRLZXkocGVuZGluZ1Byb3BzKSksXG4gICAgICAgICAgICAocGVuZGluZ1Byb3BzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgKS5ob2lzdGFibGVTY3JpcHRzKSxcbiAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBwZW5kaW5nUHJvcHMuZ2V0KGN1cnJlbnRQcm9wcykpLFxuICAgICAgICAgICAgY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHBlbmRpbmdQcm9wcy5zZXQoY3VycmVudFByb3BzLCBjdXJyZW50UmVzb3VyY2UpKSxcbiAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgICA6IHsgdHlwZTogXCJ2b2lkXCIsIGluc3RhbmNlOiBudWxsLCBjb3VudDogMCwgc3RhdGU6IG51bGwgfVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDQsIHR5cGUpKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3R5bGVLZXkoaHJlZikge1xuICByZXR1cm4gJ2hyZWY9XCInICsgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArICdcIic7XG59XG5mdW5jdGlvbiBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSkge1xuICByZXR1cm4gJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXVsnICsga2V5ICsgXCJdXCI7XG59XG5mdW5jdGlvbiBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocmF3UHJvcHMpIHtcbiAgcmV0dXJuIGFzc2lnbih7fSwgcmF3UHJvcHMsIHtcbiAgICBcImRhdGEtcHJlY2VkZW5jZVwiOiByYXdQcm9wcy5wcmVjZWRlbmNlLFxuICAgIHByZWNlZGVuY2U6IG51bGxcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVsb2FkU3R5bGVzaGVldChvd25lckRvY3VtZW50LCBrZXksIHByZWxvYWRQcm9wcywgc3RhdGUpIHtcbiAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaW5rW3JlbD1cInByZWxvYWRcIl1bYXM9XCJzdHlsZVwiXVsnICsga2V5ICsgXCJdXCIpXG4gICAgPyAoc3RhdGUubG9hZGluZyA9IDEpXG4gICAgOiAoKGtleSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgKHN0YXRlLnByZWxvYWQgPSBrZXkpLFxuICAgICAga2V5LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5sb2FkaW5nIHw9IDEpO1xuICAgICAgfSksXG4gICAgICBrZXkuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5sb2FkaW5nIHw9IDIpO1xuICAgICAgfSksXG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhrZXksIFwibGlua1wiLCBwcmVsb2FkUHJvcHMpLFxuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShrZXkpLFxuICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGtleSkpO1xufVxuZnVuY3Rpb24gZ2V0U2NyaXB0S2V5KHNyYykge1xuICByZXR1cm4gJ1tzcmM9XCInICsgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhzcmMpICsgJ1wiXSc7XG59XG5mdW5jdGlvbiBnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSB7XG4gIHJldHVybiBcInNjcmlwdFthc3luY11cIiArIGtleTtcbn1cbmZ1bmN0aW9uIGFjcXVpcmVSZXNvdXJjZShob2lzdGFibGVSb290LCByZXNvdXJjZSwgcHJvcHMpIHtcbiAgcmVzb3VyY2UuY291bnQrKztcbiAgaWYgKG51bGwgPT09IHJlc291cmNlLmluc3RhbmNlKVxuICAgIHN3aXRjaCAocmVzb3VyY2UudHlwZSkge1xuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAnc3R5bGVbZGF0YS1ocmVmfj1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlcyhwcm9wcy5ocmVmKSArXG4gICAgICAgICAgICAnXCJdJ1xuICAgICAgICApO1xuICAgICAgICBpZiAoaW5zdGFuY2UpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpLFxuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICB2YXIgc3R5bGVQcm9wcyA9IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICBcImRhdGEtaHJlZlwiOiBwcm9wcy5ocmVmLFxuICAgICAgICAgIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHByb3BzLnByZWNlZGVuY2UsXG4gICAgICAgICAgaHJlZjogbnVsbCxcbiAgICAgICAgICBwcmVjZWRlbmNlOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICBpbnN0YW5jZSA9IChob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdCkuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN0eWxlXCJcbiAgICAgICAgKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlLCBcInN0eWxlXCIsIHN0eWxlUHJvcHMpO1xuICAgICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlKTtcbiAgICAgIGNhc2UgXCJzdHlsZXNoZWV0XCI6XG4gICAgICAgIHN0eWxlUHJvcHMgPSBnZXRTdHlsZUtleShwcm9wcy5ocmVmKTtcbiAgICAgICAgdmFyIGluc3RhbmNlJDI1MCA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KHN0eWxlUHJvcHMpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbnN0YW5jZSQyNTApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQpLFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UkMjUwKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UkMjUwKSxcbiAgICAgICAgICAgIGluc3RhbmNlJDI1MFxuICAgICAgICAgICk7XG4gICAgICAgIGluc3RhbmNlID0gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHByb3BzKTtcbiAgICAgICAgKHN0eWxlUHJvcHMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KHN0eWxlUHJvcHMpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChpbnN0YW5jZSwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGluc3RhbmNlJDI1MCA9IChcbiAgICAgICAgICBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdFxuICAgICAgICApLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlJDI1MCk7XG4gICAgICAgIHZhciBsaW5rSW5zdGFuY2UgPSBpbnN0YW5jZSQyNTA7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBsaW5rSW5zdGFuY2Uub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICBsaW5rSW5zdGFuY2Uub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlJDI1MCwgXCJsaW5rXCIsIGluc3RhbmNlKTtcbiAgICAgICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlJDI1MCwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSQyNTApO1xuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBpbnN0YW5jZSQyNTAgPSBnZXRTY3JpcHRLZXkocHJvcHMuc3JjKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChzdHlsZVByb3BzID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGluc3RhbmNlJDI1MClcbiAgICAgICAgICApKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IHN0eWxlUHJvcHMpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShzdHlsZVByb3BzKSxcbiAgICAgICAgICAgIHN0eWxlUHJvcHNcbiAgICAgICAgICApO1xuICAgICAgICBpbnN0YW5jZSA9IHByb3BzO1xuICAgICAgICBpZiAoKHN0eWxlUHJvcHMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGluc3RhbmNlJDI1MCkpKVxuICAgICAgICAgIChpbnN0YW5jZSA9IGFzc2lnbih7fSwgcHJvcHMpKSxcbiAgICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KGluc3RhbmNlLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICAgICAgICBzdHlsZVByb3BzID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHN0eWxlUHJvcHMpO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhzdHlsZVByb3BzLCBcImxpbmtcIiwgaW5zdGFuY2UpO1xuICAgICAgICBob2lzdGFibGVSb290LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVQcm9wcyk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBzdHlsZVByb3BzKTtcbiAgICAgIGNhc2UgXCJ2b2lkXCI6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDMsIHJlc291cmNlLnR5cGUpKTtcbiAgICB9XG4gIGVsc2VcbiAgICBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJlxuICAgICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSAmJlxuICAgICAgKChpbnN0YW5jZSA9IHJlc291cmNlLmluc3RhbmNlKSxcbiAgICAgIChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQpLFxuICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCkpO1xuICByZXR1cm4gcmVzb3VyY2UuaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcmVjZWRlbmNlLCByb290KSB7XG4gIGZvciAoXG4gICAgdmFyIG5vZGVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdW2RhdGEtcHJlY2VkZW5jZV0sc3R5bGVbZGF0YS1wcmVjZWRlbmNlXSdcbiAgICAgICksXG4gICAgICBsYXN0ID0gbm9kZXMubGVuZ3RoID8gbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV0gOiBudWxsLFxuICAgICAgcHJpb3IgPSBsYXN0LFxuICAgICAgaSA9IDA7XG4gICAgaSA8IG5vZGVzLmxlbmd0aDtcbiAgICBpKytcbiAgKSB7XG4gICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAobm9kZS5kYXRhc2V0LnByZWNlZGVuY2UgPT09IHByZWNlZGVuY2UpIHByaW9yID0gbm9kZTtcbiAgICBlbHNlIGlmIChwcmlvciAhPT0gbGFzdCkgYnJlYWs7XG4gIH1cbiAgcHJpb3JcbiAgICA/IHByaW9yLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGluc3RhbmNlLCBwcmlvci5uZXh0U2libGluZylcbiAgICA6ICgocHJlY2VkZW5jZSA9IDkgPT09IHJvb3Qubm9kZVR5cGUgPyByb290LmhlYWQgOiByb290KSxcbiAgICAgIHByZWNlZGVuY2UuaW5zZXJ0QmVmb3JlKGluc3RhbmNlLCBwcmVjZWRlbmNlLmZpcnN0Q2hpbGQpKTtcbn1cbmZ1bmN0aW9uIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChzdHlsZXNoZWV0UHJvcHMsIHByZWxvYWRQcm9wcykge1xuICBudWxsID09IHN0eWxlc2hlZXRQcm9wcy5jcm9zc09yaWdpbiAmJlxuICAgIChzdHlsZXNoZWV0UHJvcHMuY3Jvc3NPcmlnaW4gPSBwcmVsb2FkUHJvcHMuY3Jvc3NPcmlnaW4pO1xuICBudWxsID09IHN0eWxlc2hlZXRQcm9wcy5yZWZlcnJlclBvbGljeSAmJlxuICAgIChzdHlsZXNoZWV0UHJvcHMucmVmZXJyZXJQb2xpY3kgPSBwcmVsb2FkUHJvcHMucmVmZXJyZXJQb2xpY3kpO1xuICBudWxsID09IHN0eWxlc2hlZXRQcm9wcy50aXRsZSAmJiAoc3R5bGVzaGVldFByb3BzLnRpdGxlID0gcHJlbG9hZFByb3BzLnRpdGxlKTtcbn1cbmZ1bmN0aW9uIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNjcmlwdFByb3BzLCBwcmVsb2FkUHJvcHMpIHtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5jcm9zc09yaWdpbiAmJlxuICAgIChzY3JpcHRQcm9wcy5jcm9zc09yaWdpbiA9IHByZWxvYWRQcm9wcy5jcm9zc09yaWdpbik7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMucmVmZXJyZXJQb2xpY3kgJiZcbiAgICAoc2NyaXB0UHJvcHMucmVmZXJyZXJQb2xpY3kgPSBwcmVsb2FkUHJvcHMucmVmZXJyZXJQb2xpY3kpO1xuICBudWxsID09IHNjcmlwdFByb3BzLmludGVncml0eSAmJlxuICAgIChzY3JpcHRQcm9wcy5pbnRlZ3JpdHkgPSBwcmVsb2FkUHJvcHMuaW50ZWdyaXR5KTtcbn1cbnZhciB0YWdDYWNoZXMgPSBudWxsO1xuZnVuY3Rpb24gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKHR5cGUsIGtleUF0dHJpYnV0ZSwgb3duZXJEb2N1bWVudCkge1xuICBpZiAobnVsbCA9PT0gdGFnQ2FjaGVzKSB7XG4gICAgdmFyIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHZhciBjYWNoZXMgPSAodGFnQ2FjaGVzID0gbmV3IE1hcCgpKTtcbiAgICBjYWNoZXMuc2V0KG93bmVyRG9jdW1lbnQsIGNhY2hlKTtcbiAgfSBlbHNlXG4gICAgKGNhY2hlcyA9IHRhZ0NhY2hlcyksXG4gICAgICAoY2FjaGUgPSBjYWNoZXMuZ2V0KG93bmVyRG9jdW1lbnQpKSxcbiAgICAgIGNhY2hlIHx8ICgoY2FjaGUgPSBuZXcgTWFwKCkpLCBjYWNoZXMuc2V0KG93bmVyRG9jdW1lbnQsIGNhY2hlKSk7XG4gIGlmIChjYWNoZS5oYXModHlwZSkpIHJldHVybiBjYWNoZTtcbiAgY2FjaGUuc2V0KHR5cGUsIG51bGwpO1xuICBvd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0eXBlKTtcbiAgZm9yIChjYWNoZXMgPSAwOyBjYWNoZXMgPCBvd25lckRvY3VtZW50Lmxlbmd0aDsgY2FjaGVzKyspIHtcbiAgICB2YXIgbm9kZSA9IG93bmVyRG9jdW1lbnRbY2FjaGVzXTtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICBub2RlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldIHx8XG4gICAgICAgIChcImxpbmtcIiA9PT0gdHlwZSAmJiBcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpXG4gICAgICApICYmXG4gICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgIT09IG5vZGUubmFtZXNwYWNlVVJJXG4gICAgKSB7XG4gICAgICB2YXIgbm9kZUtleSA9IG5vZGUuZ2V0QXR0cmlidXRlKGtleUF0dHJpYnV0ZSkgfHwgXCJcIjtcbiAgICAgIG5vZGVLZXkgPSB0eXBlICsgbm9kZUtleTtcbiAgICAgIHZhciBleGlzdGluZyA9IGNhY2hlLmdldChub2RlS2V5KTtcbiAgICAgIGV4aXN0aW5nID8gZXhpc3RpbmcucHVzaChub2RlKSA6IGNhY2hlLnNldChub2RlS2V5LCBbbm9kZV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2FjaGU7XG59XG5mdW5jdGlvbiBtb3VudEhvaXN0YWJsZShob2lzdGFibGVSb290LCB0eXBlLCBpbnN0YW5jZSkge1xuICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gIGhvaXN0YWJsZVJvb3QuaGVhZC5pbnNlcnRCZWZvcmUoXG4gICAgaW5zdGFuY2UsXG4gICAgXCJ0aXRsZVwiID09PSB0eXBlID8gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IHRpdGxlXCIpIDogbnVsbFxuICApO1xufVxuZnVuY3Rpb24gaXNIb3N0SG9pc3RhYmxlVHlwZSh0eXBlLCBwcm9wcywgaG9zdENvbnRleHQpIHtcbiAgaWYgKDEgPT09IGhvc3RDb250ZXh0IHx8IG51bGwgIT0gcHJvcHMuaXRlbVByb3ApIHJldHVybiAhMTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgIHJldHVybiAhMDtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLnByZWNlZGVuY2UgfHxcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLmhyZWYgfHxcbiAgICAgICAgXCJcIiA9PT0gcHJvcHMuaHJlZlxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIHJldHVybiAhMDtcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMucmVsIHx8XG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5ocmVmIHx8XG4gICAgICAgIFwiXCIgPT09IHByb3BzLmhyZWYgfHxcbiAgICAgICAgcHJvcHMub25Mb2FkIHx8XG4gICAgICAgIHByb3BzLm9uRXJyb3JcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgICBzd2l0Y2ggKHByb3BzLnJlbCkge1xuICAgICAgICBjYXNlIFwic3R5bGVzaGVldFwiOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZSA9IHByb3BzLmRpc2FibGVkKSxcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwcm9wcy5wcmVjZWRlbmNlICYmIG51bGwgPT0gdHlwZVxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgfVxuICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIGlmIChcbiAgICAgICAgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BzLmFzeW5jICYmXG4gICAgICAgICFwcm9wcy5vbkxvYWQgJiZcbiAgICAgICAgIXByb3BzLm9uRXJyb3IgJiZcbiAgICAgICAgcHJvcHMuc3JjICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwcm9wcy5zcmNcbiAgICAgIClcbiAgICAgICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIHByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkge1xuICByZXR1cm4gXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiYgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiAzKVxuICAgID8gITFcbiAgICA6ICEwO1xufVxudmFyIHN1c3BlbmRlZFN0YXRlID0gbnVsbDtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gc3VzcGVuZFJlc291cmNlKGhvaXN0YWJsZVJvb3QsIHJlc291cmNlLCBwcm9wcykge1xuICBpZiAobnVsbCA9PT0gc3VzcGVuZGVkU3RhdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc1KSk7XG4gIHZhciBzdGF0ZSA9IHN1c3BlbmRlZFN0YXRlO1xuICBpZiAoXG4gICAgXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiZcbiAgICAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLm1lZGlhIHx8XG4gICAgICAhMSAhPT0gbWF0Y2hNZWRpYShwcm9wcy5tZWRpYSkubWF0Y2hlcykgJiZcbiAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpXG4gICkge1xuICAgIGlmIChudWxsID09PSByZXNvdXJjZS5pbnN0YW5jZSkge1xuICAgICAgdmFyIGtleSA9IGdldFN0eWxlS2V5KHByb3BzLmhyZWYpLFxuICAgICAgICBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSlcbiAgICAgICAgKTtcbiAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBob2lzdGFibGVSb290ID0gaW5zdGFuY2UuX3A7XG4gICAgICAgIG51bGwgIT09IGhvaXN0YWJsZVJvb3QgJiZcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGhvaXN0YWJsZVJvb3QudGhlbiAmJlxuICAgICAgICAgIChzdGF0ZS5jb3VudCsrLFxuICAgICAgICAgIChzdGF0ZSA9IG9uVW5zdXNwZW5kLmJpbmQoc3RhdGUpKSxcbiAgICAgICAgICBob2lzdGFibGVSb290LnRoZW4oc3RhdGUsIHN0YXRlKSk7XG4gICAgICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgcmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICBwcm9wcyA9IHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhwcm9wcyk7XG4gICAgICAoa2V5ID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQocHJvcHMsIGtleSk7XG4gICAgICBpbnN0YW5jZSA9IGluc3RhbmNlLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSk7XG4gICAgICB2YXIgbGlua0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICBsaW5rSW5zdGFuY2UuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICBsaW5rSW5zdGFuY2Uub25lcnJvciA9IHJlamVjdDtcbiAgICAgIH0pO1xuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UsIFwibGlua1wiLCBwcm9wcyk7XG4gICAgICByZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIH1cbiAgICBudWxsID09PSBzdGF0ZS5zdHlsZXNoZWV0cyAmJiAoc3RhdGUuc3R5bGVzaGVldHMgPSBuZXcgTWFwKCkpO1xuICAgIHN0YXRlLnN0eWxlc2hlZXRzLnNldChyZXNvdXJjZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgKGhvaXN0YWJsZVJvb3QgPSByZXNvdXJjZS5zdGF0ZS5wcmVsb2FkKSAmJlxuICAgICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiAzKSAmJlxuICAgICAgKHN0YXRlLmNvdW50KyssXG4gICAgICAocmVzb3VyY2UgPSBvblVuc3VzcGVuZC5iaW5kKHN0YXRlKSksXG4gICAgICBob2lzdGFibGVSb290LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHJlc291cmNlKSxcbiAgICAgIGhvaXN0YWJsZVJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhaXRGb3JDb21taXRUb0JlUmVhZHkoKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRTdGF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzUpKTtcbiAgdmFyIHN0YXRlID0gc3VzcGVuZGVkU3RhdGU7XG4gIHN0YXRlLnN0eWxlc2hlZXRzICYmXG4gICAgMCA9PT0gc3RhdGUuY291bnQgJiZcbiAgICBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgc3RhdGUuc3R5bGVzaGVldHMpO1xuICByZXR1cm4gMCA8IHN0YXRlLmNvdW50XG4gICAgPyBmdW5jdGlvbiAoY29tbWl0KSB7XG4gICAgICAgIHZhciBzdHlsZXNoZWV0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5zdHlsZXNoZWV0cyAmJlxuICAgICAgICAgICAgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHN0YXRlLnN0eWxlc2hlZXRzKTtcbiAgICAgICAgICBpZiAoc3RhdGUudW5zdXNwZW5kKSB7XG4gICAgICAgICAgICB2YXIgdW5zdXNwZW5kID0gc3RhdGUudW5zdXNwZW5kO1xuICAgICAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgICAgICAgIHVuc3VzcGVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgNmU0KTtcbiAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gY29tbWl0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHN0eWxlc2hlZXRUaW1lcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgOiBudWxsO1xufVxuZnVuY3Rpb24gb25VbnN1c3BlbmQoKSB7XG4gIHRoaXMuY291bnQtLTtcbiAgaWYgKDAgPT09IHRoaXMuY291bnQpXG4gICAgaWYgKHRoaXMuc3R5bGVzaGVldHMpIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHRoaXMsIHRoaXMuc3R5bGVzaGVldHMpO1xuICAgIGVsc2UgaWYgKHRoaXMudW5zdXNwZW5kKSB7XG4gICAgICB2YXIgdW5zdXNwZW5kID0gdGhpcy51bnN1c3BlbmQ7XG4gICAgICB0aGlzLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICB1bnN1c3BlbmQoKTtcbiAgICB9XG59XG52YXIgcHJlY2VkZW5jZXNCeVJvb3QgPSBudWxsO1xuZnVuY3Rpb24gaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHJlc291cmNlcykge1xuICBzdGF0ZS5zdHlsZXNoZWV0cyA9IG51bGw7XG4gIG51bGwgIT09IHN0YXRlLnVuc3VzcGVuZCAmJlxuICAgIChzdGF0ZS5jb3VudCsrLFxuICAgIChwcmVjZWRlbmNlc0J5Um9vdCA9IG5ldyBNYXAoKSksXG4gICAgcmVzb3VyY2VzLmZvckVhY2goaW5zZXJ0U3R5bGVzaGVldEludG9Sb290LCBzdGF0ZSksXG4gICAgKHByZWNlZGVuY2VzQnlSb290ID0gbnVsbCksXG4gICAgb25VbnN1c3BlbmQuY2FsbChzdGF0ZSkpO1xufVxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVzaGVldEludG9Sb290KHJvb3QsIHJlc291cmNlKSB7XG4gIGlmICghKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSkge1xuICAgIHZhciBwcmVjZWRlbmNlcyA9IHByZWNlZGVuY2VzQnlSb290LmdldChyb290KTtcbiAgICBpZiAocHJlY2VkZW5jZXMpIHZhciBsYXN0ID0gcHJlY2VkZW5jZXMuZ2V0KG51bGwpO1xuICAgIGVsc2Uge1xuICAgICAgcHJlY2VkZW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgICBwcmVjZWRlbmNlc0J5Um9vdC5zZXQocm9vdCwgcHJlY2VkZW5jZXMpO1xuICAgICAgZm9yIChcbiAgICAgICAgdmFyIG5vZGVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgXCJsaW5rW2RhdGEtcHJlY2VkZW5jZV0sc3R5bGVbZGF0YS1wcmVjZWRlbmNlXVwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgaSA8IG5vZGVzLmxlbmd0aDtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiTElOS1wiID09PSBub2RlLm5vZGVOYW1lIHx8XG4gICAgICAgICAgXCJub3QgYWxsXCIgIT09IG5vZGUuZ2V0QXR0cmlidXRlKFwibWVkaWFcIilcbiAgICAgICAgKVxuICAgICAgICAgIHByZWNlZGVuY2VzLnNldChub2RlLmRhdGFzZXQucHJlY2VkZW5jZSwgbm9kZSksIChsYXN0ID0gbm9kZSk7XG4gICAgICB9XG4gICAgICBsYXN0ICYmIHByZWNlZGVuY2VzLnNldChudWxsLCBsYXN0KTtcbiAgICB9XG4gICAgbm9kZXMgPSByZXNvdXJjZS5pbnN0YW5jZTtcbiAgICBub2RlID0gbm9kZXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpO1xuICAgIGkgPSBwcmVjZWRlbmNlcy5nZXQobm9kZSkgfHwgbGFzdDtcbiAgICBpID09PSBsYXN0ICYmIHByZWNlZGVuY2VzLnNldChudWxsLCBub2Rlcyk7XG4gICAgcHJlY2VkZW5jZXMuc2V0KG5vZGUsIG5vZGVzKTtcbiAgICB0aGlzLmNvdW50Kys7XG4gICAgbGFzdCA9IG9uVW5zdXNwZW5kLmJpbmQodGhpcyk7XG4gICAgbm9kZXMuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgbGFzdCk7XG4gICAgbm9kZXMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGxhc3QpO1xuICAgIGlcbiAgICAgID8gaS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlcywgaS5uZXh0U2libGluZylcbiAgICAgIDogKChyb290ID0gOSA9PT0gcm9vdC5ub2RlVHlwZSA/IHJvb3QuaGVhZCA6IHJvb3QpLFxuICAgICAgICByb290Lmluc2VydEJlZm9yZShub2Rlcywgcm9vdC5maXJzdENoaWxkKSk7XG4gICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICB9XG59XG52YXIgSG9zdFRyYW5zaXRpb25Db250ZXh0ID0ge1xuICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICBQcm92aWRlcjogbnVsbCxcbiAgQ29uc3VtZXI6IG51bGwsXG4gIF9jdXJyZW50VmFsdWU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gIF9jdXJyZW50VmFsdWUyOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICBfdGhyZWFkQ291bnQ6IDBcbn07XG5mdW5jdGlvbiBGaWJlclJvb3ROb2RlKFxuICBjb250YWluZXJJbmZvLFxuICB0YWcsXG4gIGh5ZHJhdGUsXG4gIGlkZW50aWZpZXJQcmVmaXgsXG4gIG9uVW5jYXVnaHRFcnJvcixcbiAgb25DYXVnaHRFcnJvcixcbiAgb25SZWNvdmVyYWJsZUVycm9yLFxuICBmb3JtU3RhdGVcbikge1xuICB0aGlzLnRhZyA9IDE7XG4gIHRoaXMuY29udGFpbmVySW5mbyA9IGNvbnRhaW5lckluZm87XG4gIHRoaXMucGluZ0NhY2hlID0gdGhpcy5jdXJyZW50ID0gdGhpcy5wZW5kaW5nQ2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLnRpbWVvdXRIYW5kbGUgPSAtMTtcbiAgdGhpcy5jYWxsYmFja05vZGUgPVxuICAgIHRoaXMubmV4dCA9XG4gICAgdGhpcy5wZW5kaW5nQ29udGV4dCA9XG4gICAgdGhpcy5jb250ZXh0ID1cbiAgICB0aGlzLmNhbmNlbFBlbmRpbmdDb21taXQgPVxuICAgICAgbnVsbDtcbiAgdGhpcy5jYWxsYmFja1ByaW9yaXR5ID0gMDtcbiAgdGhpcy5leHBpcmF0aW9uVGltZXMgPSBjcmVhdGVMYW5lTWFwKC0xKTtcbiAgdGhpcy5lbnRhbmdsZWRMYW5lcyA9XG4gICAgdGhpcy5zaGVsbFN1c3BlbmRDb3VudGVyID1cbiAgICB0aGlzLmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzID1cbiAgICB0aGlzLmV4cGlyZWRMYW5lcyA9XG4gICAgdGhpcy53YXJtTGFuZXMgPVxuICAgIHRoaXMucGluZ2VkTGFuZXMgPVxuICAgIHRoaXMuc3VzcGVuZGVkTGFuZXMgPVxuICAgIHRoaXMucGVuZGluZ0xhbmVzID1cbiAgICAgIDA7XG4gIHRoaXMuZW50YW5nbGVtZW50cyA9IGNyZWF0ZUxhbmVNYXAoMCk7XG4gIHRoaXMuaGlkZGVuVXBkYXRlcyA9IGNyZWF0ZUxhbmVNYXAobnVsbCk7XG4gIHRoaXMuaWRlbnRpZmllclByZWZpeCA9IGlkZW50aWZpZXJQcmVmaXg7XG4gIHRoaXMub25VbmNhdWdodEVycm9yID0gb25VbmNhdWdodEVycm9yO1xuICB0aGlzLm9uQ2F1Z2h0RXJyb3IgPSBvbkNhdWdodEVycm9yO1xuICB0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IG9uUmVjb3ZlcmFibGVFcnJvcjtcbiAgdGhpcy5wb29sZWRDYWNoZSA9IG51bGw7XG4gIHRoaXMucG9vbGVkQ2FjaGVMYW5lcyA9IDA7XG4gIHRoaXMuZm9ybVN0YXRlID0gZm9ybVN0YXRlO1xuICB0aGlzLmluY29tcGxldGVUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyUm9vdChcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpbml0aWFsQ2hpbGRyZW4sXG4gIGh5ZHJhdGlvbkNhbGxiYWNrcyxcbiAgaXNTdHJpY3RNb2RlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgdHJhbnNpdGlvbkNhbGxiYWNrcyxcbiAgZm9ybVN0YXRlXG4pIHtcbiAgY29udGFpbmVySW5mbyA9IG5ldyBGaWJlclJvb3ROb2RlKFxuICAgIGNvbnRhaW5lckluZm8sXG4gICAgdGFnLFxuICAgIGh5ZHJhdGUsXG4gICAgaWRlbnRpZmllclByZWZpeCxcbiAgICBvblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIHRhZyA9IDE7XG4gICEwID09PSBpc1N0cmljdE1vZGUgJiYgKHRhZyB8PSAyNCk7XG4gIGlzU3RyaWN0TW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMsIG51bGwsIG51bGwsIHRhZyk7XG4gIGNvbnRhaW5lckluZm8uY3VycmVudCA9IGlzU3RyaWN0TW9kZTtcbiAgaXNTdHJpY3RNb2RlLnN0YXRlTm9kZSA9IGNvbnRhaW5lckluZm87XG4gIHRhZyA9IGNyZWF0ZUNhY2hlKCk7XG4gIHRhZy5yZWZDb3VudCsrO1xuICBjb250YWluZXJJbmZvLnBvb2xlZENhY2hlID0gdGFnO1xuICB0YWcucmVmQ291bnQrKztcbiAgaXNTdHJpY3RNb2RlLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgZWxlbWVudDogaW5pdGlhbENoaWxkcmVuLFxuICAgIGlzRGVoeWRyYXRlZDogaHlkcmF0ZSxcbiAgICBjYWNoZTogdGFnXG4gIH07XG4gIGluaXRpYWxpemVVcGRhdGVRdWV1ZShpc1N0cmljdE1vZGUpO1xuICByZXR1cm4gY29udGFpbmVySW5mbztcbn1cbmZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCkge1xuICBpZiAoIXBhcmVudENvbXBvbmVudCkgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcGFyZW50Q29tcG9uZW50ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICByZXR1cm4gcGFyZW50Q29tcG9uZW50O1xufVxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVySW1wbChcbiAgcm9vdEZpYmVyLFxuICBsYW5lLFxuICBlbGVtZW50LFxuICBjb250YWluZXIsXG4gIHBhcmVudENvbXBvbmVudCxcbiAgY2FsbGJhY2tcbikge1xuICBwYXJlbnRDb21wb25lbnQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBudWxsID09PSBjb250YWluZXIuY29udGV4dFxuICAgID8gKGNvbnRhaW5lci5jb250ZXh0ID0gcGFyZW50Q29tcG9uZW50KVxuICAgIDogKGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IHBhcmVudENvbXBvbmVudCk7XG4gIGNvbnRhaW5lciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgY29udGFpbmVyLnBheWxvYWQgPSB7IGVsZW1lbnQ6IGVsZW1lbnQgfTtcbiAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrO1xuICBudWxsICE9PSBjYWxsYmFjayAmJiAoY29udGFpbmVyLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICBlbGVtZW50ID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIGNvbnRhaW5lciwgbGFuZSk7XG4gIG51bGwgIT09IGVsZW1lbnQgJiZcbiAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGVsZW1lbnQsIHJvb3RGaWJlciwgbGFuZSksXG4gICAgZW50YW5nbGVUcmFuc2l0aW9ucyhlbGVtZW50LCByb290RmliZXIsIGxhbmUpKTtcbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgbnVsbCAhPT0gZmliZXIuZGVoeWRyYXRlZCkge1xuICAgIHZhciBhID0gZmliZXIucmV0cnlMYW5lO1xuICAgIGZpYmVyLnJldHJ5TGFuZSA9IDAgIT09IGEgJiYgYSA8IHJldHJ5TGFuZSA/IGEgOiByZXRyeUxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG4gIChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSkgJiYgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDY3MTA4ODY0KTtcbiAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgNjcxMDg4NjQpO1xuICB9XG59XG52YXIgX2VuYWJsZWQgPSAhMDtcbmZ1bmN0aW9uIGRpc3BhdGNoRGlzY3JldGVFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBjb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDIpLFxuICAgICAgZGlzcGF0Y2hFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSA4KSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIGlmIChfZW5hYmxlZCkge1xuICAgIHZhciBibG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gYmxvY2tlZE9uKVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICApLFxuICAgICAgICBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgcXVldWVJZkNvbnRpbnVvdXNFdmVudChcbiAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgIClcbiAgICApXG4gICAgICBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpLFxuICAgICAgZXZlbnRTeXN0ZW1GbGFncyAmIDQgJiZcbiAgICAgICAgLTEgPCBkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMuaW5kZXhPZihkb21FdmVudE5hbWUpKVxuICAgICkge1xuICAgICAgZm9yICg7IG51bGwgIT09IGJsb2NrZWRPbjsgKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGdldEluc3RhbmNlRnJvbU5vZGUoYmxvY2tlZE9uKTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpYmVyKVxuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGZpYmVyID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBpZiAoZmliZXIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGZpYmVyLnBlbmRpbmdMYW5lcyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IGZpYmVyO1xuICAgICAgICAgICAgICAgICAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gMjtcbiAgICAgICAgICAgICAgICAgIGZvciAocm9vdC5lbnRhbmdsZWRMYW5lcyB8PSAyOyBsYW5lczsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gMSA8PCAoMzEgLSBjbHozMihsYW5lcykpO1xuICAgICAgICAgICAgICAgICAgICByb290LmVudGFuZ2xlbWVudHNbMV0gfD0gbGFuZTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgJj0gfmxhbmU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoZmliZXIpO1xuICAgICAgICAgICAgICAgICAgMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgKHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpKSxcbiAgICAgICAgICAgICAgICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMiksXG4gICAgICAgICAgICAgICAgZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgICAgICAgICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXIgPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgbnVsbCA9PT0gZmliZXIgJiZcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChmaWJlciA9PT0gYmxvY2tlZE9uKSBicmVhaztcbiAgICAgICAgYmxvY2tlZE9uID0gZmliZXI7XG4gICAgICB9XG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbiAgcmV0dXJuIGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbn1cbnZhciByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG5mdW5jdGlvbiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCh0YXJnZXROb2RlKSB7XG4gIHJldHVybl90YXJnZXRJbnN0ID0gbnVsbDtcbiAgdGFyZ2V0Tm9kZSA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0Tm9kZSk7XG4gICAgaWYgKG51bGwgPT09IG5lYXJlc3RNb3VudGVkKSB0YXJnZXROb2RlID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSBuZWFyZXN0TW91bnRlZC50YWc7XG4gICAgICBpZiAoMTMgPT09IHRhZykge1xuICAgICAgICB0YXJnZXROb2RlID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCk7XG4gICAgICAgIGlmIChudWxsICE9PSB0YXJnZXROb2RlKSByZXR1cm4gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKDMgPT09IHRhZykge1xuICAgICAgICBpZiAobmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIDMgPT09IG5lYXJlc3RNb3VudGVkLnRhZ1xuICAgICAgICAgICAgPyBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBuZWFyZXN0TW91bnRlZCAhPT0gdGFyZ2V0Tm9kZSAmJiAodGFyZ2V0Tm9kZSA9IG51bGwpO1xuICAgIH1cbiAgfVxuICByZXR1cm5fdGFyZ2V0SW5zdCA9IHRhcmdldE5vZGU7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgY2FzZSBcImNhbmNlbFwiOlxuICAgIGNhc2UgXCJjbGlja1wiOlxuICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgY2FzZSBcImN1dFwiOlxuICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICBjYXNlIFwiaW52YWxpZFwiOlxuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgY2FzZSBcInBsYXlcIjpcbiAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICBjYXNlIFwicmF0ZWNoYW5nZVwiOlxuICAgIGNhc2UgXCJyZXNldFwiOlxuICAgIGNhc2UgXCJyZXNpemVcIjpcbiAgICBjYXNlIFwic2Vla2VkXCI6XG4gICAgY2FzZSBcInN1Ym1pdFwiOlxuICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgIGNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpcbiAgICBjYXNlIFwiY2hhbmdlXCI6XG4gICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgIGNhc2UgXCJ0ZXh0SW5wdXRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgIGNhc2UgXCJiZWZvcmVibHVyXCI6XG4gICAgY2FzZSBcImFmdGVyYmx1clwiOlxuICAgIGNhc2UgXCJiZWZvcmVpbnB1dFwiOlxuICAgIGNhc2UgXCJibHVyXCI6XG4gICAgY2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpcbiAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICBjYXNlIFwiaGFzaGNoYW5nZVwiOlxuICAgIGNhc2UgXCJwb3BzdGF0ZVwiOlxuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICBjYXNlIFwic2VsZWN0c3RhcnRcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgXCJkcmFnXCI6XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInNjcm9sbFwiOlxuICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICBjYXNlIFwid2hlZWxcIjpcbiAgICBjYXNlIFwibW91c2VlbnRlclwiOlxuICAgIGNhc2UgXCJtb3VzZWxlYXZlXCI6XG4gICAgY2FzZSBcInBvaW50ZXJlbnRlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybGVhdmVcIjpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICBzd2l0Y2ggKGdldEN1cnJlbnRQcmlvcml0eUxldmVsKCkpIHtcbiAgICAgICAgY2FzZSBJbW1lZGlhdGVQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgY2FzZSBVc2VyQmxvY2tpbmdQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgY2FzZSBOb3JtYWxQcmlvcml0eSQxOlxuICAgICAgICBjYXNlIExvd1ByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgICAgY2FzZSBJZGxlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAzMjtcbiAgfVxufVxudmFyIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMSxcbiAgcXVldWVkRm9jdXMgPSBudWxsLFxuICBxdWV1ZWREcmFnID0gbnVsbCxcbiAgcXVldWVkTW91c2UgPSBudWxsLFxuICBxdWV1ZWRQb2ludGVycyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzID0gbmV3IE1hcCgpLFxuICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMgPSBbXSxcbiAgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzID1cbiAgICBcIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldFwiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApO1xuZnVuY3Rpb24gY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHF1ZXVlZEZvY3VzID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICBxdWV1ZWREcmFnID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgIHF1ZXVlZE1vdXNlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICBxdWV1ZWRQb2ludGVycy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgfVxufVxuZnVuY3Rpb24gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudCxcbiAgYmxvY2tlZE9uLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZXhpc3RpbmdRdWV1ZWRFdmVudCB8fFxuICAgIGV4aXN0aW5nUXVldWVkRXZlbnQubmF0aXZlRXZlbnQgIT09IG5hdGl2ZUV2ZW50XG4gIClcbiAgICByZXR1cm4gKFxuICAgICAgKGV4aXN0aW5nUXVldWVkRXZlbnQgPSB7XG4gICAgICAgIGJsb2NrZWRPbjogYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWU6IGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFnczogZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQ6IG5hdGl2ZUV2ZW50LFxuICAgICAgICB0YXJnZXRDb250YWluZXJzOiBbdGFyZ2V0Q29udGFpbmVyXVxuICAgICAgfSksXG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiZcbiAgICAgICAgKChibG9ja2VkT24gPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oYmxvY2tlZE9uKSksXG4gICAgICBleGlzdGluZ1F1ZXVlZEV2ZW50XG4gICAgKTtcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudC5ldmVudFN5c3RlbUZsYWdzIHw9IGV2ZW50U3lzdGVtRmxhZ3M7XG4gIGJsb2NrZWRPbiA9IGV4aXN0aW5nUXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVyICYmXG4gICAgLTEgPT09IGJsb2NrZWRPbi5pbmRleE9mKHRhcmdldENvbnRhaW5lcikgJiZcbiAgICBibG9ja2VkT24ucHVzaCh0YXJnZXRDb250YWluZXIpO1xuICByZXR1cm4gZXhpc3RpbmdRdWV1ZWRFdmVudDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZEZvY3VzID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRGb2N1cyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkRHJhZyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRHJhZyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkTW91c2UgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZE1vdXNlLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgdmFyIHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZDtcbiAgICAgIHF1ZXVlZFBvaW50ZXJzLnNldChcbiAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZFBvaW50ZXJzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCksXG4gICAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5zZXQoXG4gICAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICAgIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHF1ZXVlZFRhcmdldCkge1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHF1ZXVlZFRhcmdldC50YXJnZXQpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0SW5zdCkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0SW5zdCk7XG4gICAgaWYgKG51bGwgIT09IG5lYXJlc3RNb3VudGVkKVxuICAgICAgaWYgKCgodGFyZ2V0SW5zdCA9IG5lYXJlc3RNb3VudGVkLnRhZyksIDEzID09PSB0YXJnZXRJbnN0KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0YXJnZXRJbnN0ID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCkpLFxuICAgICAgICAgIG51bGwgIT09IHRhcmdldEluc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIHJ1bldpdGhQcmlvcml0eShxdWV1ZWRUYXJnZXQucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgxMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnKSB7XG4gICAgICAgICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgICAgICAgICAgICAgbGFuZSA9IGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUobGFuZSk7XG4gICAgICAgICAgICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIDMgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWRcbiAgICAgICkge1xuICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID1cbiAgICAgICAgICAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkge1xuICBpZiAobnVsbCAhPT0gcXVldWVkRXZlbnQuYmxvY2tlZE9uKSByZXR1cm4gITE7XG4gIGZvciAoXG4gICAgdmFyIHRhcmdldENvbnRhaW5lcnMgPSBxdWV1ZWRFdmVudC50YXJnZXRDb250YWluZXJzO1xuICAgIDAgPCB0YXJnZXRDb250YWluZXJzLmxlbmd0aDtcblxuICApIHtcbiAgICB2YXIgbmV4dEJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQocXVldWVkRXZlbnQubmF0aXZlRXZlbnQpO1xuICAgIGlmIChudWxsID09PSBuZXh0QmxvY2tlZE9uKSB7XG4gICAgICBuZXh0QmxvY2tlZE9uID0gcXVldWVkRXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgICB2YXIgbmF0aXZlRXZlbnRDbG9uZSA9IG5ldyBuZXh0QmxvY2tlZE9uLmNvbnN0cnVjdG9yKFxuICAgICAgICBuZXh0QmxvY2tlZE9uLnR5cGUsXG4gICAgICAgIG5leHRCbG9ja2VkT25cbiAgICAgICk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBuYXRpdmVFdmVudENsb25lO1xuICAgICAgbmV4dEJsb2NrZWRPbi50YXJnZXQuZGlzcGF0Y2hFdmVudChuYXRpdmVFdmVudENsb25lKTtcbiAgICAgIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gKFxuICAgICAgICAodGFyZ2V0Q29udGFpbmVycyA9IGdldEluc3RhbmNlRnJvbU5vZGUobmV4dEJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSB0YXJnZXRDb250YWluZXJzICYmXG4gICAgICAgICAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24odGFyZ2V0Q29udGFpbmVycyksXG4gICAgICAgIChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBuZXh0QmxvY2tlZE9uKSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgdGFyZ2V0Q29udGFpbmVycy5zaGlmdCgpO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcChxdWV1ZWRFdmVudCwga2V5LCBtYXApIHtcbiAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkgJiYgbWFwLmRlbGV0ZShrZXkpO1xufVxuZnVuY3Rpb24gcmVwbGF5VW5ibG9ja2VkRXZlbnRzKCkge1xuICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITE7XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRGb2N1cykgJiZcbiAgICAocXVldWVkRm9jdXMgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRHJhZykgJiZcbiAgICAocXVldWVkRHJhZyA9IG51bGwpO1xuICBudWxsICE9PSBxdWV1ZWRNb3VzZSAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkTW91c2UpICYmXG4gICAgKHF1ZXVlZE1vdXNlID0gbnVsbCk7XG4gIHF1ZXVlZFBvaW50ZXJzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKSB7XG4gIHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkICYmXG4gICAgKChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBudWxsKSxcbiAgICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IHx8XG4gICAgICAoKGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMCksXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICAgICAgICByZXBsYXlVbmJsb2NrZWRFdmVudHNcbiAgICAgICkpKTtcbn1cbnZhciBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBudWxsO1xuZnVuY3Rpb24gc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGZvcm1SZXBsYXlpbmdRdWV1ZSkge1xuICBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgIT09IGZvcm1SZXBsYXlpbmdRdWV1ZSAmJlxuICAgICgobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gZm9ybVJlcGxheWluZ1F1ZXVlKSxcbiAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID09PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAgICAgICAobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybVJlcGxheWluZ1F1ZXVlLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgdmFyIGZvcm0gPSBmb3JtUmVwbGF5aW5nUXVldWVbaV0sXG4gICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbiA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMV0sXG4gICAgICAgICAgICBmb3JtRGF0YSA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMl07XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KHN1Ym1pdHRlck9yQWN0aW9uIHx8IGZvcm0pKVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgICAgICAgICBudWxsICE9PSBmb3JtSW5zdCAmJlxuICAgICAgICAgICAgKGZvcm1SZXBsYXlpbmdRdWV1ZS5zcGxpY2UoaSwgMyksXG4gICAgICAgICAgICAoaSAtPSAzKSxcbiAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgIGZvcm1JbnN0LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBmb3JtLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN1Ym1pdHRlck9yQWN0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uLFxuICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApKTtcbn1cbmZ1bmN0aW9uIHJldHJ5SWZCbG9ja2VkT24odW5ibG9ja2VkKSB7XG4gIGZ1bmN0aW9uIHVuYmxvY2socXVldWVkRXZlbnQpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEV2ZW50LCB1bmJsb2NrZWQpO1xuICB9XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRGb2N1cywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRHJhZywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZE1vdXNlLCB1bmJsb2NrZWQpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKHVuYmxvY2spO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcXVldWVkVGFyZ2V0ID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldO1xuICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJiAocXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGwpO1xuICB9XG4gIGZvciAoXG4gICAgO1xuICAgIDAgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoICYmXG4gICAgKChpID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzWzBdKSwgbnVsbCA9PT0gaS5ibG9ja2VkT24pO1xuXG4gIClcbiAgICBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQoaSksXG4gICAgICBudWxsID09PSBpLmJsb2NrZWRPbiAmJiBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc2hpZnQoKTtcbiAgaSA9ICh1bmJsb2NrZWQub3duZXJEb2N1bWVudCB8fCB1bmJsb2NrZWQpLiQkcmVhY3RGb3JtUmVwbGF5O1xuICBpZiAobnVsbCAhPSBpKVxuICAgIGZvciAocXVldWVkVGFyZ2V0ID0gMDsgcXVldWVkVGFyZ2V0IDwgaS5sZW5ndGg7IHF1ZXVlZFRhcmdldCArPSAzKSB7XG4gICAgICB2YXIgZm9ybSA9IGlbcXVldWVkVGFyZ2V0XSxcbiAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBpW3F1ZXVlZFRhcmdldCArIDFdLFxuICAgICAgICBmb3JtUHJvcHMgPSBmb3JtW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc3VibWl0dGVyT3JBY3Rpb24pXG4gICAgICAgIGZvcm1Qcm9wcyB8fCBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICBlbHNlIGlmIChmb3JtUHJvcHMpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzdWJtaXR0ZXJPckFjdGlvbiAmJiBzdWJtaXR0ZXJPckFjdGlvbi5oYXNBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoZm9ybSA9IHN1Ym1pdHRlck9yQWN0aW9uKSxcbiAgICAgICAgICAgIChmb3JtUHJvcHMgPSBzdWJtaXR0ZXJPckFjdGlvbltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBhY3Rpb24gPSBmb3JtUHJvcHMuZm9ybUFjdGlvbjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChmb3JtKSkgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIGFjdGlvbiA9IGZvcm1Qcm9wcy5hY3Rpb247XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblxuICAgICAgICAgID8gKGlbcXVldWVkVGFyZ2V0ICsgMV0gPSBhY3Rpb24pXG4gICAgICAgICAgOiAoaS5zcGxpY2UocXVldWVkVGFyZ2V0LCAzKSwgKHF1ZXVlZFRhcmdldCAtPSAzKSk7XG4gICAgICAgIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChpKTtcbiAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBSZWFjdERPTVJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUucmVuZGVyID0gUmVhY3RET01Sb290LnByb3RvdHlwZS5yZW5kZXIgPVxuICBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCA9PT0gcm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDkpKTtcbiAgICB2YXIgY3VycmVudCA9IHJvb3QuY3VycmVudCxcbiAgICAgIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgIHVwZGF0ZUNvbnRhaW5lckltcGwoY3VycmVudCwgbGFuZSwgY2hpbGRyZW4sIHJvb3QsIG51bGwsIG51bGwpO1xuICB9O1xuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bm1vdW50ID0gUmVhY3RET01Sb290LnByb3RvdHlwZS51bm1vdW50ID1cbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBudWxsO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgICAgIHVwZGF0ZUNvbnRhaW5lckltcGwocm9vdC5jdXJyZW50LCAyLCBudWxsLCByb290LCBudWxsLCBudWxsKTtcbiAgICAgIGZsdXNoU3luY1dvcmskMSgpO1xuICAgICAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gbnVsbDtcbiAgICB9XG4gIH07XG5mdW5jdGlvbiBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdXBkYXRlUHJpb3JpdHkgPSByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbiAgICB0YXJnZXQgPSB7IGJsb2NrZWRPbjogbnVsbCwgdGFyZ2V0OiB0YXJnZXQsIHByaW9yaXR5OiB1cGRhdGVQcmlvcml0eSB9O1xuICAgIGZvciAoXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICAgMCAhPT0gdXBkYXRlUHJpb3JpdHkgJiZcbiAgICAgIHVwZGF0ZVByaW9yaXR5IDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldLnByaW9yaXR5O1xuICAgICAgaSsrXG4gICAgKTtcbiAgICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc3BsaWNlKGksIDAsIHRhcmdldCk7XG4gICAgMCA9PT0gaSAmJiBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQodGFyZ2V0KTtcbiAgfVxufTtcbnZhciBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE3ODUgPSBSZWFjdC52ZXJzaW9uO1xuaWYgKFxuICBcIjE5LjEuMFwiICE9PVxuICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE3ODVcbilcbiAgdGhyb3cgRXJyb3IoXG4gICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZShcbiAgICAgIDUyNyxcbiAgICAgIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTc4NSxcbiAgICAgIFwiMTkuMS4wXCJcbiAgICApXG4gICk7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5maW5kRE9NTm9kZSA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgdmFyIGZpYmVyID0gY29tcG9uZW50T3JFbGVtZW50Ll9yZWFjdEludGVybmFscztcbiAgaWYgKHZvaWQgMCA9PT0gZmliZXIpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlcilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgY29tcG9uZW50T3JFbGVtZW50ID0gT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KS5qb2luKFwiLFwiKTtcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI2OCwgY29tcG9uZW50T3JFbGVtZW50KSk7XG4gIH1cbiAgY29tcG9uZW50T3JFbGVtZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgIT09IGNvbXBvbmVudE9yRWxlbWVudFxuICAgICAgPyBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwoY29tcG9uZW50T3JFbGVtZW50KVxuICAgICAgOiBudWxsO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgPT09IGNvbXBvbmVudE9yRWxlbWVudCA/IG51bGwgOiBjb21wb25lbnRPckVsZW1lbnQuc3RhdGVOb2RlO1xuICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xufTtcbnZhciBpbnRlcm5hbHMkanNjb21wJGlubGluZV8yMjU2ID0ge1xuICBidW5kbGVUeXBlOiAwLFxuICB2ZXJzaW9uOiBcIjE5LjEuMFwiLFxuICByZW5kZXJlclBhY2thZ2VOYW1lOiBcInJlYWN0LWRvbVwiLFxuICBjdXJyZW50RGlzcGF0Y2hlclJlZjogUmVhY3RTaGFyZWRJbnRlcm5hbHMsXG4gIHJlY29uY2lsZXJWZXJzaW9uOiBcIjE5LjEuMFwiXG59O1xuaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pIHtcbiAgdmFyIGhvb2skanNjb21wJGlubGluZV8yMjU3ID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoXG4gICAgIWhvb2skanNjb21wJGlubGluZV8yMjU3LmlzRGlzYWJsZWQgJiZcbiAgICBob29rJGpzY29tcCRpbmxpbmVfMjI1Ny5zdXBwb3J0c0ZpYmVyXG4gIClcbiAgICB0cnkge1xuICAgICAgKHJlbmRlcmVySUQgPSBob29rJGpzY29tcCRpbmxpbmVfMjI1Ny5pbmplY3QoXG4gICAgICAgIGludGVybmFscyRqc2NvbXAkaW5saW5lXzIyNTZcbiAgICAgICkpLFxuICAgICAgICAoaW5qZWN0ZWRIb29rID0gaG9vayRqc2NvbXAkaW5saW5lXzIyNTcpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbn1cbmV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSk7XG4gIG9wdGlvbnMgPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITEsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIG51bGxcbiAgKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gb3B0aW9ucy5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhjb250YWluZXIpO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NUm9vdChvcHRpb25zKTtcbn07XG5leHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgaW5pdGlhbENoaWxkcmVuLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICB2YXIgaXNTdHJpY3RNb2RlID0gITEsXG4gICAgaWRlbnRpZmllclByZWZpeCA9IFwiXCIsXG4gICAgb25VbmNhdWdodEVycm9yID0gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yID0gZGVmYXVsdE9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yID0gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gbnVsbCxcbiAgICBmb3JtU3RhdGUgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuZm9ybVN0YXRlICYmIChmb3JtU3RhdGUgPSBvcHRpb25zLmZvcm1TdGF0ZSkpO1xuICBpbml0aWFsQ2hpbGRyZW4gPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITAsXG4gICAgaW5pdGlhbENoaWxkcmVuLFxuICAgIG51bGwgIT0gb3B0aW9ucyA/IG9wdGlvbnMgOiBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIGZvcm1TdGF0ZVxuICApO1xuICBpbml0aWFsQ2hpbGRyZW4uY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKG51bGwpO1xuICBvcHRpb25zID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGlzU3RyaWN0TW9kZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGlzU3RyaWN0TW9kZSA9IGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUoaXNTdHJpY3RNb2RlKTtcbiAgaWRlbnRpZmllclByZWZpeCA9IGNyZWF0ZVVwZGF0ZShpc1N0cmljdE1vZGUpO1xuICBpZGVudGlmaWVyUHJlZml4LmNhbGxiYWNrID0gbnVsbDtcbiAgZW5xdWV1ZVVwZGF0ZShvcHRpb25zLCBpZGVudGlmaWVyUHJlZml4LCBpc1N0cmljdE1vZGUpO1xuICBvcHRpb25zID0gaXNTdHJpY3RNb2RlO1xuICBpbml0aWFsQ2hpbGRyZW4uY3VycmVudC5sYW5lcyA9IG9wdGlvbnM7XG4gIG1hcmtSb290VXBkYXRlZCQxKGluaXRpYWxDaGlsZHJlbiwgb3B0aW9ucyk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChpbml0aWFsQ2hpbGRyZW4pO1xuICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBpbml0aWFsQ2hpbGRyZW4uY3VycmVudDtcbiAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMoY29udGFpbmVyKTtcbiAgcmV0dXJuIG5ldyBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW5pdGlhbENoaWxkcmVuKTtcbn07XG5leHBvcnRzLnZlcnNpb24gPSBcIjE5LjEuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gcHVzaChoZWFwLCBub2RlKSB7XG4gIHZhciBpbmRleCA9IGhlYXAubGVuZ3RoO1xuICBoZWFwLnB1c2gobm9kZSk7XG4gIGE6IGZvciAoOyAwIDwgaW5kZXg7ICkge1xuICAgIHZhciBwYXJlbnRJbmRleCA9IChpbmRleCAtIDEpID4+PiAxLFxuICAgICAgcGFyZW50ID0gaGVhcFtwYXJlbnRJbmRleF07XG4gICAgaWYgKDAgPCBjb21wYXJlKHBhcmVudCwgbm9kZSkpXG4gICAgICAoaGVhcFtwYXJlbnRJbmRleF0gPSBub2RlKSwgKGhlYXBbaW5kZXhdID0gcGFyZW50KSwgKGluZGV4ID0gcGFyZW50SW5kZXgpO1xuICAgIGVsc2UgYnJlYWsgYTtcbiAgfVxufVxuZnVuY3Rpb24gcGVlayhoZWFwKSB7XG4gIHJldHVybiAwID09PSBoZWFwLmxlbmd0aCA/IG51bGwgOiBoZWFwWzBdO1xufVxuZnVuY3Rpb24gcG9wKGhlYXApIHtcbiAgaWYgKDAgPT09IGhlYXAubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgdmFyIGZpcnN0ID0gaGVhcFswXSxcbiAgICBsYXN0ID0gaGVhcC5wb3AoKTtcbiAgaWYgKGxhc3QgIT09IGZpcnN0KSB7XG4gICAgaGVhcFswXSA9IGxhc3Q7XG4gICAgYTogZm9yIChcbiAgICAgIHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGhlYXAubGVuZ3RoLCBoYWxmTGVuZ3RoID0gbGVuZ3RoID4+PiAxO1xuICAgICAgaW5kZXggPCBoYWxmTGVuZ3RoO1xuXG4gICAgKSB7XG4gICAgICB2YXIgbGVmdEluZGV4ID0gMiAqIChpbmRleCArIDEpIC0gMSxcbiAgICAgICAgbGVmdCA9IGhlYXBbbGVmdEluZGV4XSxcbiAgICAgICAgcmlnaHRJbmRleCA9IGxlZnRJbmRleCArIDEsXG4gICAgICAgIHJpZ2h0ID0gaGVhcFtyaWdodEluZGV4XTtcbiAgICAgIGlmICgwID4gY29tcGFyZShsZWZ0LCBsYXN0KSlcbiAgICAgICAgcmlnaHRJbmRleCA8IGxlbmd0aCAmJiAwID4gY29tcGFyZShyaWdodCwgbGVmdClcbiAgICAgICAgICA/ICgoaGVhcFtpbmRleF0gPSByaWdodCksXG4gICAgICAgICAgICAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gcmlnaHRJbmRleCkpXG4gICAgICAgICAgOiAoKGhlYXBbaW5kZXhdID0gbGVmdCksXG4gICAgICAgICAgICAoaGVhcFtsZWZ0SW5kZXhdID0gbGFzdCksXG4gICAgICAgICAgICAoaW5kZXggPSBsZWZ0SW5kZXgpKTtcbiAgICAgIGVsc2UgaWYgKHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxhc3QpKVxuICAgICAgICAoaGVhcFtpbmRleF0gPSByaWdodCksIChoZWFwW3JpZ2h0SW5kZXhdID0gbGFzdCksIChpbmRleCA9IHJpZ2h0SW5kZXgpO1xuICAgICAgZWxzZSBicmVhayBhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgdmFyIGRpZmYgPSBhLnNvcnRJbmRleCAtIGIuc29ydEluZGV4O1xuICByZXR1cm4gMCAhPT0gZGlmZiA/IGRpZmYgOiBhLmlkIC0gYi5pZDtcbn1cbmV4cG9ydHMudW5zdGFibGVfbm93ID0gdm9pZCAwO1xuaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZSAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgdmFyIGxvY2FsUGVyZm9ybWFuY2UgPSBwZXJmb3JtYW5jZTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsUGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgbG9jYWxEYXRlID0gRGF0ZSxcbiAgICBpbml0aWFsVGltZSA9IGxvY2FsRGF0ZS5ub3coKTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsRGF0ZS5ub3coKSAtIGluaXRpYWxUaW1lO1xuICB9O1xufVxudmFyIHRhc2tRdWV1ZSA9IFtdLFxuICB0aW1lclF1ZXVlID0gW10sXG4gIHRhc2tJZENvdW50ZXIgPSAxLFxuICBjdXJyZW50VGFzayA9IG51bGwsXG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gMyxcbiAgaXNQZXJmb3JtaW5nV29yayA9ICExLFxuICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExLFxuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEsXG4gIG5lZWRzUGFpbnQgPSAhMSxcbiAgbG9jYWxTZXRUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc2V0VGltZW91dCA/IHNldFRpbWVvdXQgOiBudWxsLFxuICBsb2NhbENsZWFyVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IG51bGwsXG4gIGxvY2FsU2V0SW1tZWRpYXRlID0gXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHNldEltbWVkaWF0ZSA/IHNldEltbWVkaWF0ZSA6IG51bGw7XG5mdW5jdGlvbiBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKSB7XG4gIGZvciAodmFyIHRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTsgbnVsbCAhPT0gdGltZXI7ICkge1xuICAgIGlmIChudWxsID09PSB0aW1lci5jYWxsYmFjaykgcG9wKHRpbWVyUXVldWUpO1xuICAgIGVsc2UgaWYgKHRpbWVyLnN0YXJ0VGltZSA8PSBjdXJyZW50VGltZSlcbiAgICAgIHBvcCh0aW1lclF1ZXVlKSxcbiAgICAgICAgKHRpbWVyLnNvcnRJbmRleCA9IHRpbWVyLmV4cGlyYXRpb25UaW1lKSxcbiAgICAgICAgcHVzaCh0YXNrUXVldWUsIHRpbWVyKTtcbiAgICBlbHNlIGJyZWFrO1xuICAgIHRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlVGltZW91dChjdXJyZW50VGltZSkge1xuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITE7XG4gIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICBpZiAoIWlzSG9zdENhbGxiYWNrU2NoZWR1bGVkKVxuICAgIGlmIChudWxsICE9PSBwZWVrKHRhc2tRdWV1ZSkpXG4gICAgICAoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksXG4gICAgICAgIGlzTWVzc2FnZUxvb3BSdW5uaW5nIHx8XG4gICAgICAgICAgKChpc01lc3NhZ2VMb29wUnVubmluZyA9ICEwKSwgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmlyc3RUaW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChoYW5kbGVUaW1lb3V0LCBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lKTtcbiAgICB9XG59XG52YXIgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSxcbiAgdGFza1RpbWVvdXRJRCA9IC0xLFxuICBmcmFtZUludGVydmFsID0gNSxcbiAgc3RhcnRUaW1lID0gLTE7XG5mdW5jdGlvbiBzaG91bGRZaWVsZFRvSG9zdCgpIHtcbiAgcmV0dXJuIG5lZWRzUGFpbnRcbiAgICA/ICEwXG4gICAgOiBleHBvcnRzLnVuc3RhYmxlX25vdygpIC0gc3RhcnRUaW1lIDwgZnJhbWVJbnRlcnZhbFxuICAgICAgPyAhMVxuICAgICAgOiAhMDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpIHtcbiAgbmVlZHNQYWludCA9ICExO1xuICBpZiAoaXNNZXNzYWdlTG9vcFJ1bm5pbmcpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgIHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgIHZhciBoYXNNb3JlV29yayA9ICEwO1xuICAgIHRyeSB7XG4gICAgICBhOiB7XG4gICAgICAgIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITE7XG4gICAgICAgIGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgJiZcbiAgICAgICAgICAoKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMSksXG4gICAgICAgICAgbG9jYWxDbGVhclRpbWVvdXQodGFza1RpbWVvdXRJRCksXG4gICAgICAgICAgKHRhc2tUaW1lb3V0SUQgPSAtMSkpO1xuICAgICAgICBpc1BlcmZvcm1pbmdXb3JrID0gITA7XG4gICAgICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiOiB7XG4gICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIGN1cnJlbnRUYXNrID0gcGVlayh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICBudWxsICE9PSBjdXJyZW50VGFzayAmJlxuICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmV4cGlyYXRpb25UaW1lID4gY3VycmVudFRpbWUgJiYgc2hvdWxkWWllbGRUb0hvc3QoKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY3VycmVudFRhc2suY2FsbGJhY2s7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRUYXNrLnByaW9yaXR5TGV2ZWw7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvbkNhbGxiYWNrID0gY2FsbGJhY2soXG4gICAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2suY2FsbGJhY2sgPSBjb250aW51YXRpb25DYWxsYmFjaztcbiAgICAgICAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgICAgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrID09PSBwZWVrKHRhc2tRdWV1ZSkgJiYgcG9wKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBwb3AodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgY3VycmVudFRhc2sgPSBwZWVrKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudFRhc2spIGhhc01vcmVXb3JrID0gITA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0VGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICAgICAgICAgICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgICAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgaGFuZGxlVGltZW91dCxcbiAgICAgICAgICAgICAgICAgIGZpcnN0VGltZXIuc3RhcnRUaW1lIC0gY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBoYXNNb3JlV29yayA9ICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIChjdXJyZW50VGFzayA9IG51bGwpLFxuICAgICAgICAgICAgKGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsKSxcbiAgICAgICAgICAgIChpc1BlcmZvcm1pbmdXb3JrID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIGhhc01vcmVXb3JrID0gdm9pZCAwO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBoYXNNb3JlV29ya1xuICAgICAgICA/IHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKClcbiAgICAgICAgOiAoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSk7XG4gICAgfVxuICB9XG59XG52YXIgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmU7XG5pZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbG9jYWxTZXRJbW1lZGlhdGUpXG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvY2FsU2V0SW1tZWRpYXRlKHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSk7XG4gIH07XG5lbHNlIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgTWVzc2FnZUNoYW5uZWwpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKSxcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBwZXJmb3JtV29ya1VudGlsRGVhZGxpbmU7XG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIHBvcnQucG9zdE1lc3NhZ2UobnVsbCk7XG4gIH07XG59IGVsc2VcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTZXRUaW1lb3V0KHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSwgMCk7XG4gIH07XG5mdW5jdGlvbiByZXF1ZXN0SG9zdFRpbWVvdXQoY2FsbGJhY2ssIG1zKSB7XG4gIHRhc2tUaW1lb3V0SUQgPSBsb2NhbFNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBtcyk7XG59XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eSA9IDU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5ID0gMTtcbmV4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHkgPSA0O1xuZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSA9IDM7XG5leHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZyA9IG51bGw7XG5leHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5ID0gMjtcbmV4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAodGFzaykge1xuICB0YXNrLmNhbGxiYWNrID0gbnVsbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlID0gZnVuY3Rpb24gKGZwcykge1xuICAwID4gZnBzIHx8IDEyNSA8IGZwc1xuICAgID8gY29uc29sZS5lcnJvcihcbiAgICAgICAgXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIlxuICAgICAgKVxuICAgIDogKGZyYW1lSW50ZXJ2YWwgPSAwIDwgZnBzID8gTWF0aC5mbG9vcigxZTMgLyBmcHMpIDogNSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGN1cnJlbnRQcmlvcml0eUxldmVsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dCA9IGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgc3dpdGNoIChjdXJyZW50UHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHByaW9yaXR5TGV2ZWwgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgfVxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludCA9IGZ1bmN0aW9uICgpIHtcbiAgbmVlZHNQYWludCA9ICEwO1xufTtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHByaW9yaXR5TGV2ZWwsIGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA1OlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSAzO1xuICB9XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmlvcml0eUxldmVsO1xuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgcHJpb3JpdHlMZXZlbCxcbiAgY2FsbGJhY2ssXG4gIG9wdGlvbnNcbikge1xuICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zXG4gICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmRlbGF5KSxcbiAgICAgIChvcHRpb25zID1cbiAgICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgMCA8IG9wdGlvbnNcbiAgICAgICAgICA/IGN1cnJlbnRUaW1lICsgb3B0aW9uc1xuICAgICAgICAgIDogY3VycmVudFRpbWUpKVxuICAgIDogKG9wdGlvbnMgPSBjdXJyZW50VGltZSk7XG4gIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB0aW1lb3V0ID0gLTE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB0aW1lb3V0ID0gMjUwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdGltZW91dCA9IDEwNzM3NDE4MjM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB0aW1lb3V0ID0gMWU0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRpbWVvdXQgPSA1ZTM7XG4gIH1cbiAgdGltZW91dCA9IG9wdGlvbnMgKyB0aW1lb3V0O1xuICBwcmlvcml0eUxldmVsID0ge1xuICAgIGlkOiB0YXNrSWRDb3VudGVyKyssXG4gICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgc3RhcnRUaW1lOiBvcHRpb25zLFxuICAgIGV4cGlyYXRpb25UaW1lOiB0aW1lb3V0LFxuICAgIHNvcnRJbmRleDogLTFcbiAgfTtcbiAgb3B0aW9ucyA+IGN1cnJlbnRUaW1lXG4gICAgPyAoKHByaW9yaXR5TGV2ZWwuc29ydEluZGV4ID0gb3B0aW9ucyksXG4gICAgICBwdXNoKHRpbWVyUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgbnVsbCA9PT0gcGVlayh0YXNrUXVldWUpICYmXG4gICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IHBlZWsodGltZXJRdWV1ZSkgJiZcbiAgICAgICAgKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWRcbiAgICAgICAgICA/IChsb2NhbENsZWFyVGltZW91dCh0YXNrVGltZW91dElEKSwgKHRhc2tUaW1lb3V0SUQgPSAtMSkpXG4gICAgICAgICAgOiAoaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICEwKSxcbiAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIG9wdGlvbnMgLSBjdXJyZW50VGltZSkpKVxuICAgIDogKChwcmlvcml0eUxldmVsLnNvcnRJbmRleCA9IHRpbWVvdXQpLFxuICAgICAgcHVzaCh0YXNrUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgfHxcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayB8fFxuICAgICAgICAoKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLFxuICAgICAgICBpc01lc3NhZ2VMb29wUnVubmluZyB8fFxuICAgICAgICAgICgoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMCksIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKCkpKSk7XG4gIHJldHVybiBwcmlvcml0eUxldmVsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQgPSBzaG91bGRZaWVsZFRvSG9zdDtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBwYXJlbnRQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcGFyZW50UHJpb3JpdHlMZXZlbDtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICAgIH1cbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksXG4gIFJFQUNUX0NPTlNVTUVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29uc3VtZXJcIiksXG4gIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLFxuICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLFxuICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksXG4gIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobnVsbCA9PT0gbWF5YmVJdGVyYWJsZSB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gIG1heWJlSXRlcmFibGUgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xufVxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICExO1xuICAgIH0sXG4gICAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uICgpIHt9XG4gIH0sXG4gIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sXG4gIGVtcHR5T2JqZWN0ID0ge307XG5mdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmIChcbiAgICBcIm9iamVjdFwiICE9PSB0eXBlb2YgcGFydGlhbFN0YXRlICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcGFydGlhbFN0YXRlICYmXG4gICAgbnVsbCAhPSBwYXJ0aWFsU3RhdGVcbiAgKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJ0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIlxuICAgICk7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlLCBjYWxsYmFjaywgXCJzZXRTdGF0ZVwiKTtcbn07XG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgY2FsbGJhY2ssIFwiZm9yY2VVcGRhdGVcIik7XG59O1xuZnVuY3Rpb24gQ29tcG9uZW50RHVtbXkoKSB7fVxuQ29tcG9uZW50RHVtbXkucHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbmZ1bmN0aW9uIFB1cmVDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cbnZhciBwdXJlQ29tcG9uZW50UHJvdG90eXBlID0gKFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCkpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFB1cmVDb21wb25lbnQ7XG5hc3NpZ24ocHVyZUNvbXBvbmVudFByb3RvdHlwZSwgQ29tcG9uZW50LnByb3RvdHlwZSk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gITA7XG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICBSZWFjdFNoYXJlZEludGVybmFscyA9IHsgSDogbnVsbCwgQTogbnVsbCwgVDogbnVsbCwgUzogbnVsbCwgVjogbnVsbCB9LFxuICBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICBzZWxmID0gcHJvcHMucmVmO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHZvaWQgMCAhPT0gc2VsZiA/IHNlbGYgOiBudWxsLFxuICAgIHByb3BzOiBwcm9wc1xuICB9O1xufVxuZnVuY3Rpb24gY2xvbmVBbmRSZXBsYWNlS2V5KG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICByZXR1cm4gUmVhY3RFbGVtZW50KFxuICAgIG9sZEVsZW1lbnQudHlwZSxcbiAgICBuZXdLZXksXG4gICAgdm9pZCAwLFxuICAgIHZvaWQgMCxcbiAgICB2b2lkIDAsXG4gICAgb2xkRWxlbWVudC5wcm9wc1xuICApO1xufVxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiAoXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9iamVjdCAmJlxuICAgIG51bGwgIT09IG9iamVjdCAmJlxuICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG4gICk7XG59XG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVyTG9va3VwID0geyBcIj1cIjogXCI9MFwiLCBcIjpcIjogXCI9MlwiIH07XG4gIHJldHVybiAoXG4gICAgXCIkXCIgK1xuICAgIGtleS5yZXBsYWNlKC9bPTpdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICAgIH0pXG4gICk7XG59XG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZ2V0RWxlbWVudEtleShlbGVtZW50LCBpbmRleCkge1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVsZW1lbnQgJiYgbnVsbCAhPT0gZWxlbWVudCAmJiBudWxsICE9IGVsZW1lbnQua2V5XG4gICAgPyBlc2NhcGUoXCJcIiArIGVsZW1lbnQua2V5KVxuICAgIDogaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuZnVuY3Rpb24gbm9vcCQxKCkge31cbmZ1bmN0aW9uIHJlc29sdmVUaGVuYWJsZSh0aGVuYWJsZSkge1xuICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICBkZWZhdWx0OlxuICAgICAgc3dpdGNoIChcbiAgICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGVuYWJsZS5zdGF0dXNcbiAgICAgICAgICA/IHRoZW5hYmxlLnRoZW4obm9vcCQxLCBub29wJDEpXG4gICAgICAgICAgOiAoKHRoZW5hYmxlLnN0YXR1cyA9IFwicGVuZGluZ1wiKSxcbiAgICAgICAgICAgIHRoZW5hYmxlLnRoZW4oXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChmdWxmaWxsZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICgodGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIiksXG4gICAgICAgICAgICAgICAgICAodGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZSkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksICh0aGVuYWJsZS5yZWFzb24gPSBlcnJvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApKSxcbiAgICAgICAgdGhlbmFibGUuc3RhdHVzKVxuICAgICAgKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgIH1cbiAgfVxuICB0aHJvdyB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIG1hcEludG9BcnJheShjaGlsZHJlbiwgYXJyYXksIGVzY2FwZWRQcmVmaXgsIG5hbWVTb0ZhciwgY2FsbGJhY2spIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlIHx8IFwiYm9vbGVhblwiID09PSB0eXBlKSBjaGlsZHJlbiA9IG51bGw7XG4gIHZhciBpbnZva2VDYWxsYmFjayA9ICExO1xuICBpZiAobnVsbCA9PT0gY2hpbGRyZW4pIGludm9rZUNhbGxiYWNrID0gITA7XG4gIGVsc2VcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIHN3aXRjaCAoY2hpbGRyZW4uJCR0eXBlb2YpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGludm9rZUNhbGxiYWNrID0gY2hpbGRyZW4uX2luaXQpLFxuICAgICAgICAgICAgICBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soY2hpbGRyZW4uX3BheWxvYWQpLFxuICAgICAgICAgICAgICAgIGFycmF5LFxuICAgICAgICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gIGlmIChpbnZva2VDYWxsYmFjaylcbiAgICByZXR1cm4gKFxuICAgICAgKGNhbGxiYWNrID0gY2FsbGJhY2soY2hpbGRyZW4pKSxcbiAgICAgIChpbnZva2VDYWxsYmFjayA9XG4gICAgICAgIFwiXCIgPT09IG5hbWVTb0ZhciA/IFwiLlwiICsgZ2V0RWxlbWVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIpLFxuICAgICAgaXNBcnJheUltcGwoY2FsbGJhY2spXG4gICAgICAgID8gKChlc2NhcGVkUHJlZml4ID0gXCJcIiksXG4gICAgICAgICAgbnVsbCAhPSBpbnZva2VDYWxsYmFjayAmJlxuICAgICAgICAgICAgKGVzY2FwZWRQcmVmaXggPVxuICAgICAgICAgICAgICBpbnZva2VDYWxsYmFjay5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCBcIiQmL1wiKSArIFwiL1wiKSxcbiAgICAgICAgICBtYXBJbnRvQXJyYXkoY2FsbGJhY2ssIGFycmF5LCBlc2NhcGVkUHJlZml4LCBcIlwiLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSkpXG4gICAgICAgIDogbnVsbCAhPSBjYWxsYmFjayAmJlxuICAgICAgICAgIChpc1ZhbGlkRWxlbWVudChjYWxsYmFjaykgJiZcbiAgICAgICAgICAgIChjYWxsYmFjayA9IGNsb25lQW5kUmVwbGFjZUtleShcbiAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgIGVzY2FwZWRQcmVmaXggK1xuICAgICAgICAgICAgICAgIChudWxsID09IGNhbGxiYWNrLmtleSB8fFxuICAgICAgICAgICAgICAgIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5rZXkgPT09IGNhbGxiYWNrLmtleSlcbiAgICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGNhbGxiYWNrLmtleSkucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICBcIiQmL1wiXG4gICAgICAgICAgICAgICAgICAgICkgKyBcIi9cIikgK1xuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICBhcnJheS5wdXNoKGNhbGxiYWNrKSksXG4gICAgICAxXG4gICAgKTtcbiAgaW52b2tlQ2FsbGJhY2sgPSAwO1xuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBcIlwiID09PSBuYW1lU29GYXIgPyBcIi5cIiA6IG5hbWVTb0ZhciArIFwiOlwiO1xuICBpZiAoaXNBcnJheUltcGwoY2hpbGRyZW4pKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspXG4gICAgICAobmFtZVNvRmFyID0gY2hpbGRyZW5baV0pLFxuICAgICAgICAodHlwZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShuYW1lU29GYXIsIGkpKSxcbiAgICAgICAgKGludm9rZUNhbGxiYWNrICs9IG1hcEludG9BcnJheShcbiAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgYXJyYXksXG4gICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkpO1xuICBlbHNlIGlmICgoKGkgPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKSksIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGkpKVxuICAgIGZvciAoXG4gICAgICBjaGlsZHJlbiA9IGkuY2FsbChjaGlsZHJlbiksIGkgPSAwO1xuICAgICAgIShuYW1lU29GYXIgPSBjaGlsZHJlbi5uZXh0KCkpLmRvbmU7XG5cbiAgICApXG4gICAgICAobmFtZVNvRmFyID0gbmFtZVNvRmFyLnZhbHVlKSxcbiAgICAgICAgKHR5cGUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkobmFtZVNvRmFyLCBpKyspKSxcbiAgICAgICAgKGludm9rZUNhbGxiYWNrICs9IG1hcEludG9BcnJheShcbiAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgYXJyYXksXG4gICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkpO1xuICBlbHNlIGlmIChcIm9iamVjdFwiID09PSB0eXBlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNoaWxkcmVuLnRoZW4pXG4gICAgICByZXR1cm4gbWFwSW50b0FycmF5KFxuICAgICAgICByZXNvbHZlVGhlbmFibGUoY2hpbGRyZW4pLFxuICAgICAgICBhcnJheSxcbiAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICBjYWxsYmFja1xuICAgICAgKTtcbiAgICBhcnJheSA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIgK1xuICAgICAgICAoXCJbb2JqZWN0IE9iamVjdF1cIiA9PT0gYXJyYXlcbiAgICAgICAgICA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbihcIiwgXCIpICsgXCJ9XCJcbiAgICAgICAgICA6IGFycmF5KSArXG4gICAgICAgIFwiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaW52b2tlQ2FsbGJhY2s7XG59XG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAobnVsbCA9PSBjaGlsZHJlbikgcmV0dXJuIGNoaWxkcmVuO1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgY291bnQgPSAwO1xuICBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIHJlc3VsdCwgXCJcIiwgXCJcIiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgY291bnQrKyk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbGF6eUluaXRpYWxpemVyKHBheWxvYWQpIHtcbiAgaWYgKC0xID09PSBwYXlsb2FkLl9zdGF0dXMpIHtcbiAgICB2YXIgY3RvciA9IHBheWxvYWQuX3Jlc3VsdDtcbiAgICBjdG9yID0gY3RvcigpO1xuICAgIGN0b3IudGhlbihcbiAgICAgIGZ1bmN0aW9uIChtb2R1bGVPYmplY3QpIHtcbiAgICAgICAgaWYgKDAgPT09IHBheWxvYWQuX3N0YXR1cyB8fCAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKVxuICAgICAgICAgIChwYXlsb2FkLl9zdGF0dXMgPSAxKSwgKHBheWxvYWQuX3Jlc3VsdCA9IG1vZHVsZU9iamVjdCk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICgwID09PSBwYXlsb2FkLl9zdGF0dXMgfHwgLTEgPT09IHBheWxvYWQuX3N0YXR1cylcbiAgICAgICAgICAocGF5bG9hZC5fc3RhdHVzID0gMiksIChwYXlsb2FkLl9yZXN1bHQgPSBlcnJvcik7XG4gICAgICB9XG4gICAgKTtcbiAgICAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzICYmICgocGF5bG9hZC5fc3RhdHVzID0gMCksIChwYXlsb2FkLl9yZXN1bHQgPSBjdG9yKSk7XG4gIH1cbiAgaWYgKDEgPT09IHBheWxvYWQuX3N0YXR1cykgcmV0dXJuIHBheWxvYWQuX3Jlc3VsdC5kZWZhdWx0O1xuICB0aHJvdyBwYXlsb2FkLl9yZXN1bHQ7XG59XG52YXIgcmVwb3J0R2xvYmFsRXJyb3IgPVxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvclxuICAgID8gcmVwb3J0RXJyb3JcbiAgICA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5FcnJvckV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyB3aW5kb3cuRXJyb3JFdmVudChcImVycm9yXCIsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgZXJyb3IgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZXJyb3IgJiZcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcm9jZXNzLmVtaXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH07XG5mdW5jdGlvbiBub29wKCkge31cbmV4cG9ydHMuQ2hpbGRyZW4gPSB7XG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIChjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gICAgbWFwQ2hpbGRyZW4oXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yRWFjaEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0sXG4gICAgICBmb3JFYWNoQ29udGV4dFxuICAgICk7XG4gIH0sXG4gIGNvdW50OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgIG4rKztcbiAgICB9KTtcbiAgICByZXR1cm4gbjtcbiAgfSxcbiAgdG9BcnJheTogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSkgfHwgW11cbiAgICApO1xuICB9LFxuICBvbmx5OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSlcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiXG4gICAgICApO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxufTtcbmV4cG9ydHMuQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLlByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbmV4cG9ydHMuUHVyZUNvbXBvbmVudCA9IFB1cmVDb21wb25lbnQ7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG5leHBvcnRzLl9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzO1xuZXhwb3J0cy5fX0NPTVBJTEVSX1JVTlRJTUUgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgYzogZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VNZW1vQ2FjaGUoc2l6ZSk7XG4gIH1cbn07XG5leHBvcnRzLmNhY2hlID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICBpZiAobnVsbCA9PT0gZWxlbWVudCB8fCB2b2lkIDAgPT09IGVsZW1lbnQpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcIlRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIgKyBlbGVtZW50ICsgXCIuXCJcbiAgICApO1xuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpLFxuICAgIGtleSA9IGVsZW1lbnQua2V5LFxuICAgIG93bmVyID0gdm9pZCAwO1xuICBpZiAobnVsbCAhPSBjb25maWcpXG4gICAgZm9yIChwcm9wTmFtZSBpbiAodm9pZCAwICE9PSBjb25maWcucmVmICYmIChvd25lciA9IHZvaWQgMCksXG4gICAgdm9pZCAwICE9PSBjb25maWcua2V5ICYmIChrZXkgPSBcIlwiICsgY29uZmlnLmtleSksXG4gICAgY29uZmlnKSlcbiAgICAgICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpIHx8XG4gICAgICAgIFwia2V5XCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIFwiX19zZWxmXCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIFwiX19zb3VyY2VcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgKFwicmVmXCIgPT09IHByb3BOYW1lICYmIHZvaWQgMCA9PT0gY29uZmlnLnJlZikgfHxcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICB2YXIgcHJvcE5hbWUgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKDEgPT09IHByb3BOYW1lKSBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICBlbHNlIGlmICgxIDwgcHJvcE5hbWUpIHtcbiAgICBmb3IgKHZhciBjaGlsZEFycmF5ID0gQXJyYXkocHJvcE5hbWUpLCBpID0gMDsgaSA8IHByb3BOYW1lOyBpKyspXG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsIGtleSwgdm9pZCAwLCB2b2lkIDAsIG93bmVyLCBwcm9wcyk7XG59O1xuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gZnVuY3Rpb24gKGRlZmF1bHRWYWx1ZSkge1xuICBkZWZhdWx0VmFsdWUgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBfY3VycmVudFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IGRlZmF1bHRWYWx1ZSxcbiAgICBfdGhyZWFkQ291bnQ6IDAsXG4gICAgUHJvdmlkZXI6IG51bGwsXG4gICAgQ29uc3VtZXI6IG51bGxcbiAgfTtcbiAgZGVmYXVsdFZhbHVlLlByb3ZpZGVyID0gZGVmYXVsdFZhbHVlO1xuICBkZWZhdWx0VmFsdWUuQ29uc3VtZXIgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlNVTUVSX1RZUEUsXG4gICAgX2NvbnRleHQ6IGRlZmF1bHRWYWx1ZVxuICB9O1xuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufTtcbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZSxcbiAgICBwcm9wcyA9IHt9LFxuICAgIGtleSA9IG51bGw7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSwgY29uZmlnKSlcbiAgICAgIGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiZcbiAgICAgICAgXCJrZXlcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgXCJfX3NlbGZcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgXCJfX3NvdXJjZVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gY2hpbGRyZW5MZW5ndGgpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBjaGlsZHJlbkxlbmd0aCkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCksIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcylcbiAgICBmb3IgKHByb3BOYW1lIGluICgoY2hpbGRyZW5MZW5ndGggPSB0eXBlLmRlZmF1bHRQcm9wcyksIGNoaWxkcmVuTGVuZ3RoKSlcbiAgICAgIHZvaWQgMCA9PT0gcHJvcHNbcHJvcE5hbWVdICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjaGlsZHJlbkxlbmd0aFtwcm9wTmFtZV0pO1xuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgdm9pZCAwLCB2b2lkIDAsIG51bGwsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZVJlZiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHsgY3VycmVudDogbnVsbCB9O1xufTtcbmV4cG9ydHMuZm9yd2FyZFJlZiA9IGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgcmV0dXJuIHsgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsIHJlbmRlcjogcmVuZGVyIH07XG59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudCA9IGlzVmFsaWRFbGVtZW50O1xuZXhwb3J0cy5sYXp5ID0gZnVuY3Rpb24gKGN0b3IpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTEFaWV9UWVBFLFxuICAgIF9wYXlsb2FkOiB7IF9zdGF0dXM6IC0xLCBfcmVzdWx0OiBjdG9yIH0sXG4gICAgX2luaXQ6IGxhenlJbml0aWFsaXplclxuICB9O1xufTtcbmV4cG9ydHMubWVtbyA9IGZ1bmN0aW9uICh0eXBlLCBjb21wYXJlKSB7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX01FTU9fVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGNvbXBhcmU6IHZvaWQgMCA9PT0gY29tcGFyZSA/IG51bGwgOiBjb21wYXJlXG4gIH07XG59O1xuZXhwb3J0cy5zdGFydFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gc2NvcGUoKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICAgIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgICByZXR1cm5WYWx1ZS50aGVuKG5vb3AsIHJlcG9ydEdsb2JhbEVycm9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV91c2VDYWNoZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhY2hlUmVmcmVzaCgpO1xufTtcbmV4cG9ydHMudXNlID0gZnVuY3Rpb24gKHVzYWJsZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2UodXNhYmxlKTtcbn07XG5leHBvcnRzLnVzZUFjdGlvblN0YXRlID0gZnVuY3Rpb24gKGFjdGlvbiwgaW5pdGlhbFN0YXRlLCBwZXJtYWxpbmspIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluayk7XG59O1xuZXhwb3J0cy51c2VDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDYWxsYmFjayhjYWxsYmFjaywgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VDb250ZXh0ID0gZnVuY3Rpb24gKENvbnRleHQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ29udGV4dChDb250ZXh0KTtcbn07XG5leHBvcnRzLnVzZURlYnVnVmFsdWUgPSBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZURlZmVycmVkVmFsdWUodmFsdWUsIGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VFZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBjcmVhdGVEZXBzLCB1cGRhdGUpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5IO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdXBkYXRlKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJ1c2VFZmZlY3QgQ1JVRCBvdmVybG9hZCBpcyBub3QgZW5hYmxlZCBpbiB0aGlzIGJ1aWxkIG9mIFJlYWN0LlwiXG4gICAgKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlRWZmZWN0KGNyZWF0ZSwgY3JlYXRlRGVwcyk7XG59O1xuZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSWQoKTtcbn07XG5leHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU1lbW8gPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU1lbW8oY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlT3B0aW1pc3RpYyhwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xuZXhwb3J0cy51c2VSZWR1Y2VyID0gZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbn07XG5leHBvcnRzLnVzZVJlZiA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VTdGF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbn07XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZnVuY3Rpb24gKFxuICBzdWJzY3JpYmUsXG4gIGdldFNuYXBzaG90LFxuICBnZXRTZXJ2ZXJTbmFwc2hvdFxuKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgIHN1YnNjcmliZSxcbiAgICBnZXRTbmFwc2hvdCxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xufTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlVHJhbnNpdGlvbigpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMS4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmZ1bmN0aW9uIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoY29kZSkge1xuICB2YXIgdXJsID0gXCJodHRwczovL3JlYWN0LmRldi9lcnJvcnMvXCIgKyBjb2RlO1xuICBpZiAoMSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB1cmwgKz0gXCI/YXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1sxXSk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICB1cmwgKz0gXCImYXJnc1tdPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICBcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIiArXG4gICAgY29kZSArXG4gICAgXCI7IHZpc2l0IFwiICtcbiAgICB1cmwgK1xuICAgIFwiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIlxuICApO1xufVxuZnVuY3Rpb24gbm9vcCgpIHt9XG52YXIgSW50ZXJuYWxzID0ge1xuICAgIGQ6IHtcbiAgICAgIGY6IG5vb3AsXG4gICAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIyKSk7XG4gICAgICB9LFxuICAgICAgRDogbm9vcCxcbiAgICAgIEM6IG5vb3AsXG4gICAgICBMOiBub29wLFxuICAgICAgbTogbm9vcCxcbiAgICAgIFg6IG5vb3AsXG4gICAgICBTOiBub29wLFxuICAgICAgTTogbm9vcFxuICAgIH0sXG4gICAgcDogMCxcbiAgICBmaW5kRE9NTm9kZTogbnVsbFxuICB9LFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik7XG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVySW5mbywgaW1wbGVtZW50YXRpb24pIHtcbiAgdmFyIGtleSA9XG4gICAgMyA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbM10gPyBhcmd1bWVudHNbM10gOiBudWxsO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IG51bGwgPT0ga2V5ID8gbnVsbCA6IFwiXCIgKyBrZXksXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgaW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uXG4gIH07XG59XG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPVxuICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREU7XG5mdW5jdGlvbiBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBpbnB1dCkge1xuICBpZiAoXCJmb250XCIgPT09IGFzKSByZXR1cm4gXCJcIjtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBpbnB1dClcbiAgICByZXR1cm4gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gaW5wdXQgPyBpbnB1dCA6IFwiXCI7XG59XG5leHBvcnRzLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIEludGVybmFscztcbmV4cG9ydHMuY3JlYXRlUG9ydGFsID0gZnVuY3Rpb24gKGNoaWxkcmVuLCBjb250YWluZXIpIHtcbiAgdmFyIGtleSA9XG4gICAgMiA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICBpZiAoXG4gICAgIWNvbnRhaW5lciB8fFxuICAgICgxICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDkgIT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJlxuICAgICAgMTEgIT09IGNvbnRhaW5lci5ub2RlVHlwZSlcbiAgKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufTtcbmV4cG9ydHMuZmx1c2hTeW5jID0gZnVuY3Rpb24gKGZuKSB7XG4gIHZhciBwcmV2aW91c1RyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIHByZXZpb3VzVXBkYXRlUHJpb3JpdHkgPSBJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICBpZiAoKChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksIChJbnRlcm5hbHMucCA9IDIpLCBmbikpIHJldHVybiBmbigpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldmlvdXNUcmFuc2l0aW9uKSxcbiAgICAgIChJbnRlcm5hbHMucCA9IHByZXZpb3VzVXBkYXRlUHJpb3JpdHkpLFxuICAgICAgSW50ZXJuYWxzLmQuZigpO1xuICB9XG59O1xuZXhwb3J0cy5wcmVjb25uZWN0ID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICAob3B0aW9uc1xuICAgICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmNyb3NzT3JpZ2luKSxcbiAgICAgICAgKG9wdGlvbnMgPVxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zXG4gICAgICAgICAgICA/IFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IG9wdGlvbnNcbiAgICAgICAgICAgICAgPyBvcHRpb25zXG4gICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgOiB2b2lkIDApKVxuICAgICAgOiAob3B0aW9ucyA9IG51bGwpLFxuICAgIEludGVybmFscy5kLkMoaHJlZiwgb3B0aW9ucykpO1xufTtcbmV4cG9ydHMucHJlZmV0Y2hETlMgPSBmdW5jdGlvbiAoaHJlZikge1xuICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBJbnRlcm5hbHMuZC5EKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlaW5pdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJiBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucy5hcyxcbiAgICAgIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICBpbnRlZ3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHkgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMDtcbiAgICBcInN0eWxlXCIgPT09IGFzXG4gICAgICA/IEludGVybmFscy5kLlMoXG4gICAgICAgICAgaHJlZixcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5wcmVjZWRlbmNlID8gb3B0aW9ucy5wcmVjZWRlbmNlIDogdm9pZCAwLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgOiBcInNjcmlwdFwiID09PSBhcyAmJlxuICAgICAgICBJbnRlcm5hbHMuZC5YKGhyZWYsIHtcbiAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgaW50ZWdyaXR5OiBpbnRlZ3JpdHksXG4gICAgICAgICAgZmV0Y2hQcmlvcml0eTogZmV0Y2hQcmlvcml0eSxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICB9XG59O1xuZXhwb3J0cy5wcmVpbml0TW9kdWxlID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKVxuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zKSB7XG4gICAgICBpZiAobnVsbCA9PSBvcHRpb25zLmFzIHx8IFwic2NyaXB0XCIgPT09IG9wdGlvbnMuYXMpIHtcbiAgICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhcbiAgICAgICAgICBvcHRpb25zLmFzLFxuICAgICAgICAgIG9wdGlvbnMuY3Jvc3NPcmlnaW5cbiAgICAgICAgKTtcbiAgICAgICAgSW50ZXJuYWxzLmQuTShocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTpcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgICAgIG5vbmNlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5ub25jZSA/IG9wdGlvbnMubm9uY2UgOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIG51bGwgPT0gb3B0aW9ucyAmJiBJbnRlcm5hbHMuZC5NKGhyZWYpO1xufTtcbmV4cG9ydHMucHJlbG9hZCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmXG4gICAgbnVsbCAhPT0gb3B0aW9ucyAmJlxuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzXG4gICkge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICAgIEludGVybmFscy5kLkwoaHJlZiwgYXMsIHtcbiAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgIGludGVncml0eTpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwLFxuICAgICAgdHlwZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMudHlwZSA/IG9wdGlvbnMudHlwZSA6IHZvaWQgMCxcbiAgICAgIGZldGNoUHJpb3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA/IG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgcmVmZXJyZXJQb2xpY3k6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgPyBvcHRpb25zLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgOiB2b2lkIDAsXG4gICAgICBpbWFnZVNyY1NldDpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTcmNTZXQgPyBvcHRpb25zLmltYWdlU3JjU2V0IDogdm9pZCAwLFxuICAgICAgaW1hZ2VTaXplczpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTaXplcyA/IG9wdGlvbnMuaW1hZ2VTaXplcyA6IHZvaWQgMCxcbiAgICAgIG1lZGlhOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5tZWRpYSA/IG9wdGlvbnMubWVkaWEgOiB2b2lkIDBcbiAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlbG9hZE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdmFyIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhvcHRpb25zLmFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICAgIEludGVybmFscy5kLm0oaHJlZiwge1xuICAgICAgICBhczpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcyAmJiBcInNjcmlwdFwiICE9PSBvcHRpb25zLmFzXG4gICAgICAgICAgICA/IG9wdGlvbnMuYXNcbiAgICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgIGludGVncml0eTpcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMFxuICAgICAgfSk7XG4gICAgfSBlbHNlIEludGVybmFscy5kLm0oaHJlZik7XG59O1xuZXhwb3J0cy5yZXF1ZXN0Rm9ybVJlc2V0ID0gZnVuY3Rpb24gKGZvcm0pIHtcbiAgSW50ZXJuYWxzLmQucihmb3JtKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24gKGZuLCBhKSB7XG4gIHJldHVybiBmbihhKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUZvcm1TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUZvcm1TdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOS4xLjBcIjtcbiIsImltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vQXBwXCI7XG5jb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKTtcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGNvbnRhaW5lcilcbnJvb3QucmVuZGVyKDxBcHAgLz4pOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tY2xpZW50LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLWNsaWVudC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFByb2Nlc3NDbGlwYm9hcmQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2NvbW1lbnRfc2VjdGlvbi9Qcm9jZXNzQ2xpcGJvYXJkXCI7XG5pbXBvcnQgeyBEaXNwbGF5Q29tbWVudCB9IGZyb20gXCIuL2NvbXBvbmVudHMvY29tbWVudF9zZWN0aW9uL0Rpc3BsYXlDb21tZW50XCI7XG5pbXBvcnQgeyBHZW5lcmF0ZVBvc3QgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Bvc3Rfc2VjdGlvbi9HZW5lcmF0ZVBvc3RcIjtcbmltcG9ydCB7IERpc3BsYXlHZW5lcmF0ZWRQb3N0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9wb3N0X3NlY3Rpb24vRGlzcGxheUdlbmVyYXRlZFBvc3RcIjtcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gXCIuL3R5cGVzL0FjdGlvblwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQXBwKCkge1xuXG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGU8QWN0aW9uPihBY3Rpb24uZGVmYXVsdCk7XG5cbiAgY29uc3QgW2dlbmVyYXRlZFBvc3QsIHNldEdlbmVyYXRlZFBvc3RdID0gdXNlU3RhdGU8c3RyaW5nPihcIlwiKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDQ+Q29tbWVudCBHZW5lcmF0b3I8L2g0PlxuICAgICAgICA8UHJvY2Vzc0NsaXBib2FyZCAvPlxuXG4gICAgICAgIDxEaXNwbGF5Q29tbWVudCAvPlxuXG4gICAgICA8L3NlY3Rpb24+XG5cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDI+UG9zdCBHZW5lcmF0b3I8L2gyPlxuICAgICAgICA8R2VuZXJhdGVQb3N0IHNldFN0YXRlPXtzZXRTdGF0ZX0gc2V0R2VuZXJhdGVkUG9zdD17c2V0R2VuZXJhdGVkUG9zdH0+PC9HZW5lcmF0ZVBvc3Q+XG5cbiAgICAgICAge3N0YXRlID09PSBBY3Rpb24uZGlzcGxheV9wb3N0ICYmIChcbiAgICAgICAgICA8RGlzcGxheUdlbmVyYXRlZFBvc3QgZ2VuZXJhdGVkUG9zdD17Z2VuZXJhdGVkUG9zdH0+PC9EaXNwbGF5R2VuZXJhdGVkUG9zdD5cbiAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXYgPlxuICApO1xufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFByb2Nlc3NDbGlwYm9hcmQoKSB7XG5cblxuICAgIHJldHVybiAoXG5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjaGVja0NsaXBib2FyZE9uQ2xpY2t9IGlkPVwicHJvY2Vzcy1jbGlwYm9hcmRcIj5HZW5lcmF0ZSBDb21tZW50PC9idXR0b24+XG5cbiAgICApXG59XG5cbmxldCBsYXN0Q2xpcGJvYXJkID0gXCJcIjtcblxuZnVuY3Rpb24gaXNMaW5rZWRJblBvc3RVcmwodXJsOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gL15odHRwczpcXC9cXC93d3dcXC5saW5rZWRpblxcLmNvbVxcL3Bvc3RzXFwvLy50ZXN0KHVybC50cmltKCkpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja0NsaXBib2FyZE9uQ2xpY2soKSB7XG4gICAgY29uc29sZS5sb2coXCJjbGlja2JvYXJkIGNoZWNraW5nXCIpXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKTtcblxuICAgICAgICBpZiAodGV4dCAmJiB0ZXh0ICE9PSBsYXN0Q2xpcGJvYXJkICYmIGlzTGlua2VkSW5Qb3N0VXJsKHRleHQpKSB7XG4gICAgICAgICAgICBsYXN0Q2xpcGJvYXJkID0gdGV4dDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi8J+TiyBDb3BpZWQgTGlua2VkSW4gUG9zdCBVUkw6XCIsIHRleHQpO1xuXG4gICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJPUEVOX1BPU1RfVEFCXCIsXG4gICAgICAgICAgICAgICAgdXJsOiB0ZXh0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJDbGlwYm9hcmQgYWNjZXNzIGVycm9yOlwiLCBlcnIpO1xuICAgIH1cbn1cblxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGdldEdlbmVyYXRlZENvbW1lbnQgfSBmcm9tIFwiLi9hY3Rpb25zL2dldEdlbmVyYXRlZENvbW1lbnRcIjtcbmltcG9ydCB7IENvbW1lbnRDcmVhdGlvbkpvdXJuZXlTdGVwcywgU3RlcEluZm8gfSBmcm9tIFwidHJhY2luZy9Vc2VySm91cm5leVN0ZXBVdGlsc1wiO1xuaW1wb3J0IHsgZ2V0VXNlckpvdXJuZXlJZCB9IGZyb20gXCJAYWN0aW9ucy9jb250ZW50L2dlbmVyYXRlVXNlckpvdXJuZXlJZFwiO1xuaW1wb3J0IHsgSm91cm5leVR5cGUgfSBmcm9tIFwiQGFjdGlvbnMvdHlwZXMvSm91cm5leVR5cGVcIjtcbmV4cG9ydCBmdW5jdGlvbiBEaXNwbGF5Q29tbWVudCgpIHtcbiAgICBjb25zdCBbY29tbWVudCwgc2V0Q29tbWVudF0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xuICAgIGNvbnN0IFtjb3BpZWQsIHNldENvcGllZF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNoZWNraW5nIGlmIGNvbW1lbnQgaXMgdGhlcmVcIik7XG4gICAgICAgIGdldEdlbmVyYXRlZENvbW1lbnQoKS50aGVuKChjb21tZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29tbWVudCkge1xuICAgICAgICAgICAgICAgIHNldENvbW1lbnQoY29tbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIFtdKTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNvcHkoKSB7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGpvdXJuZXJ5SWQgPSBhd2FpdCBnZXRVc2VySm91cm5leUlkKEpvdXJuZXlUeXBlLkNPTU1FTlRfQ1JFQVRJT04pO1xuICAgICAgICAgICAgLy8gQ0NKIHN0ZXAgMjogY29tbWVudCBpcyBjb3BpZWRcbiAgICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvbW1lbnQpO1xuXG4gICAgICAgICAgICBjb25zdCBzdGVwRGF0YTogU3RlcEluZm8gPSB7XG4gICAgICAgICAgICAgICAgam91cm5leUlkOiBqb3VybmVyeUlkLFxuICAgICAgICAgICAgICAgIGlucHV0Q29udGVudDogY29tbWVudCxcbiAgICAgICAgICAgICAgICBvdXRwdXRDb250ZW50OiBjb21tZW50LFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ29tbWVudENyZWF0aW9uSm91cm5leVN0ZXBzLmNvcGllZChzdGVwRGF0YSk7XG4gICAgICAgICAgICBzZXRDb3BpZWQodHJ1ZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHNldENvbW1lbnQoXCJcIiksIDE1MDApO1xuICAgICAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiBzZXRDb3BpZWQoZmFsc2UpLCAxNTAwKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi4p2MIEZhaWxlZCB0byBjb3B5OlwiLCBlcnIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjb21tZW50KSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICBpZD1cImNvbW1lbnQtYm94XCJcbiAgICAgICAgICAgICAgICByZWFkT25seVxuICAgICAgICAgICAgICAgIHZhbHVlPXtjb21tZW50fVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLTI0IGJvcmRlciBwLTIgcm91bmRlZFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGlkPVwiY29weS1idG5cIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNvcHl9XG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFjb21tZW50IHx8IGNvcGllZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtdC0yIHctZnVsbCBiZy1ibHVlLTUwMCB0ZXh0LXdoaXRlIHB5LTEgcm91bmRlZCBkaXNhYmxlZDpvcGFjaXR5LTUwXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y29waWVkID8gXCJDb3BpZWQhXCIgOiBcIkNvcHkgQ29tbWVudFwifVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvPlxuICAgICk7XG59IiwiaW1wb3J0IHsgZ2V0Q3VycmVudFRhYlVybE9uRmV0Y2hpbmcgfSBmcm9tIFwic2VydmljZXMvVGFiVXRpbHNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEdlbmVyYXRlZENvbW1lbnQoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgY29uc3QgdXJsID0gYXdhaXQgZ2V0Q3VycmVudFRhYlVybE9uRmV0Y2hpbmcoKTtcbiAgICBjb25zb2xlLmxvZyhcImN1cnJlbnRfdXJsOlwiICsgdXJsKTtcblxuICAgIGlmICghdXJsKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGtleSA9IGBjb21tZW50LSR7dXJsfWA7XG4gICAgY29uc29sZS5sb2coXCJrZXk6XCIgKyBrZXkpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoW2tleV0sIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0W2tleV0gPz8gbnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSIsImV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDdXJyZW50VGFiVXJsT25GZXRjaGluZygpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyB0eXBlOiBcIkdFVF9UQUJfVVJMX1dIRU5fRkVUQ0hJTkdcIiB9LCAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2U/LnVybCA/PyBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBEYXRhRXhjaGFuZ2VTZXJ2aWNlIH0gZnJvbSBcInNlcnZpY2VzL0RhdGFFeGNoYW5nZVNlcnZpY2VcIjtcbmltcG9ydCB7IENvbnRlbnRUeXBlLCBTdGVwVHlwZSwgVXNlckpvdXJuZXlTdGVwIH0gZnJvbSBcIi4vdHlwZXMvVXNlckpvdXJuZXlTdGVwXCI7XG5cbmNvbnN0IGRhdGFFeGNoYW5nZVNlcnZpY2UgPSBuZXcgRGF0YUV4Y2hhbmdlU2VydmljZSgpO1xuZXhwb3J0IGNvbnN0IENvbW1lbnRDcmVhdGlvbkpvdXJuZXlTdGVwcyA9IHtcbiAgICBnZW5lcmF0ZWQoc3RlcEluZm86IFN0ZXBJbmZvKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3Qgam91cm5leVN0ZXA6IFVzZXJKb3VybmV5U3RlcCA9IHtcbiAgICAgICAgICAgIGpvdXJuZXlJZDogc3RlcEluZm8uam91cm5leUlkLFxuICAgICAgICAgICAgc3RlcE51bWJlcjogMSxcbiAgICAgICAgICAgIHN0ZXBUeXBlOiBTdGVwVHlwZS5HRU5FUkFURUQsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogQ29udGVudFR5cGUuQ09NTUVOVCxcbiAgICAgICAgICAgIGlucHV0Q29udGVudDogc3RlcEluZm8uaW5wdXRDb250ZW50LFxuICAgICAgICAgICAgb3V0cHV0Q29udGVudDogc3RlcEluZm8ub3V0cHV0Q29udGVudCxcbiAgICAgICAgfVxuICAgICAgICBkYXRhRXhjaGFuZ2VTZXJ2aWNlLnNlbmRKb3VybmV5U3RlcEluZm8oam91cm5leVN0ZXApO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbW1lbnQgZ2VuZXJhdGVkIHN0ZXAgc2VudFwiKTtcbiAgICB9LFxuICAgIGNvcGllZChzdGVwSW5mbzogU3RlcEluZm8pOiB2b2lkIHtcblxuICAgICAgICBjb25zdCBqb3VybmV5U3RlcDogVXNlckpvdXJuZXlTdGVwID0ge1xuICAgICAgICAgICAgam91cm5leUlkOiBzdGVwSW5mby5qb3VybmV5SWQsXG4gICAgICAgICAgICBzdGVwTnVtYmVyOiAyLFxuICAgICAgICAgICAgc3RlcFR5cGU6IFN0ZXBUeXBlLkNPUElFRCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBDb250ZW50VHlwZS5DT01NRU5ULFxuICAgICAgICAgICAgaW5wdXRDb250ZW50OiBzdGVwSW5mby5pbnB1dENvbnRlbnQsXG4gICAgICAgICAgICBvdXRwdXRDb250ZW50OiBzdGVwSW5mby5vdXRwdXRDb250ZW50LFxuICAgICAgICB9XG4gICAgICAgIGRhdGFFeGNoYW5nZVNlcnZpY2Uuc2VuZEpvdXJuZXlTdGVwSW5mbyhqb3VybmV5U3RlcCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tbWVudCBjb3BpZWQgc3RlcCBzZW50XCIpO1xuICAgIH0sXG5cbiAgICBwb3N0ZWQoc3RlcEluZm86IFN0ZXBJbmZvKTogdm9pZCB7XG5cbiAgICAgICAgY29uc3Qgam91cm5leVN0ZXA6IFVzZXJKb3VybmV5U3RlcCA9IHtcbiAgICAgICAgICAgIGpvdXJuZXlJZDogc3RlcEluZm8uam91cm5leUlkLFxuICAgICAgICAgICAgc3RlcE51bWJlcjogMyxcbiAgICAgICAgICAgIHN0ZXBUeXBlOiBTdGVwVHlwZS5QT1NURUQsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogQ29udGVudFR5cGUuQ09NTUVOVCxcbiAgICAgICAgICAgIGlucHV0Q29udGVudDogc3RlcEluZm8uaW5wdXRDb250ZW50LFxuICAgICAgICAgICAgb3V0cHV0Q29udGVudDogc3RlcEluZm8ub3V0cHV0Q29udGVudCxcbiAgICAgICAgfVxuICAgICAgICBkYXRhRXhjaGFuZ2VTZXJ2aWNlLnNlbmRKb3VybmV5U3RlcEluZm8oam91cm5leVN0ZXApO1xuICAgICAgICBjb25zb2xlLmxvZyhcImNvbW1lbnQgcG9zdCBldmVudCByYW5cIik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY29tbWVudCBwb3N0ZWQgc3RlcCBzZW50OlwiLCBzdGVwSW5mby5vdXRwdXRDb250ZW50KTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHR5cGUgU3RlcEluZm8gPSB7XG4gICAgam91cm5leUlkOiBzdHJpbmcsXG4gICAgaW5wdXRDb250ZW50OiBzdHJpbmcsXG4gICAgb3V0cHV0Q29udGVudDogc3RyaW5nLFxufVxuXG5leHBvcnQgY29uc3QgUG9zdENyZWF0aW9uSm91cm5leVN0ZXBzID0ge1xuXG5cbiAgICBnZW5lcmF0ZWQoc3RlcEluZm86IFN0ZXBJbmZvKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicG9zdCBnZW5lcmF0aW9uIGluZm8gc2VudFwiKTtcbiAgICB9LFxuXG4gICAgY29waWVkKHN0ZXBJbmZvOiBTdGVwSW5mbykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInBvc3QgY29waWVkIGluZm8gc2VudFwiKTtcbiAgICB9LFxuXG4gICAgcG9zdGVkKHN0ZXBJbmZvOiBTdGVwSW5mbykge1xuICAgICAgICBjb25zb2xlLmxvZyhcInBvc3QgcG9zdGVkIGluZm8gc2VudFwiKTtcbiAgICB9LFxufSIsImltcG9ydCB7IFVzZXJKb3VybmV5U3RlcCB9IGZyb20gXCJ0cmFjaW5nL3R5cGVzL1VzZXJKb3VybmV5U3RlcFwiO1xuaW1wb3J0IHsgQXV0aEluZm8gfSBmcm9tIFwiLi90eXBlcy9BdXRoSW5mb1wiO1xuaW1wb3J0IHsgVXNlcklkZWEgfSBmcm9tIFwiLi90eXBlcy9Vc2VySWRlYVwiO1xuaW1wb3J0IHsgVXNlckpvdXJuZXkgfSBmcm9tIFwidHJhY2luZy90eXBlcy9Vc2VySm91cm5leVwiO1xuXG5jb25zdCBiYXNlVXJsOiBzdHJpbmcgPSBcImh0dHA6bG9jYWxob3N0OjgxMTFcIjtcbmV4cG9ydCBjbGFzcyBEYXRhRXhjaGFuZ2VTZXJ2aWNlIHtcbiAgICBhc3luYyBnZXRBdXRoVG9rZW4oKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFtcInRva2VuXCJdLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQudG9rZW4gPz8gbnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0SW5zdGFsbElkKCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbXCJpbnN0YWxsSWRcIl0sIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5pbnN0YWxsSWQgPz8gbnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2VuZXJhdGVQb3N0KHVzZXJJbnB1dDogc3RyaW5nKSB7XG5cbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgY29uc3QgaWRlYTogVXNlcklkZWEgPSB7XG4gICAgICAgICAgICAgICAgaWRlYTogdXNlcklucHV0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYXV0aEluZm8gPSBhd2FpdCB0aGlzLmdldEF1dGhUb2tlbkFuZEluc3RhbGxlcklkKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYmFzZVVybCArIFwiL2xpbmtlZGluL2FwaS92MS9jcmVhdGUtcG9zdFwiLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogYEJlYXJlciAke2F1dGhJbmZvLnRva2VufWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogaWRlYSxcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbE1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YWxsSWQ6IGF1dGhJbmZvLmluc3RhbGxJZFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWNrZW5kIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi4pyFIHBvc3QgcmVjZWl2ZWQgZnJvbSBiYWNrZW5kOlwiLCBkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuKdjCBGYWlsZWQgdG8gc2VuZCBwb3N0IHRvIGJhY2tlbmQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cblxuICAgIH1cblxuXG5cbiAgICBwcml2YXRlIGFzeW5jIGdldEF1dGhUb2tlbkFuZEluc3RhbGxlcklkKCk6IFByb21pc2U8QXV0aEluZm8+IHtcblxuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IHRoaXMuZ2V0QXV0aFRva2VuKCk7XG4gICAgICAgIGNvbnN0IGluc3RhbGxJZCA9IGF3YWl0IHRoaXMuZ2V0SW5zdGFsbElkKCk7XG5cbiAgICAgICAgaWYgKCF0b2tlbiB8fCAhaW5zdGFsbElkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGF1dGggdG9rZW4gb3IgaW5zdGFsbCBJRFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgIGluc3RhbGxJZFxuICAgICAgICB9O1xuXG4gICAgfVxuXG5cblxuICAgIGFzeW5jIHNlbmRQb3N0VG9CYWNrZW5kKHNjcmFwcGVkUG9zdDogc3RyaW5nLCB1cmw6IHN0cmluZykge1xuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICBsZXQgYXV0aEluZm8gPSBhd2FpdCB0aGlzLmdldEF1dGhUb2tlbkFuZEluc3RhbGxlcklkKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYmFzZVVybCArIFwiL2xpbmtlZGluL2FwaS92MS9jcmVhdGUtY29tbWVudFwiLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgICAgICBcIkF1dGhvcml6YXRpb25cIjogYEJlYXJlciAke2F1dGhJbmZvLnRva2VufWBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NyYXBwZWRQb3N0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbElkOiBhdXRoSW5mby5pbnN0YWxsSWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFja2VuZCBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuKchSBDb21tZW50IHJlY2VpdmVkIGZyb20gYmFja2VuZDpcIiwgZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgRmFpbGVkIHRvIHNlbmQgcG9zdCB0byBiYWNrZW5kOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgYXN5bmMgc2VuZEpvdXJuZXlJbmZvKGpvdXJuZXlJbmZvOiBVc2VySm91cm5leSkge1xuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgICBsZXQgYXV0aEluZm8gPSBhd2FpdCB0aGlzLmdldEF1dGhUb2tlbkFuZEluc3RhbGxlcklkKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYmFzZVVybCArIFwiL2xpbmtlZGluL2FwaS92MS9qb3VybmV5XCIsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBgQmVhcmVyICR7YXV0aEluZm8udG9rZW59YFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBqb3VybmV5SW5mb1xuICAgICAgICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFsbElkOiBhdXRoSW5mby5pbnN0YWxsSWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFja2VuZCBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuKchSBqb3VybmV5IGluZm8gc2VudCB0byBiYWNrZW5kOlwiLCBkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuKdjCBGYWlsZWQgdG8gc2VuZCBqb3VybmV5IGluZm8gdG8gYmFja2VuZDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBzZW5kSm91cm5leVN0ZXBJbmZvKGpvdXJuZXlTdGVwOiBVc2VySm91cm5leVN0ZXApIHtcbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgbGV0IGF1dGhJbmZvID0gYXdhaXQgdGhpcy5nZXRBdXRoVG9rZW5BbmRJbnN0YWxsZXJJZCgpO1xuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGJhc2VVcmwgKyBcIi9saW5rZWRpbi9hcGkvdjEvam91cm5leS9zdGVwXCIsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBgQmVhcmVyICR7YXV0aEluZm8udG9rZW59YFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBqb3VybmV5U3RlcCxcblxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbGxJZDogYXV0aEluZm8uaW5zdGFsbElkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJhY2tlbmQgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCLinIUgc3RlcCBpbmZvIHNlbnQgdG8gYmFja2VuZDpcIiwgZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLinYwgRmFpbGVkIHRvIHNlbmQgc3RlcCBpbmZvIHRvIGJhY2tlbmQ6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbiIsImV4cG9ydCB0eXBlIFVzZXJKb3VybmV5U3RlcCA9IHtcbiAgICBqb3VybmV5SWQ6IHN0cmluZyxcbiAgICBzdGVwTnVtYmVyOiBudW1iZXIsXG4gICAgc3RlcFR5cGU6IFN0ZXBUeXBlLFxuICAgIGNvbnRlbnRUeXBlOiBDb250ZW50VHlwZSxcbiAgICBpbnB1dENvbnRlbnQ6IHN0cmluZyxcbiAgICBvdXRwdXRDb250ZW50OiBzdHJpbmcsXG59XG5cbmV4cG9ydCBlbnVtIFN0ZXBUeXBlIHtcbiAgICBHRU5FUkFURUQgPSBcIkdFTkVSQVRFRFwiLFxuICAgIENPUElFRCA9IFwiQ09QSUVEXCIsXG4gICAgUE9TVEVEID0gXCJQT1NURURcIixcbn1cblxuZXhwb3J0IGVudW0gQ29udGVudFR5cGUge1xuICAgIFBPU1QgPSBcIlBPU1RcIixcbiAgICBDT01NRU5UID0gXCJDT01NRU5UXCIsXG59ICIsImltcG9ydCB7IEpvdXJuZXlUeXBlIH0gZnJvbSBcIkBhY3Rpb25zL3R5cGVzL0pvdXJuZXlUeXBlXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVRva2VuIH0gZnJvbSBcImJhY2tncm91bmQvZ2VuZXJhdGVUb2tlbk9uSW5zdGFsbFwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVVc2VySm91cm5leUlkKGpvdXJuZXlUeXBlOiBKb3VybmV5VHlwZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlY3JldCA9IFwieW91ci12ZXJ5LXNlY3JldC1rZXlcIjsgLy8gaGFyZGNvZGVkIGZvciBub3dcbiAgICBjb25zdCBpZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7IC8vIHVuaXF1ZSBwZXIgaW5zdGFsbFxuXG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBnZW5lcmF0ZVRva2VuKHNlY3JldCwgaWQpO1xuXG4gICAgaWYgKGpvdXJuZXlUeXBlID09PSBKb3VybmV5VHlwZS5DT01NRU5UX0NSRUFUSU9OKSB7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRDcmVhdGlvbkpvdXJuZXkgPSB0b2tlbjtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgY29tbWVudENyZWF0aW9uSm91cm5leSB9LCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbW1lbnQgY3JlYXRpb24gdG9rZW4gZ2VuZXJhdGVkIGFuZCBzYXZlZDpcIiwgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoam91cm5leVR5cGUgPT09IEpvdXJuZXlUeXBlLlBPU1RfQ1JFQVRJT04pIHtcbiAgICAgICAgY29uc3QgcG9zdENyZWF0aW9uSm91cm5leSA9IHRva2VuO1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBwb3N0Q3JlYXRpb25Kb3VybmV5IH0sICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicG9zdCBjcmVhdGluIHRva2VuIGdlbmVyYXRlZCBhbmQgc2F2ZWQ6XCIsIHRva2VuKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlckpvdXJuZXlJZChqb3VybmV5VHlwZTogSm91cm5leVR5cGUpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmIChqb3VybmV5VHlwZSA9PT0gSm91cm5leVR5cGUuQ09NTUVOVF9DUkVBVElPTikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldChbXCJjb21tZW50Q3JlYXRpb25Kb3VybmV5XCJdLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuY29tbWVudENyZWF0aW9uSm91cm5leSA/PyBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoam91cm5leVR5cGUgPT09IEpvdXJuZXlUeXBlLlBPU1RfQ1JFQVRJT04pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoW1wicG9zdENyZWF0aW9uSm91cm5leVwiXSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LnBvc3RDcmVhdGlvbkpvdXJuZXkgPz8gbnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59IiwiZXhwb3J0IGVudW0gSm91cm5leVR5cGUge1xuICAgIENPTU1FTlRfQ1JFQVRJT04gPSBcIkNPTU1FTlRfQ1JFQVRJT05cIixcbiAgICBQT1NUX0NSRUFUSU9OID0gXCJQT1NUX0NSRUFUSU9OXCIsXG59IiwiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlVG9rZW4oc2VjcmV0OiBzdHJpbmcsIGluc3RhbGxJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBlbmMgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjb25zdCBrZXkgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgXCJyYXdcIixcbiAgICAgICAgZW5jLmVuY29kZShzZWNyZXQpLFxuICAgICAgICB7IG5hbWU6IFwiSE1BQ1wiLCBoYXNoOiBcIlNIQS0yNTZcIiB9LFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgW1wic2lnblwiXVxuICAgICk7XG5cbiAgICBjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oXCJITUFDXCIsIGtleSwgZW5jLmVuY29kZShpbnN0YWxsSWQpKTtcbiAgICByZXR1cm4gWy4uLm5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSldLm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xufVxuIiwiaW1wb3J0IHsgQ29udGVudEFjdGlvbnMgfSBmcm9tIFwicHVibGljL3R5cGVzL0NvbnRlbnRBY3Rpb25zXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IERhdGFFeGNoYW5nZVNlcnZpY2UgfSBmcm9tIFwic2VydmljZXMvRGF0YUV4Y2hhbmdlU2VydmljZVwiO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSBcInB1YmxpYy90eXBlcy9BY3Rpb25cIjtcbmltcG9ydCB7IGdlbmVyYXRlVXNlckpvdXJuZXlJZCwgZ2V0VXNlckpvdXJuZXlJZCB9IGZyb20gXCJAYWN0aW9ucy9jb250ZW50L2dlbmVyYXRlVXNlckpvdXJuZXlJZFwiO1xuaW1wb3J0IHsgSm91cm5leVR5cGUgfSBmcm9tIFwiQGFjdGlvbnMvdHlwZXMvSm91cm5leVR5cGVcIjtcbmltcG9ydCB7IFBvc3RDcmVhdGlvbkpvdXJuZXkgfSBmcm9tIFwidHJhY2luZy9Vc2VySm91cm5leVV0aWxzXCI7XG5pbXBvcnQgeyBQb3N0Q3JlYXRpb25Kb3VybmV5U3RlcHMsIFN0ZXBJbmZvIH0gZnJvbSBcInRyYWNpbmcvVXNlckpvdXJuZXlTdGVwVXRpbHNcIjtcblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBHZW5lcmF0ZVBvc3QoeyBzZXRTdGF0ZSwgc2V0R2VuZXJhdGVkUG9zdCB9OiBSZWFkb25seTxDb250ZW50QWN0aW9ucz4pIHtcbiAgICBjb25zdCBbdXNlcklucHV0LCBzZXRVc2VySW5wdXRdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG5cbiAgICBjb25zdCBoYW5kbGVHZW5lcmF0ZSA9IGFzeW5jICgpID0+IHtcblxuICAgICAgICAvLyBzdGFydCBwb3N0IGNyZWF0aW9uIGpvdXJuZXlcbiAgICAgICAgZ2VuZXJhdGVVc2VySm91cm5leUlkKEpvdXJuZXlUeXBlLlBPU1RfQ1JFQVRJT04pO1xuICAgICAgICBjb25zdCBqb3VybmV5SWQgPSBhd2FpdCBnZXRVc2VySm91cm5leUlkKEpvdXJuZXlUeXBlLlBPU1RfQ1JFQVRJT04pO1xuICAgICAgICBQb3N0Q3JlYXRpb25Kb3VybmV5LnN0YXJ0Sm91cm5leShqb3VybmV5SWQpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwidXNlciBpbnB1dCBmZWRcIik7XG4gICAgICAgIGlmICghdXNlcklucHV0LnRyaW0oKSkgcmV0dXJuO1xuXG4gICAgICAgIHNldExvYWRpbmcodHJ1ZSk7IC8vIHNob3cgbG9hZGluZyBzdGF0ZVxuXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2VuZGluZyByZXF1ZXN0XCIpO1xuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgbmV3IERhdGFFeGNoYW5nZVNlcnZpY2UoKS5nZW5lcmF0ZVBvc3QodXNlcklucHV0KTtcbiAgICAgICAgc2V0R2VuZXJhdGVkUG9zdD8uKGNvbnRlbnQucGF5bG9hZCk7XG4gICAgICAgIHNldFN0YXRlKEFjdGlvbi5kaXNwbGF5X3Bvc3QpO1xuXG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpOyAvLyByZXNldCBsb2FkaW5nXG5cbiAgICAgICAgLy8gc3RlcCAxOlxuICAgICAgICBjb25zdCBzdGVwSW5mbzogU3RlcEluZm8gPSB7XG4gICAgICAgICAgICBqb3VybmV5SWQ6IGpvdXJuZXlJZCxcbiAgICAgICAgICAgIGlucHV0Q29udGVudDogdXNlcklucHV0LFxuICAgICAgICAgICAgb3V0cHV0Q29udGVudDogY29udGVudC5wYXlsb2FkLFxuXG4gICAgICAgIH1cbiAgICAgICAgUG9zdENyZWF0aW9uSm91cm5leVN0ZXBzLmdlbmVyYXRlZChzdGVwSW5mbyk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICBpZD1cImlucHV0LWJveFwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJXcml0ZSB5b3VyIGlkZWEgaGVyZS4uLlwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e3VzZXJJbnB1dH1cblxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0VXNlcklucHV0KGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUdlbmVyYXRlfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXshdXNlcklucHV0LnRyaW0oKSB8fCBsb2FkaW5nfT5cbiAgICAgICAgICAgICAgICB7bG9hZGluZyA/IFwiR2VuZXJhdGluZy4uLlwiIDogXCJHZW5lcmF0ZSBQb3N0XCJ9XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC8+XG4gICAgKTtcbn1cbiIsIi8vIGV4cG9ydCB0eXBlIEFjdGlvbiA9IFwiZGVmYXVsdFwiIHwgXCJkaXNwbGF5X2NvbW1lbnRcIiB8IFwiZGlzcGxheV9wb3N0XCIgfCBcImdlbmVyYXRlX2NvbW1lbnRcIiB8IFwiZ2VuZXJhdGVfcG9zdFwiO1xuXG5leHBvcnQgZW51bSBBY3Rpb24ge1xuICAgIFwiZGVmYXVsdFwiLCBcImRpc3BsYXlfY29tbWVudFwiLCBcImRpc3BsYXlfcG9zdFwiLCBcImdlbmVyYXRlX2NvbW1lbnRcIiwgXCJnZW5lcmF0ZV9wb3N0XCIsXG59IiwiaW1wb3J0IHsgRGF0YUV4Y2hhbmdlU2VydmljZSB9IGZyb20gXCJzZXJ2aWNlcy9EYXRhRXhjaGFuZ2VTZXJ2aWNlXCJcbmltcG9ydCB7IEpvdXJuZXlTdGF0dXMsIFVzZXJKb3VybmV5IH0gZnJvbSBcIi4vdHlwZXMvVXNlckpvdXJuZXlcIjtcbmltcG9ydCB7IEpvdXJuZXlUeXBlIH0gZnJvbSBcIkBhY3Rpb25zL3R5cGVzL0pvdXJuZXlUeXBlXCI7XG5cbmNvbnN0IGRhdGFFeGNoYW5nZVNlcnZpY2UgPSBuZXcgRGF0YUV4Y2hhbmdlU2VydmljZSgpO1xuXG5cbmV4cG9ydCBjb25zdCBQb3N0Q3JlYXRpb25Kb3VybmV5ID0ge1xuICAgIHN0YXJ0Sm91cm5leShqb3VybmV5SWQ6IHN0cmluZykge1xuXG4gICAgICAgIC8vIEZJWE1FOiB3cml0ZSBsb2dpYyBpbiB0aGlzIGZ1bmN0aW9uXG4gICAgfSxcblxuICAgIGVuZEpvdXJuZXkoam91cm5leUlkOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gRklYTUU6IHdyaXRlIGxvZ2ljXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgQ29tbWVudENyZWF0aW9uSm91cm5leSA9IHtcbiAgICBzdGFydEpvdXJuZXkoam91cm5leUlkOiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCB1c2VySm91cm5leTogVXNlckpvdXJuZXkgPSB7XG4gICAgICAgICAgICBqb3VybmV5SWQ6IGpvdXJuZXlJZCxcbiAgICAgICAgICAgIGpvdXJuZXlUeXBlOiBKb3VybmV5VHlwZS5DT01NRU5UX0NSRUFUSU9OLFxuICAgICAgICAgICAgc3RhdHVzOiBKb3VybmV5U3RhdHVzLlNUQVJULFxuICAgICAgICB9XG4gICAgICAgIGRhdGFFeGNoYW5nZVNlcnZpY2Uuc2VuZEpvdXJuZXlJbmZvKHVzZXJKb3VybmV5KTtcbiAgICB9LFxuXG4gICAgZW5kSm91cm5leShqb3VybmV5SWQ6IHN0cmluZykge1xuXG4gICAgICAgIGNvbnN0IHVzZXJKb3VybmV5OiBVc2VySm91cm5leSA9IHtcbiAgICAgICAgICAgIGpvdXJuZXlJZDogam91cm5leUlkLFxuICAgICAgICAgICAgam91cm5leVR5cGU6IEpvdXJuZXlUeXBlLkNPTU1FTlRfQ1JFQVRJT04sXG4gICAgICAgICAgICBzdGF0dXM6IEpvdXJuZXlTdGF0dXMuRU5ELFxuICAgICAgICB9XG4gICAgICAgIGRhdGFFeGNoYW5nZVNlcnZpY2Uuc2VuZEpvdXJuZXlJbmZvKHVzZXJKb3VybmV5KTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7IEpvdXJuZXlUeXBlIH0gZnJvbSBcIkBhY3Rpb25zL3R5cGVzL0pvdXJuZXlUeXBlXCI7XG5cbmV4cG9ydCB0eXBlIFVzZXJKb3VybmV5ID0ge1xuICAgIGpvdXJuZXlJZDogc3RyaW5nLFxuICAgIGpvdXJuZXlUeXBlOiBKb3VybmV5VHlwZSxcbiAgICBzdGF0dXM6IEpvdXJuZXlTdGF0dXMsXG59XG5cbmV4cG9ydCBlbnVtIEpvdXJuZXlTdGF0dXMge1xuICAgIFNUQVJUID0gXCJTVEFSVFwiLFxuICAgIEVORCA9IFwiRU5EXCIsXG59IiwiaW1wb3J0IHsgZ2V0VXNlckpvdXJuZXlJZCB9IGZyb20gXCJAYWN0aW9ucy9jb250ZW50L2dlbmVyYXRlVXNlckpvdXJuZXlJZFwiO1xuaW1wb3J0IHsgSm91cm5leVR5cGUgfSBmcm9tIFwiQGFjdGlvbnMvdHlwZXMvSm91cm5leVR5cGVcIjtcbmltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBQb3N0Q3JlYXRpb25Kb3VybmV5U3RlcHMsIFN0ZXBJbmZvIH0gZnJvbSBcInRyYWNpbmcvVXNlckpvdXJuZXlTdGVwVXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIERpc3BsYXlHZW5lcmF0ZWRQb3N0KHsgZ2VuZXJhdGVkUG9zdCB9OiBSZWFkb25seTx7IGdlbmVyYXRlZFBvc3Q6IHN0cmluZyB9Pikge1xuXG4gICAgY29uc3QgW2NvcGllZCwgc2V0Q29waWVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBbbG9jYWxQb3N0LCBzZXRMb2NhbFBvc3RdID0gdXNlU3RhdGUoZ2VuZXJhdGVkUG9zdCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzZXRMb2NhbFBvc3QoZ2VuZXJhdGVkUG9zdCk7XG4gICAgfSwgW2dlbmVyYXRlZFBvc3RdKTtcblxuICAgIGNvbnN0IGhhbmRsZUNvcHkgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChsb2NhbFBvc3QpO1xuICAgICAgICAgICAgc2V0Q29waWVkKHRydWUpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHNldExvY2FsUG9zdChcIlwiKSwgMTUwMCk7XG5cbiAgICAgICAgICAgIC8vc3RlcCAyIHNlbmQgam91cm5leSBzdGVwIGluZm9cbiAgICAgICAgICAgIGNvbnN0IGpvdXJuZXJ5SWQgPSBhd2FpdCBnZXRVc2VySm91cm5leUlkKEpvdXJuZXlUeXBlLlBPU1RfQ1JFQVRJT04pO1xuICAgICAgICAgICAgY29uc3Qgc3RlcERhdGE6IFN0ZXBJbmZvID0ge1xuICAgICAgICAgICAgICAgIGpvdXJuZXlJZDogam91cm5lcnlJZCxcbiAgICAgICAgICAgICAgICBpbnB1dENvbnRlbnQ6IGxvY2FsUG9zdCxcbiAgICAgICAgICAgICAgICBvdXRwdXRDb250ZW50OiBsb2NhbFBvc3QsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBQb3N0Q3JlYXRpb25Kb3VybmV5U3RlcHMuY29waWVkKHN0ZXBEYXRhKTtcblxuXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuKdjCBGYWlsZWQgdG8gY29weTpcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWxvY2FsUG9zdCkgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgaWQ9XCJvdXRwdXQtYm94XCJcbiAgICAgICAgICAgICAgICByZWFkT25seVxuICAgICAgICAgICAgICAgIHZhbHVlPXtsb2NhbFBvc3R9XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHZW5lcmF0ZWQgcG9zdCB3aWxsIGFwcGVhciBoZXJlLi4uXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC0zMiBwLTIgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCByb3VuZGVkXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ29weX1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtdC0yIHctZnVsbCBiZy1ibHVlLTUwMCB0ZXh0LXdoaXRlIHB5LTEgcm91bmRlZFwiXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFsb2NhbFBvc3QgfHwgY29waWVkfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtjb3BpZWQgPyBcIkNvcGllZCFcIiA6IFwiQ29weVwifVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvPlxuICAgICk7XG5cbn1cbiJdLCJuYW1lcyI6W10sInZlcnNpb24iOjMsImZpbGUiOiJwb3B1cC5IQVNIX1JFRl8wNDQ0ZjM4MGVhZjBlNDM4LmpzLm1hcCJ9
